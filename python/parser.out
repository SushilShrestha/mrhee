Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    DIYE
    HATAU
    LUKAU
    KORA
    BAISA
    RGPARA
    BANDAGARA
    TICHO
    BAHIRA
    BANAU
    ARKO
    DEKHI
    BATA
    KAAM
    KHAKA
    QUESTION
    SABAI
    JABA
    COLON
    NABHAE
    SUNYA
    LGPARA
    METAU
    BAJA
    MA
    CHOTI
    DOT
    KAKHA
    SAMMA
    PATHAU
    DEKHAU
    MAKA

Grammar

Rule 0     S' -> begin
Rule 1     begin -> program
Rule 2     program -> stmt NEWLINE program
Rule 3     program -> stmt
Rule 4     program -> empty
Rule 5     stmt -> slstmt
Rule 6     stmt -> mlstmt
Rule 7     slstmt -> expression
Rule 8     slstmt -> assignment
Rule 9     slstmt -> print
Rule 10    slstmt -> input
Rule 11    slstmt -> slif
Rule 12    slstmt -> incremental
Rule 13    expression -> expr
Rule 14    assignment -> IDENTIFIER ASSIGNMENT expr
Rule 15    print -> variableExpr LEKHA SEMICOLON
Rule 16    print -> variableExpr LEKHA
Rule 17    input -> variableArgs LEU
Rule 18    incremental -> IDENTIFIER AI expr
Rule 19    incremental -> IDENTIFIER SI expr
Rule 20    incremental -> IDENTIFIER MI expr
Rule 21    incremental -> IDENTIFIER DI expr
Rule 22    slif -> YEDI expr BHAE slstmt ATHAWA slstmt
Rule 23    slif -> YEDI expr BHAE slstmt
Rule 24    mlstmt -> BOGUS
Rule 25    variableExpr -> variableExpr COMMA expr
Rule 26    variableExpr -> expr
Rule 27    variableExpr -> empty
Rule 28    variableArgs -> IDENTIFIER COMMA variableArgs
Rule 29    variableArgs -> IDENTIFIER
Rule 30    variableArgs -> IDENTIFIER BOGUS
Rule 31    variableArgs -> empty
Rule 32    expr -> expr PLUS expr
Rule 33    expr -> expr MINUS expr
Rule 34    expr -> expr TIMES expr
Rule 35    expr -> expr DIVIDE expr
Rule 36    expr -> expr MODULUS expr
Rule 37    expr -> expr POWER expr
Rule 38    expr -> LPARA expr RPARA
Rule 39    expr -> integer
Rule 40    expr -> float
Rule 41    expr -> imaginary
Rule 42    expr -> string
Rule 43    expr -> identifier
Rule 44    expr -> functioncall
Rule 45    integer -> DECIMALINTEGER
Rule 46    integer -> OCTALINTEGER
Rule 47    integer -> HEXAINTEGER
Rule 48    float -> FLOAT
Rule 49    imaginary -> IMAGNUMBER
Rule 50    string -> STRING
Rule 51    identifier -> IDENTIFIER
Rule 52    functioncall -> IDENTIFIER LPARA variableExpr RPARA
Rule 53    expr -> MINUS expr
Rule 54    expr -> expr GT expr
Rule 55    expr -> expr LT expr
Rule 56    expr -> expr GE expr
Rule 57    expr -> expr LE expr
Rule 58    expr -> expr EQ expr
Rule 59    expr -> expr NE expr
Rule 60    expr -> expr RA expr
Rule 61    expr -> expr WA expr
Rule 62    expr -> expr CHHA
Rule 63    expr -> expr CHHAINA
Rule 64    empty -> <empty>

Terminals, with rules where they appear

AI                   : 18
ARKO                 : 
ASSIGNMENT           : 14
ATHAWA               : 22
BAHIRA               : 
BAISA                : 
BAJA                 : 
BANAU                : 
BANDAGARA            : 
BATA                 : 
BHAE                 : 22 23
BOGUS                : 24 30
CHHA                 : 62
CHHAINA              : 63
CHOTI                : 
COLON                : 
COMMA                : 25 28
DECIMALINTEGER       : 45
DEKHAU               : 
DEKHI                : 
DI                   : 21
DIVIDE               : 35
DIYE                 : 
DOT                  : 
EQ                   : 58
FLOAT                : 48
GE                   : 56
GT                   : 54
HATAU                : 
HEXAINTEGER          : 47
IDENTIFIER           : 14 18 19 20 21 28 29 30 51 52
IMAGNUMBER           : 49
JABA                 : 
KAAM                 : 
KAKHA                : 
KHAKA                : 
KORA                 : 
LE                   : 57
LEKHA                : 15 16
LEU                  : 17
LGPARA               : 
LPARA                : 38 52
LT                   : 55
LUKAU                : 
MA                   : 
MAKA                 : 
METAU                : 
MI                   : 20
MINUS                : 33 53
MODULUS              : 36
NABHAE               : 
NE                   : 59
NEWLINE              : 2
OCTALINTEGER         : 46
PATHAU               : 
PLUS                 : 32
POWER                : 37
QUESTION             : 
RA                   : 60
RGPARA               : 
RPARA                : 38 52
SABAI                : 
SAMMA                : 
SEMICOLON            : 15
SI                   : 19
STRING               : 50
SUNYA                : 
TICHO                : 
TIMES                : 34
WA                   : 61
YEDI                 : 22 23
error                : 

Nonterminals, with rules where they appear

assignment           : 8
begin                : 0
empty                : 4 27 31
expr                 : 13 14 18 19 20 21 22 23 25 26 32 32 33 33 34 34 35 35 36 36 37 37 38 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 63
expression           : 7
float                : 40
functioncall         : 44
identifier           : 43
imaginary            : 41
incremental          : 12
input                : 10
integer              : 39
mlstmt               : 6
print                : 9
program              : 1 2
slif                 : 11
slstmt               : 5 22 22 23
stmt                 : 2 3
string               : 42
variableArgs         : 17 28
variableExpr         : 15 16 25 52

Parsing method: LALR

state 0

    (0) S' -> . begin
    (1) begin -> . program
    (2) program -> . stmt NEWLINE program
    (3) program -> . stmt
    (4) program -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (64) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (24) mlstmt -> . BOGUS
    (13) expression -> . expr
    (14) assignment -> . IDENTIFIER ASSIGNMENT expr
    (15) print -> . variableExpr LEKHA SEMICOLON
    (16) print -> . variableExpr LEKHA
    (17) input -> . variableArgs LEU
    (22) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (23) slif -> . YEDI expr BHAE slstmt
    (18) incremental -> . IDENTIFIER AI expr
    (19) incremental -> . IDENTIFIER SI expr
    (20) incremental -> . IDENTIFIER MI expr
    (21) incremental -> . IDENTIFIER DI expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (25) variableExpr -> . variableExpr COMMA expr
    (26) variableExpr -> . expr
    (27) variableExpr -> . empty
    (28) variableArgs -> . IDENTIFIER COMMA variableArgs
    (29) variableArgs -> . IDENTIFIER
    (30) variableArgs -> . IDENTIFIER BOGUS
    (31) variableArgs -> . empty
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    $end            reduce using rule 64 (empty -> .)
    LEKHA           reduce using rule 64 (empty -> .)
    COMMA           reduce using rule 64 (empty -> .)
    LEU             reduce using rule 64 (empty -> .)
    BOGUS           shift and go to state 5
    IDENTIFIER      shift and go to state 13
    YEDI            shift and go to state 2
    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12

    slif                           shift and go to state 1
    begin                          shift and go to state 15
    identifier                     shift and go to state 31
    slstmt                         shift and go to state 17
    integer                        shift and go to state 22
    assignment                     shift and go to state 18
    float                          shift and go to state 16
    incremental                    shift and go to state 4
    stmt                           shift and go to state 20
    variableExpr                   shift and go to state 28
    program                        shift and go to state 9
    mlstmt                         shift and go to state 29
    expr                           shift and go to state 26
    print                          shift and go to state 10
    input                          shift and go to state 11
    imaginary                      shift and go to state 23
    variableArgs                   shift and go to state 8
    expression                     shift and go to state 32
    functioncall                   shift and go to state 30
    empty                          shift and go to state 14
    string                         shift and go to state 24

state 1

    (11) slstmt -> slif .

    NEWLINE         reduce using rule 11 (slstmt -> slif .)
    $end            reduce using rule 11 (slstmt -> slif .)
    ATHAWA          reduce using rule 11 (slstmt -> slif .)


state 2

    (22) slif -> YEDI . expr BHAE slstmt ATHAWA slstmt
    (23) slif -> YEDI . expr BHAE slstmt
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    expr                           shift and go to state 34
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31
    string                         shift and go to state 24

state 3

    (38) expr -> LPARA . expr RPARA
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 35
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 4

    (12) slstmt -> incremental .

    NEWLINE         reduce using rule 12 (slstmt -> incremental .)
    $end            reduce using rule 12 (slstmt -> incremental .)
    ATHAWA          reduce using rule 12 (slstmt -> incremental .)


state 5

    (24) mlstmt -> BOGUS .

    NEWLINE         reduce using rule 24 (mlstmt -> BOGUS .)
    $end            reduce using rule 24 (mlstmt -> BOGUS .)


state 6

    (53) expr -> MINUS . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 36
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 7

    (46) integer -> OCTALINTEGER .

    PLUS            reduce using rule 46 (integer -> OCTALINTEGER .)
    MINUS           reduce using rule 46 (integer -> OCTALINTEGER .)
    TIMES           reduce using rule 46 (integer -> OCTALINTEGER .)
    DIVIDE          reduce using rule 46 (integer -> OCTALINTEGER .)
    MODULUS         reduce using rule 46 (integer -> OCTALINTEGER .)
    POWER           reduce using rule 46 (integer -> OCTALINTEGER .)
    GT              reduce using rule 46 (integer -> OCTALINTEGER .)
    LT              reduce using rule 46 (integer -> OCTALINTEGER .)
    GE              reduce using rule 46 (integer -> OCTALINTEGER .)
    LE              reduce using rule 46 (integer -> OCTALINTEGER .)
    EQ              reduce using rule 46 (integer -> OCTALINTEGER .)
    NE              reduce using rule 46 (integer -> OCTALINTEGER .)
    RA              reduce using rule 46 (integer -> OCTALINTEGER .)
    WA              reduce using rule 46 (integer -> OCTALINTEGER .)
    CHHA            reduce using rule 46 (integer -> OCTALINTEGER .)
    CHHAINA         reduce using rule 46 (integer -> OCTALINTEGER .)
    NEWLINE         reduce using rule 46 (integer -> OCTALINTEGER .)
    $end            reduce using rule 46 (integer -> OCTALINTEGER .)
    LEKHA           reduce using rule 46 (integer -> OCTALINTEGER .)
    COMMA           reduce using rule 46 (integer -> OCTALINTEGER .)
    BHAE            reduce using rule 46 (integer -> OCTALINTEGER .)
    RPARA           reduce using rule 46 (integer -> OCTALINTEGER .)
    ATHAWA          reduce using rule 46 (integer -> OCTALINTEGER .)


state 8

    (17) input -> variableArgs . LEU

    LEU             shift and go to state 37


state 9

    (1) begin -> program .

    $end            reduce using rule 1 (begin -> program .)


state 10

    (9) slstmt -> print .

    NEWLINE         reduce using rule 9 (slstmt -> print .)
    $end            reduce using rule 9 (slstmt -> print .)
    ATHAWA          reduce using rule 9 (slstmt -> print .)


state 11

    (10) slstmt -> input .

    NEWLINE         reduce using rule 10 (slstmt -> input .)
    $end            reduce using rule 10 (slstmt -> input .)
    ATHAWA          reduce using rule 10 (slstmt -> input .)


state 12

    (50) string -> STRING .

    PLUS            reduce using rule 50 (string -> STRING .)
    MINUS           reduce using rule 50 (string -> STRING .)
    TIMES           reduce using rule 50 (string -> STRING .)
    DIVIDE          reduce using rule 50 (string -> STRING .)
    MODULUS         reduce using rule 50 (string -> STRING .)
    POWER           reduce using rule 50 (string -> STRING .)
    GT              reduce using rule 50 (string -> STRING .)
    LT              reduce using rule 50 (string -> STRING .)
    GE              reduce using rule 50 (string -> STRING .)
    LE              reduce using rule 50 (string -> STRING .)
    EQ              reduce using rule 50 (string -> STRING .)
    NE              reduce using rule 50 (string -> STRING .)
    RA              reduce using rule 50 (string -> STRING .)
    WA              reduce using rule 50 (string -> STRING .)
    CHHA            reduce using rule 50 (string -> STRING .)
    CHHAINA         reduce using rule 50 (string -> STRING .)
    NEWLINE         reduce using rule 50 (string -> STRING .)
    $end            reduce using rule 50 (string -> STRING .)
    LEKHA           reduce using rule 50 (string -> STRING .)
    COMMA           reduce using rule 50 (string -> STRING .)
    BHAE            reduce using rule 50 (string -> STRING .)
    RPARA           reduce using rule 50 (string -> STRING .)
    ATHAWA          reduce using rule 50 (string -> STRING .)


state 13

    (14) assignment -> IDENTIFIER . ASSIGNMENT expr
    (18) incremental -> IDENTIFIER . AI expr
    (19) incremental -> IDENTIFIER . SI expr
    (20) incremental -> IDENTIFIER . MI expr
    (21) incremental -> IDENTIFIER . DI expr
    (28) variableArgs -> IDENTIFIER . COMMA variableArgs
    (29) variableArgs -> IDENTIFIER .
    (30) variableArgs -> IDENTIFIER . BOGUS
    (51) identifier -> IDENTIFIER .
    (52) functioncall -> IDENTIFIER . LPARA variableExpr RPARA

  ! shift/reduce conflict for COMMA resolved as shift
    ASSIGNMENT      shift and go to state 40
    AI              shift and go to state 39
    SI              shift and go to state 43
    MI              shift and go to state 42
    DI              shift and go to state 38
    COMMA           shift and go to state 44
    LEU             reduce using rule 29 (variableArgs -> IDENTIFIER .)
    BOGUS           shift and go to state 45
    PLUS            reduce using rule 51 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 51 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 51 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 51 (identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 51 (identifier -> IDENTIFIER .)
    POWER           reduce using rule 51 (identifier -> IDENTIFIER .)
    GT              reduce using rule 51 (identifier -> IDENTIFIER .)
    LT              reduce using rule 51 (identifier -> IDENTIFIER .)
    GE              reduce using rule 51 (identifier -> IDENTIFIER .)
    LE              reduce using rule 51 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 51 (identifier -> IDENTIFIER .)
    NE              reduce using rule 51 (identifier -> IDENTIFIER .)
    RA              reduce using rule 51 (identifier -> IDENTIFIER .)
    WA              reduce using rule 51 (identifier -> IDENTIFIER .)
    CHHA            reduce using rule 51 (identifier -> IDENTIFIER .)
    CHHAINA         reduce using rule 51 (identifier -> IDENTIFIER .)
    ATHAWA          reduce using rule 51 (identifier -> IDENTIFIER .)
    NEWLINE         reduce using rule 51 (identifier -> IDENTIFIER .)
    $end            reduce using rule 51 (identifier -> IDENTIFIER .)
    LEKHA           reduce using rule 51 (identifier -> IDENTIFIER .)
    LPARA           shift and go to state 41

  ! COMMA           [ reduce using rule 51 (identifier -> IDENTIFIER .) ]


state 14

    (4) program -> empty .
    (27) variableExpr -> empty .
    (31) variableArgs -> empty .

    $end            reduce using rule 4 (program -> empty .)
    LEKHA           reduce using rule 27 (variableExpr -> empty .)
    COMMA           reduce using rule 27 (variableExpr -> empty .)
    LEU             reduce using rule 31 (variableArgs -> empty .)


state 15

    (0) S' -> begin .



state 16

    (40) expr -> float .

    PLUS            reduce using rule 40 (expr -> float .)
    MINUS           reduce using rule 40 (expr -> float .)
    TIMES           reduce using rule 40 (expr -> float .)
    DIVIDE          reduce using rule 40 (expr -> float .)
    MODULUS         reduce using rule 40 (expr -> float .)
    POWER           reduce using rule 40 (expr -> float .)
    GT              reduce using rule 40 (expr -> float .)
    LT              reduce using rule 40 (expr -> float .)
    GE              reduce using rule 40 (expr -> float .)
    LE              reduce using rule 40 (expr -> float .)
    EQ              reduce using rule 40 (expr -> float .)
    NE              reduce using rule 40 (expr -> float .)
    RA              reduce using rule 40 (expr -> float .)
    WA              reduce using rule 40 (expr -> float .)
    CHHA            reduce using rule 40 (expr -> float .)
    CHHAINA         reduce using rule 40 (expr -> float .)
    NEWLINE         reduce using rule 40 (expr -> float .)
    $end            reduce using rule 40 (expr -> float .)
    LEKHA           reduce using rule 40 (expr -> float .)
    COMMA           reduce using rule 40 (expr -> float .)
    BHAE            reduce using rule 40 (expr -> float .)
    RPARA           reduce using rule 40 (expr -> float .)
    ATHAWA          reduce using rule 40 (expr -> float .)


state 17

    (5) stmt -> slstmt .

    NEWLINE         reduce using rule 5 (stmt -> slstmt .)
    $end            reduce using rule 5 (stmt -> slstmt .)


state 18

    (8) slstmt -> assignment .

    NEWLINE         reduce using rule 8 (slstmt -> assignment .)
    $end            reduce using rule 8 (slstmt -> assignment .)
    ATHAWA          reduce using rule 8 (slstmt -> assignment .)


state 19

    (45) integer -> DECIMALINTEGER .

    PLUS            reduce using rule 45 (integer -> DECIMALINTEGER .)
    MINUS           reduce using rule 45 (integer -> DECIMALINTEGER .)
    TIMES           reduce using rule 45 (integer -> DECIMALINTEGER .)
    DIVIDE          reduce using rule 45 (integer -> DECIMALINTEGER .)
    MODULUS         reduce using rule 45 (integer -> DECIMALINTEGER .)
    POWER           reduce using rule 45 (integer -> DECIMALINTEGER .)
    GT              reduce using rule 45 (integer -> DECIMALINTEGER .)
    LT              reduce using rule 45 (integer -> DECIMALINTEGER .)
    GE              reduce using rule 45 (integer -> DECIMALINTEGER .)
    LE              reduce using rule 45 (integer -> DECIMALINTEGER .)
    EQ              reduce using rule 45 (integer -> DECIMALINTEGER .)
    NE              reduce using rule 45 (integer -> DECIMALINTEGER .)
    RA              reduce using rule 45 (integer -> DECIMALINTEGER .)
    WA              reduce using rule 45 (integer -> DECIMALINTEGER .)
    CHHA            reduce using rule 45 (integer -> DECIMALINTEGER .)
    CHHAINA         reduce using rule 45 (integer -> DECIMALINTEGER .)
    NEWLINE         reduce using rule 45 (integer -> DECIMALINTEGER .)
    $end            reduce using rule 45 (integer -> DECIMALINTEGER .)
    LEKHA           reduce using rule 45 (integer -> DECIMALINTEGER .)
    COMMA           reduce using rule 45 (integer -> DECIMALINTEGER .)
    BHAE            reduce using rule 45 (integer -> DECIMALINTEGER .)
    RPARA           reduce using rule 45 (integer -> DECIMALINTEGER .)
    ATHAWA          reduce using rule 45 (integer -> DECIMALINTEGER .)


state 20

    (2) program -> stmt . NEWLINE program
    (3) program -> stmt .

    NEWLINE         shift and go to state 46
    $end            reduce using rule 3 (program -> stmt .)


state 21

    (47) integer -> HEXAINTEGER .

    PLUS            reduce using rule 47 (integer -> HEXAINTEGER .)
    MINUS           reduce using rule 47 (integer -> HEXAINTEGER .)
    TIMES           reduce using rule 47 (integer -> HEXAINTEGER .)
    DIVIDE          reduce using rule 47 (integer -> HEXAINTEGER .)
    MODULUS         reduce using rule 47 (integer -> HEXAINTEGER .)
    POWER           reduce using rule 47 (integer -> HEXAINTEGER .)
    GT              reduce using rule 47 (integer -> HEXAINTEGER .)
    LT              reduce using rule 47 (integer -> HEXAINTEGER .)
    GE              reduce using rule 47 (integer -> HEXAINTEGER .)
    LE              reduce using rule 47 (integer -> HEXAINTEGER .)
    EQ              reduce using rule 47 (integer -> HEXAINTEGER .)
    NE              reduce using rule 47 (integer -> HEXAINTEGER .)
    RA              reduce using rule 47 (integer -> HEXAINTEGER .)
    WA              reduce using rule 47 (integer -> HEXAINTEGER .)
    CHHA            reduce using rule 47 (integer -> HEXAINTEGER .)
    CHHAINA         reduce using rule 47 (integer -> HEXAINTEGER .)
    NEWLINE         reduce using rule 47 (integer -> HEXAINTEGER .)
    $end            reduce using rule 47 (integer -> HEXAINTEGER .)
    LEKHA           reduce using rule 47 (integer -> HEXAINTEGER .)
    COMMA           reduce using rule 47 (integer -> HEXAINTEGER .)
    BHAE            reduce using rule 47 (integer -> HEXAINTEGER .)
    RPARA           reduce using rule 47 (integer -> HEXAINTEGER .)
    ATHAWA          reduce using rule 47 (integer -> HEXAINTEGER .)


state 22

    (39) expr -> integer .

    PLUS            reduce using rule 39 (expr -> integer .)
    MINUS           reduce using rule 39 (expr -> integer .)
    TIMES           reduce using rule 39 (expr -> integer .)
    DIVIDE          reduce using rule 39 (expr -> integer .)
    MODULUS         reduce using rule 39 (expr -> integer .)
    POWER           reduce using rule 39 (expr -> integer .)
    GT              reduce using rule 39 (expr -> integer .)
    LT              reduce using rule 39 (expr -> integer .)
    GE              reduce using rule 39 (expr -> integer .)
    LE              reduce using rule 39 (expr -> integer .)
    EQ              reduce using rule 39 (expr -> integer .)
    NE              reduce using rule 39 (expr -> integer .)
    RA              reduce using rule 39 (expr -> integer .)
    WA              reduce using rule 39 (expr -> integer .)
    CHHA            reduce using rule 39 (expr -> integer .)
    CHHAINA         reduce using rule 39 (expr -> integer .)
    NEWLINE         reduce using rule 39 (expr -> integer .)
    $end            reduce using rule 39 (expr -> integer .)
    LEKHA           reduce using rule 39 (expr -> integer .)
    COMMA           reduce using rule 39 (expr -> integer .)
    BHAE            reduce using rule 39 (expr -> integer .)
    RPARA           reduce using rule 39 (expr -> integer .)
    ATHAWA          reduce using rule 39 (expr -> integer .)


state 23

    (41) expr -> imaginary .

    PLUS            reduce using rule 41 (expr -> imaginary .)
    MINUS           reduce using rule 41 (expr -> imaginary .)
    TIMES           reduce using rule 41 (expr -> imaginary .)
    DIVIDE          reduce using rule 41 (expr -> imaginary .)
    MODULUS         reduce using rule 41 (expr -> imaginary .)
    POWER           reduce using rule 41 (expr -> imaginary .)
    GT              reduce using rule 41 (expr -> imaginary .)
    LT              reduce using rule 41 (expr -> imaginary .)
    GE              reduce using rule 41 (expr -> imaginary .)
    LE              reduce using rule 41 (expr -> imaginary .)
    EQ              reduce using rule 41 (expr -> imaginary .)
    NE              reduce using rule 41 (expr -> imaginary .)
    RA              reduce using rule 41 (expr -> imaginary .)
    WA              reduce using rule 41 (expr -> imaginary .)
    CHHA            reduce using rule 41 (expr -> imaginary .)
    CHHAINA         reduce using rule 41 (expr -> imaginary .)
    NEWLINE         reduce using rule 41 (expr -> imaginary .)
    $end            reduce using rule 41 (expr -> imaginary .)
    LEKHA           reduce using rule 41 (expr -> imaginary .)
    COMMA           reduce using rule 41 (expr -> imaginary .)
    BHAE            reduce using rule 41 (expr -> imaginary .)
    RPARA           reduce using rule 41 (expr -> imaginary .)
    ATHAWA          reduce using rule 41 (expr -> imaginary .)


state 24

    (42) expr -> string .

    PLUS            reduce using rule 42 (expr -> string .)
    MINUS           reduce using rule 42 (expr -> string .)
    TIMES           reduce using rule 42 (expr -> string .)
    DIVIDE          reduce using rule 42 (expr -> string .)
    MODULUS         reduce using rule 42 (expr -> string .)
    POWER           reduce using rule 42 (expr -> string .)
    GT              reduce using rule 42 (expr -> string .)
    LT              reduce using rule 42 (expr -> string .)
    GE              reduce using rule 42 (expr -> string .)
    LE              reduce using rule 42 (expr -> string .)
    EQ              reduce using rule 42 (expr -> string .)
    NE              reduce using rule 42 (expr -> string .)
    RA              reduce using rule 42 (expr -> string .)
    WA              reduce using rule 42 (expr -> string .)
    CHHA            reduce using rule 42 (expr -> string .)
    CHHAINA         reduce using rule 42 (expr -> string .)
    NEWLINE         reduce using rule 42 (expr -> string .)
    $end            reduce using rule 42 (expr -> string .)
    LEKHA           reduce using rule 42 (expr -> string .)
    COMMA           reduce using rule 42 (expr -> string .)
    BHAE            reduce using rule 42 (expr -> string .)
    RPARA           reduce using rule 42 (expr -> string .)
    ATHAWA          reduce using rule 42 (expr -> string .)


state 25

    (49) imaginary -> IMAGNUMBER .

    PLUS            reduce using rule 49 (imaginary -> IMAGNUMBER .)
    MINUS           reduce using rule 49 (imaginary -> IMAGNUMBER .)
    TIMES           reduce using rule 49 (imaginary -> IMAGNUMBER .)
    DIVIDE          reduce using rule 49 (imaginary -> IMAGNUMBER .)
    MODULUS         reduce using rule 49 (imaginary -> IMAGNUMBER .)
    POWER           reduce using rule 49 (imaginary -> IMAGNUMBER .)
    GT              reduce using rule 49 (imaginary -> IMAGNUMBER .)
    LT              reduce using rule 49 (imaginary -> IMAGNUMBER .)
    GE              reduce using rule 49 (imaginary -> IMAGNUMBER .)
    LE              reduce using rule 49 (imaginary -> IMAGNUMBER .)
    EQ              reduce using rule 49 (imaginary -> IMAGNUMBER .)
    NE              reduce using rule 49 (imaginary -> IMAGNUMBER .)
    RA              reduce using rule 49 (imaginary -> IMAGNUMBER .)
    WA              reduce using rule 49 (imaginary -> IMAGNUMBER .)
    CHHA            reduce using rule 49 (imaginary -> IMAGNUMBER .)
    CHHAINA         reduce using rule 49 (imaginary -> IMAGNUMBER .)
    NEWLINE         reduce using rule 49 (imaginary -> IMAGNUMBER .)
    $end            reduce using rule 49 (imaginary -> IMAGNUMBER .)
    LEKHA           reduce using rule 49 (imaginary -> IMAGNUMBER .)
    COMMA           reduce using rule 49 (imaginary -> IMAGNUMBER .)
    BHAE            reduce using rule 49 (imaginary -> IMAGNUMBER .)
    RPARA           reduce using rule 49 (imaginary -> IMAGNUMBER .)
    ATHAWA          reduce using rule 49 (imaginary -> IMAGNUMBER .)


state 26

    (13) expression -> expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA
    (26) variableExpr -> expr .

    NEWLINE         reduce using rule 13 (expression -> expr .)
    $end            reduce using rule 13 (expression -> expr .)
    ATHAWA          reduce using rule 13 (expression -> expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57
    LEKHA           reduce using rule 26 (variableExpr -> expr .)
    COMMA           reduce using rule 26 (variableExpr -> expr .)


state 27

    (48) float -> FLOAT .

    PLUS            reduce using rule 48 (float -> FLOAT .)
    MINUS           reduce using rule 48 (float -> FLOAT .)
    TIMES           reduce using rule 48 (float -> FLOAT .)
    DIVIDE          reduce using rule 48 (float -> FLOAT .)
    MODULUS         reduce using rule 48 (float -> FLOAT .)
    POWER           reduce using rule 48 (float -> FLOAT .)
    GT              reduce using rule 48 (float -> FLOAT .)
    LT              reduce using rule 48 (float -> FLOAT .)
    GE              reduce using rule 48 (float -> FLOAT .)
    LE              reduce using rule 48 (float -> FLOAT .)
    EQ              reduce using rule 48 (float -> FLOAT .)
    NE              reduce using rule 48 (float -> FLOAT .)
    RA              reduce using rule 48 (float -> FLOAT .)
    WA              reduce using rule 48 (float -> FLOAT .)
    CHHA            reduce using rule 48 (float -> FLOAT .)
    CHHAINA         reduce using rule 48 (float -> FLOAT .)
    NEWLINE         reduce using rule 48 (float -> FLOAT .)
    $end            reduce using rule 48 (float -> FLOAT .)
    LEKHA           reduce using rule 48 (float -> FLOAT .)
    COMMA           reduce using rule 48 (float -> FLOAT .)
    ATHAWA          reduce using rule 48 (float -> FLOAT .)
    BHAE            reduce using rule 48 (float -> FLOAT .)
    RPARA           reduce using rule 48 (float -> FLOAT .)


state 28

    (15) print -> variableExpr . LEKHA SEMICOLON
    (16) print -> variableExpr . LEKHA
    (25) variableExpr -> variableExpr . COMMA expr

    LEKHA           shift and go to state 64
    COMMA           shift and go to state 63


state 29

    (6) stmt -> mlstmt .

    NEWLINE         reduce using rule 6 (stmt -> mlstmt .)
    $end            reduce using rule 6 (stmt -> mlstmt .)


state 30

    (44) expr -> functioncall .

    PLUS            reduce using rule 44 (expr -> functioncall .)
    MINUS           reduce using rule 44 (expr -> functioncall .)
    TIMES           reduce using rule 44 (expr -> functioncall .)
    DIVIDE          reduce using rule 44 (expr -> functioncall .)
    MODULUS         reduce using rule 44 (expr -> functioncall .)
    POWER           reduce using rule 44 (expr -> functioncall .)
    GT              reduce using rule 44 (expr -> functioncall .)
    LT              reduce using rule 44 (expr -> functioncall .)
    GE              reduce using rule 44 (expr -> functioncall .)
    LE              reduce using rule 44 (expr -> functioncall .)
    EQ              reduce using rule 44 (expr -> functioncall .)
    NE              reduce using rule 44 (expr -> functioncall .)
    RA              reduce using rule 44 (expr -> functioncall .)
    WA              reduce using rule 44 (expr -> functioncall .)
    CHHA            reduce using rule 44 (expr -> functioncall .)
    CHHAINA         reduce using rule 44 (expr -> functioncall .)
    NEWLINE         reduce using rule 44 (expr -> functioncall .)
    $end            reduce using rule 44 (expr -> functioncall .)
    LEKHA           reduce using rule 44 (expr -> functioncall .)
    COMMA           reduce using rule 44 (expr -> functioncall .)
    BHAE            reduce using rule 44 (expr -> functioncall .)
    RPARA           reduce using rule 44 (expr -> functioncall .)
    ATHAWA          reduce using rule 44 (expr -> functioncall .)


state 31

    (43) expr -> identifier .

    PLUS            reduce using rule 43 (expr -> identifier .)
    MINUS           reduce using rule 43 (expr -> identifier .)
    TIMES           reduce using rule 43 (expr -> identifier .)
    DIVIDE          reduce using rule 43 (expr -> identifier .)
    MODULUS         reduce using rule 43 (expr -> identifier .)
    POWER           reduce using rule 43 (expr -> identifier .)
    GT              reduce using rule 43 (expr -> identifier .)
    LT              reduce using rule 43 (expr -> identifier .)
    GE              reduce using rule 43 (expr -> identifier .)
    LE              reduce using rule 43 (expr -> identifier .)
    EQ              reduce using rule 43 (expr -> identifier .)
    NE              reduce using rule 43 (expr -> identifier .)
    RA              reduce using rule 43 (expr -> identifier .)
    WA              reduce using rule 43 (expr -> identifier .)
    CHHA            reduce using rule 43 (expr -> identifier .)
    CHHAINA         reduce using rule 43 (expr -> identifier .)
    NEWLINE         reduce using rule 43 (expr -> identifier .)
    $end            reduce using rule 43 (expr -> identifier .)
    LEKHA           reduce using rule 43 (expr -> identifier .)
    COMMA           reduce using rule 43 (expr -> identifier .)
    BHAE            reduce using rule 43 (expr -> identifier .)
    RPARA           reduce using rule 43 (expr -> identifier .)
    ATHAWA          reduce using rule 43 (expr -> identifier .)


state 32

    (7) slstmt -> expression .

    NEWLINE         reduce using rule 7 (slstmt -> expression .)
    $end            reduce using rule 7 (slstmt -> expression .)
    ATHAWA          reduce using rule 7 (slstmt -> expression .)


state 33

    (51) identifier -> IDENTIFIER .
    (52) functioncall -> IDENTIFIER . LPARA variableExpr RPARA

    PLUS            reduce using rule 51 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 51 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 51 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 51 (identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 51 (identifier -> IDENTIFIER .)
    POWER           reduce using rule 51 (identifier -> IDENTIFIER .)
    GT              reduce using rule 51 (identifier -> IDENTIFIER .)
    LT              reduce using rule 51 (identifier -> IDENTIFIER .)
    GE              reduce using rule 51 (identifier -> IDENTIFIER .)
    LE              reduce using rule 51 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 51 (identifier -> IDENTIFIER .)
    NE              reduce using rule 51 (identifier -> IDENTIFIER .)
    RA              reduce using rule 51 (identifier -> IDENTIFIER .)
    WA              reduce using rule 51 (identifier -> IDENTIFIER .)
    CHHA            reduce using rule 51 (identifier -> IDENTIFIER .)
    CHHAINA         reduce using rule 51 (identifier -> IDENTIFIER .)
    NEWLINE         reduce using rule 51 (identifier -> IDENTIFIER .)
    $end            reduce using rule 51 (identifier -> IDENTIFIER .)
    LEKHA           reduce using rule 51 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 51 (identifier -> IDENTIFIER .)
    BHAE            reduce using rule 51 (identifier -> IDENTIFIER .)
    RPARA           reduce using rule 51 (identifier -> IDENTIFIER .)
    ATHAWA          reduce using rule 51 (identifier -> IDENTIFIER .)
    LPARA           shift and go to state 41


state 34

    (22) slif -> YEDI expr . BHAE slstmt ATHAWA slstmt
    (23) slif -> YEDI expr . BHAE slstmt
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    BHAE            shift and go to state 65
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57


state 35

    (38) expr -> LPARA expr . RPARA
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    RPARA           shift and go to state 66
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57


state 36

    (53) expr -> MINUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    PLUS            reduce using rule 53 (expr -> MINUS expr .)
    MINUS           reduce using rule 53 (expr -> MINUS expr .)
    TIMES           reduce using rule 53 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 53 (expr -> MINUS expr .)
    MODULUS         reduce using rule 53 (expr -> MINUS expr .)
    POWER           reduce using rule 53 (expr -> MINUS expr .)
    GT              reduce using rule 53 (expr -> MINUS expr .)
    LT              reduce using rule 53 (expr -> MINUS expr .)
    GE              reduce using rule 53 (expr -> MINUS expr .)
    LE              reduce using rule 53 (expr -> MINUS expr .)
    EQ              reduce using rule 53 (expr -> MINUS expr .)
    NE              reduce using rule 53 (expr -> MINUS expr .)
    RA              reduce using rule 53 (expr -> MINUS expr .)
    WA              reduce using rule 53 (expr -> MINUS expr .)
    CHHA            reduce using rule 53 (expr -> MINUS expr .)
    CHHAINA         reduce using rule 53 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 53 (expr -> MINUS expr .)
    $end            reduce using rule 53 (expr -> MINUS expr .)
    LEKHA           reduce using rule 53 (expr -> MINUS expr .)
    COMMA           reduce using rule 53 (expr -> MINUS expr .)
    BHAE            reduce using rule 53 (expr -> MINUS expr .)
    RPARA           reduce using rule 53 (expr -> MINUS expr .)
    ATHAWA          reduce using rule 53 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 60 ]
  ! POWER           [ shift and go to state 50 ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 37

    (17) input -> variableArgs LEU .

    ATHAWA          reduce using rule 17 (input -> variableArgs LEU .)
    NEWLINE         reduce using rule 17 (input -> variableArgs LEU .)
    $end            reduce using rule 17 (input -> variableArgs LEU .)


state 38

    (21) incremental -> IDENTIFIER DI . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 67
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 39

    (18) incremental -> IDENTIFIER AI . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 68
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 40

    (14) assignment -> IDENTIFIER ASSIGNMENT . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 69
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 41

    (52) functioncall -> IDENTIFIER LPARA . variableExpr RPARA
    (25) variableExpr -> . variableExpr COMMA expr
    (26) variableExpr -> . expr
    (27) variableExpr -> . empty
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (64) empty -> .
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    RPARA           reduce using rule 64 (empty -> .)
    COMMA           reduce using rule 64 (empty -> .)
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 71
    float                          shift and go to state 16
    variableExpr                   shift and go to state 72
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31
    empty                          shift and go to state 70

state 42

    (20) incremental -> IDENTIFIER MI . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 73
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 43

    (19) incremental -> IDENTIFIER SI . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 74
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 44

    (28) variableArgs -> IDENTIFIER COMMA . variableArgs
    (28) variableArgs -> . IDENTIFIER COMMA variableArgs
    (29) variableArgs -> . IDENTIFIER
    (30) variableArgs -> . IDENTIFIER BOGUS
    (31) variableArgs -> . empty
    (64) empty -> .

    IDENTIFIER      shift and go to state 75
    LEU             reduce using rule 64 (empty -> .)

    variableArgs                   shift and go to state 76
    empty                          shift and go to state 77

state 45

    (30) variableArgs -> IDENTIFIER BOGUS .

    LEU             reduce using rule 30 (variableArgs -> IDENTIFIER BOGUS .)


state 46

    (2) program -> stmt NEWLINE . program
    (2) program -> . stmt NEWLINE program
    (3) program -> . stmt
    (4) program -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (64) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (24) mlstmt -> . BOGUS
    (13) expression -> . expr
    (14) assignment -> . IDENTIFIER ASSIGNMENT expr
    (15) print -> . variableExpr LEKHA SEMICOLON
    (16) print -> . variableExpr LEKHA
    (17) input -> . variableArgs LEU
    (22) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (23) slif -> . YEDI expr BHAE slstmt
    (18) incremental -> . IDENTIFIER AI expr
    (19) incremental -> . IDENTIFIER SI expr
    (20) incremental -> . IDENTIFIER MI expr
    (21) incremental -> . IDENTIFIER DI expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (25) variableExpr -> . variableExpr COMMA expr
    (26) variableExpr -> . expr
    (27) variableExpr -> . empty
    (28) variableArgs -> . IDENTIFIER COMMA variableArgs
    (29) variableArgs -> . IDENTIFIER
    (30) variableArgs -> . IDENTIFIER BOGUS
    (31) variableArgs -> . empty
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    $end            reduce using rule 64 (empty -> .)
    LEKHA           reduce using rule 64 (empty -> .)
    COMMA           reduce using rule 64 (empty -> .)
    LEU             reduce using rule 64 (empty -> .)
    BOGUS           shift and go to state 5
    IDENTIFIER      shift and go to state 13
    YEDI            shift and go to state 2
    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12

    slif                           shift and go to state 1
    identifier                     shift and go to state 31
    slstmt                         shift and go to state 17
    integer                        shift and go to state 22
    assignment                     shift and go to state 18
    float                          shift and go to state 16
    incremental                    shift and go to state 4
    stmt                           shift and go to state 20
    variableExpr                   shift and go to state 28
    program                        shift and go to state 78
    mlstmt                         shift and go to state 29
    expr                           shift and go to state 26
    print                          shift and go to state 10
    input                          shift and go to state 11
    imaginary                      shift and go to state 23
    variableArgs                   shift and go to state 8
    expression                     shift and go to state 32
    functioncall                   shift and go to state 30
    empty                          shift and go to state 14
    string                         shift and go to state 24

state 47

    (54) expr -> expr GT . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 79
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 48

    (58) expr -> expr EQ . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 80
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 49

    (35) expr -> expr DIVIDE . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 81
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 50

    (37) expr -> expr POWER . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 82
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 51

    (56) expr -> expr GE . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 83
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 52

    (34) expr -> expr TIMES . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 84
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 53

    (55) expr -> expr LT . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 85
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 54

    (57) expr -> expr LE . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 86
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 55

    (32) expr -> expr PLUS . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 87
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 56

    (60) expr -> expr RA . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 88
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 57

    (63) expr -> expr CHHAINA .

    PLUS            reduce using rule 63 (expr -> expr CHHAINA .)
    MINUS           reduce using rule 63 (expr -> expr CHHAINA .)
    TIMES           reduce using rule 63 (expr -> expr CHHAINA .)
    DIVIDE          reduce using rule 63 (expr -> expr CHHAINA .)
    MODULUS         reduce using rule 63 (expr -> expr CHHAINA .)
    POWER           reduce using rule 63 (expr -> expr CHHAINA .)
    GT              reduce using rule 63 (expr -> expr CHHAINA .)
    LT              reduce using rule 63 (expr -> expr CHHAINA .)
    GE              reduce using rule 63 (expr -> expr CHHAINA .)
    LE              reduce using rule 63 (expr -> expr CHHAINA .)
    EQ              reduce using rule 63 (expr -> expr CHHAINA .)
    NE              reduce using rule 63 (expr -> expr CHHAINA .)
    RA              reduce using rule 63 (expr -> expr CHHAINA .)
    WA              reduce using rule 63 (expr -> expr CHHAINA .)
    CHHA            reduce using rule 63 (expr -> expr CHHAINA .)
    CHHAINA         reduce using rule 63 (expr -> expr CHHAINA .)
    NEWLINE         reduce using rule 63 (expr -> expr CHHAINA .)
    $end            reduce using rule 63 (expr -> expr CHHAINA .)
    LEKHA           reduce using rule 63 (expr -> expr CHHAINA .)
    COMMA           reduce using rule 63 (expr -> expr CHHAINA .)
    BHAE            reduce using rule 63 (expr -> expr CHHAINA .)
    RPARA           reduce using rule 63 (expr -> expr CHHAINA .)
    ATHAWA          reduce using rule 63 (expr -> expr CHHAINA .)


state 58

    (62) expr -> expr CHHA .

    PLUS            reduce using rule 62 (expr -> expr CHHA .)
    MINUS           reduce using rule 62 (expr -> expr CHHA .)
    TIMES           reduce using rule 62 (expr -> expr CHHA .)
    DIVIDE          reduce using rule 62 (expr -> expr CHHA .)
    MODULUS         reduce using rule 62 (expr -> expr CHHA .)
    POWER           reduce using rule 62 (expr -> expr CHHA .)
    GT              reduce using rule 62 (expr -> expr CHHA .)
    LT              reduce using rule 62 (expr -> expr CHHA .)
    GE              reduce using rule 62 (expr -> expr CHHA .)
    LE              reduce using rule 62 (expr -> expr CHHA .)
    EQ              reduce using rule 62 (expr -> expr CHHA .)
    NE              reduce using rule 62 (expr -> expr CHHA .)
    RA              reduce using rule 62 (expr -> expr CHHA .)
    WA              reduce using rule 62 (expr -> expr CHHA .)
    CHHA            reduce using rule 62 (expr -> expr CHHA .)
    CHHAINA         reduce using rule 62 (expr -> expr CHHA .)
    NEWLINE         reduce using rule 62 (expr -> expr CHHA .)
    $end            reduce using rule 62 (expr -> expr CHHA .)
    LEKHA           reduce using rule 62 (expr -> expr CHHA .)
    COMMA           reduce using rule 62 (expr -> expr CHHA .)
    BHAE            reduce using rule 62 (expr -> expr CHHA .)
    RPARA           reduce using rule 62 (expr -> expr CHHA .)
    ATHAWA          reduce using rule 62 (expr -> expr CHHA .)


state 59

    (61) expr -> expr WA . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 89
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 60

    (36) expr -> expr MODULUS . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 90
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 61

    (33) expr -> expr MINUS . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 91
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 62

    (59) expr -> expr NE . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 92
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 63

    (25) variableExpr -> variableExpr COMMA . expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    IDENTIFIER      shift and go to state 33

    string                         shift and go to state 24
    expr                           shift and go to state 93
    float                          shift and go to state 16
    functioncall                   shift and go to state 30
    integer                        shift and go to state 22
    imaginary                      shift and go to state 23
    identifier                     shift and go to state 31

state 64

    (15) print -> variableExpr LEKHA . SEMICOLON
    (16) print -> variableExpr LEKHA .

    SEMICOLON       shift and go to state 94
    NEWLINE         reduce using rule 16 (print -> variableExpr LEKHA .)
    $end            reduce using rule 16 (print -> variableExpr LEKHA .)
    ATHAWA          reduce using rule 16 (print -> variableExpr LEKHA .)


state 65

    (22) slif -> YEDI expr BHAE . slstmt ATHAWA slstmt
    (23) slif -> YEDI expr BHAE . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) expression -> . expr
    (14) assignment -> . IDENTIFIER ASSIGNMENT expr
    (15) print -> . variableExpr LEKHA SEMICOLON
    (16) print -> . variableExpr LEKHA
    (17) input -> . variableArgs LEU
    (22) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (23) slif -> . YEDI expr BHAE slstmt
    (18) incremental -> . IDENTIFIER AI expr
    (19) incremental -> . IDENTIFIER SI expr
    (20) incremental -> . IDENTIFIER MI expr
    (21) incremental -> . IDENTIFIER DI expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (25) variableExpr -> . variableExpr COMMA expr
    (26) variableExpr -> . expr
    (27) variableExpr -> . empty
    (28) variableArgs -> . IDENTIFIER COMMA variableArgs
    (29) variableArgs -> . IDENTIFIER
    (30) variableArgs -> . IDENTIFIER BOGUS
    (31) variableArgs -> . empty
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (64) empty -> .

    IDENTIFIER      shift and go to state 13
    YEDI            shift and go to state 2
    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    LEKHA           reduce using rule 64 (empty -> .)
    COMMA           reduce using rule 64 (empty -> .)
    LEU             reduce using rule 64 (empty -> .)

    slif                           shift and go to state 1
    identifier                     shift and go to state 31
    slstmt                         shift and go to state 96
    integer                        shift and go to state 22
    expr                           shift and go to state 26
    float                          shift and go to state 16
    variableExpr                   shift and go to state 28
    incremental                    shift and go to state 4
    functioncall                   shift and go to state 30
    assignment                     shift and go to state 18
    print                          shift and go to state 10
    input                          shift and go to state 11
    imaginary                      shift and go to state 23
    variableArgs                   shift and go to state 8
    expression                     shift and go to state 32
    empty                          shift and go to state 95
    string                         shift and go to state 24

state 66

    (38) expr -> LPARA expr RPARA .

    PLUS            reduce using rule 38 (expr -> LPARA expr RPARA .)
    MINUS           reduce using rule 38 (expr -> LPARA expr RPARA .)
    TIMES           reduce using rule 38 (expr -> LPARA expr RPARA .)
    DIVIDE          reduce using rule 38 (expr -> LPARA expr RPARA .)
    MODULUS         reduce using rule 38 (expr -> LPARA expr RPARA .)
    POWER           reduce using rule 38 (expr -> LPARA expr RPARA .)
    GT              reduce using rule 38 (expr -> LPARA expr RPARA .)
    LT              reduce using rule 38 (expr -> LPARA expr RPARA .)
    GE              reduce using rule 38 (expr -> LPARA expr RPARA .)
    LE              reduce using rule 38 (expr -> LPARA expr RPARA .)
    EQ              reduce using rule 38 (expr -> LPARA expr RPARA .)
    NE              reduce using rule 38 (expr -> LPARA expr RPARA .)
    RA              reduce using rule 38 (expr -> LPARA expr RPARA .)
    WA              reduce using rule 38 (expr -> LPARA expr RPARA .)
    CHHA            reduce using rule 38 (expr -> LPARA expr RPARA .)
    CHHAINA         reduce using rule 38 (expr -> LPARA expr RPARA .)
    NEWLINE         reduce using rule 38 (expr -> LPARA expr RPARA .)
    $end            reduce using rule 38 (expr -> LPARA expr RPARA .)
    LEKHA           reduce using rule 38 (expr -> LPARA expr RPARA .)
    COMMA           reduce using rule 38 (expr -> LPARA expr RPARA .)
    BHAE            reduce using rule 38 (expr -> LPARA expr RPARA .)
    RPARA           reduce using rule 38 (expr -> LPARA expr RPARA .)
    ATHAWA          reduce using rule 38 (expr -> LPARA expr RPARA .)


state 67

    (21) incremental -> IDENTIFIER DI expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 21 (incremental -> IDENTIFIER DI expr .)
    $end            reduce using rule 21 (incremental -> IDENTIFIER DI expr .)
    ATHAWA          reduce using rule 21 (incremental -> IDENTIFIER DI expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57


state 68

    (18) incremental -> IDENTIFIER AI expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 18 (incremental -> IDENTIFIER AI expr .)
    $end            reduce using rule 18 (incremental -> IDENTIFIER AI expr .)
    ATHAWA          reduce using rule 18 (incremental -> IDENTIFIER AI expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57


state 69

    (14) assignment -> IDENTIFIER ASSIGNMENT expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    ATHAWA          reduce using rule 14 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    NEWLINE         reduce using rule 14 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    $end            reduce using rule 14 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57


state 70

    (27) variableExpr -> empty .

    RPARA           reduce using rule 27 (variableExpr -> empty .)
    COMMA           reduce using rule 27 (variableExpr -> empty .)


state 71

    (26) variableExpr -> expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    RPARA           reduce using rule 26 (variableExpr -> expr .)
    COMMA           reduce using rule 26 (variableExpr -> expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57


state 72

    (52) functioncall -> IDENTIFIER LPARA variableExpr . RPARA
    (25) variableExpr -> variableExpr . COMMA expr

    RPARA           shift and go to state 97
    COMMA           shift and go to state 63


state 73

    (20) incremental -> IDENTIFIER MI expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 20 (incremental -> IDENTIFIER MI expr .)
    $end            reduce using rule 20 (incremental -> IDENTIFIER MI expr .)
    ATHAWA          reduce using rule 20 (incremental -> IDENTIFIER MI expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57


state 74

    (19) incremental -> IDENTIFIER SI expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 19 (incremental -> IDENTIFIER SI expr .)
    $end            reduce using rule 19 (incremental -> IDENTIFIER SI expr .)
    ATHAWA          reduce using rule 19 (incremental -> IDENTIFIER SI expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57


state 75

    (28) variableArgs -> IDENTIFIER . COMMA variableArgs
    (29) variableArgs -> IDENTIFIER .
    (30) variableArgs -> IDENTIFIER . BOGUS

    COMMA           shift and go to state 44
    LEU             reduce using rule 29 (variableArgs -> IDENTIFIER .)
    BOGUS           shift and go to state 45


state 76

    (28) variableArgs -> IDENTIFIER COMMA variableArgs .

    LEU             reduce using rule 28 (variableArgs -> IDENTIFIER COMMA variableArgs .)


state 77

    (31) variableArgs -> empty .

    LEU             reduce using rule 31 (variableArgs -> empty .)


state 78

    (2) program -> stmt NEWLINE program .

    $end            reduce using rule 2 (program -> stmt NEWLINE program .)


state 79

    (54) expr -> expr GT expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    GT              reduce using rule 54 (expr -> expr GT expr .)
    LT              reduce using rule 54 (expr -> expr GT expr .)
    GE              reduce using rule 54 (expr -> expr GT expr .)
    LE              reduce using rule 54 (expr -> expr GT expr .)
    EQ              reduce using rule 54 (expr -> expr GT expr .)
    NE              reduce using rule 54 (expr -> expr GT expr .)
    RA              reduce using rule 54 (expr -> expr GT expr .)
    WA              reduce using rule 54 (expr -> expr GT expr .)
    CHHA            reduce using rule 54 (expr -> expr GT expr .)
    CHHAINA         reduce using rule 54 (expr -> expr GT expr .)
    NEWLINE         reduce using rule 54 (expr -> expr GT expr .)
    $end            reduce using rule 54 (expr -> expr GT expr .)
    LEKHA           reduce using rule 54 (expr -> expr GT expr .)
    COMMA           reduce using rule 54 (expr -> expr GT expr .)
    BHAE            reduce using rule 54 (expr -> expr GT expr .)
    RPARA           reduce using rule 54 (expr -> expr GT expr .)
    ATHAWA          reduce using rule 54 (expr -> expr GT expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50

  ! PLUS            [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! MODULUS         [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! POWER           [ reduce using rule 54 (expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 80

    (58) expr -> expr EQ expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    EQ              reduce using rule 58 (expr -> expr EQ expr .)
    NE              reduce using rule 58 (expr -> expr EQ expr .)
    RA              reduce using rule 58 (expr -> expr EQ expr .)
    WA              reduce using rule 58 (expr -> expr EQ expr .)
    CHHA            reduce using rule 58 (expr -> expr EQ expr .)
    CHHAINA         reduce using rule 58 (expr -> expr EQ expr .)
    NEWLINE         reduce using rule 58 (expr -> expr EQ expr .)
    $end            reduce using rule 58 (expr -> expr EQ expr .)
    LEKHA           reduce using rule 58 (expr -> expr EQ expr .)
    COMMA           reduce using rule 58 (expr -> expr EQ expr .)
    BHAE            reduce using rule 58 (expr -> expr EQ expr .)
    RPARA           reduce using rule 58 (expr -> expr EQ expr .)
    ATHAWA          reduce using rule 58 (expr -> expr EQ expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54

  ! PLUS            [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! MODULUS         [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! POWER           [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 58 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 81

    (35) expr -> expr DIVIDE expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    PLUS            reduce using rule 35 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 35 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 35 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 35 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 35 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 35 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 35 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 35 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 35 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 35 (expr -> expr DIVIDE expr .)
    RA              reduce using rule 35 (expr -> expr DIVIDE expr .)
    WA              reduce using rule 35 (expr -> expr DIVIDE expr .)
    CHHA            reduce using rule 35 (expr -> expr DIVIDE expr .)
    CHHAINA         reduce using rule 35 (expr -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 35 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 35 (expr -> expr DIVIDE expr .)
    LEKHA           reduce using rule 35 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 35 (expr -> expr DIVIDE expr .)
    BHAE            reduce using rule 35 (expr -> expr DIVIDE expr .)
    RPARA           reduce using rule 35 (expr -> expr DIVIDE expr .)
    ATHAWA          reduce using rule 35 (expr -> expr DIVIDE expr .)
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50

  ! MODULUS         [ reduce using rule 35 (expr -> expr DIVIDE expr .) ]
  ! POWER           [ reduce using rule 35 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 82

    (37) expr -> expr POWER expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    PLUS            reduce using rule 37 (expr -> expr POWER expr .)
    MINUS           reduce using rule 37 (expr -> expr POWER expr .)
    TIMES           reduce using rule 37 (expr -> expr POWER expr .)
    DIVIDE          reduce using rule 37 (expr -> expr POWER expr .)
    MODULUS         reduce using rule 37 (expr -> expr POWER expr .)
    POWER           reduce using rule 37 (expr -> expr POWER expr .)
    GT              reduce using rule 37 (expr -> expr POWER expr .)
    LT              reduce using rule 37 (expr -> expr POWER expr .)
    GE              reduce using rule 37 (expr -> expr POWER expr .)
    LE              reduce using rule 37 (expr -> expr POWER expr .)
    EQ              reduce using rule 37 (expr -> expr POWER expr .)
    NE              reduce using rule 37 (expr -> expr POWER expr .)
    RA              reduce using rule 37 (expr -> expr POWER expr .)
    WA              reduce using rule 37 (expr -> expr POWER expr .)
    CHHA            reduce using rule 37 (expr -> expr POWER expr .)
    CHHAINA         reduce using rule 37 (expr -> expr POWER expr .)
    NEWLINE         reduce using rule 37 (expr -> expr POWER expr .)
    $end            reduce using rule 37 (expr -> expr POWER expr .)
    LEKHA           reduce using rule 37 (expr -> expr POWER expr .)
    COMMA           reduce using rule 37 (expr -> expr POWER expr .)
    BHAE            reduce using rule 37 (expr -> expr POWER expr .)
    RPARA           reduce using rule 37 (expr -> expr POWER expr .)
    ATHAWA          reduce using rule 37 (expr -> expr POWER expr .)

  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 60 ]
  ! POWER           [ shift and go to state 50 ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 83

    (56) expr -> expr GE expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    GT              reduce using rule 56 (expr -> expr GE expr .)
    LT              reduce using rule 56 (expr -> expr GE expr .)
    GE              reduce using rule 56 (expr -> expr GE expr .)
    LE              reduce using rule 56 (expr -> expr GE expr .)
    EQ              reduce using rule 56 (expr -> expr GE expr .)
    NE              reduce using rule 56 (expr -> expr GE expr .)
    RA              reduce using rule 56 (expr -> expr GE expr .)
    WA              reduce using rule 56 (expr -> expr GE expr .)
    CHHA            reduce using rule 56 (expr -> expr GE expr .)
    CHHAINA         reduce using rule 56 (expr -> expr GE expr .)
    NEWLINE         reduce using rule 56 (expr -> expr GE expr .)
    $end            reduce using rule 56 (expr -> expr GE expr .)
    LEKHA           reduce using rule 56 (expr -> expr GE expr .)
    COMMA           reduce using rule 56 (expr -> expr GE expr .)
    BHAE            reduce using rule 56 (expr -> expr GE expr .)
    RPARA           reduce using rule 56 (expr -> expr GE expr .)
    ATHAWA          reduce using rule 56 (expr -> expr GE expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50

  ! PLUS            [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! MODULUS         [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! POWER           [ reduce using rule 56 (expr -> expr GE expr .) ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 84

    (34) expr -> expr TIMES expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    PLUS            reduce using rule 34 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 34 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 34 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 34 (expr -> expr TIMES expr .)
    GT              reduce using rule 34 (expr -> expr TIMES expr .)
    LT              reduce using rule 34 (expr -> expr TIMES expr .)
    GE              reduce using rule 34 (expr -> expr TIMES expr .)
    LE              reduce using rule 34 (expr -> expr TIMES expr .)
    EQ              reduce using rule 34 (expr -> expr TIMES expr .)
    NE              reduce using rule 34 (expr -> expr TIMES expr .)
    RA              reduce using rule 34 (expr -> expr TIMES expr .)
    WA              reduce using rule 34 (expr -> expr TIMES expr .)
    CHHA            reduce using rule 34 (expr -> expr TIMES expr .)
    CHHAINA         reduce using rule 34 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 34 (expr -> expr TIMES expr .)
    $end            reduce using rule 34 (expr -> expr TIMES expr .)
    LEKHA           reduce using rule 34 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 34 (expr -> expr TIMES expr .)
    BHAE            reduce using rule 34 (expr -> expr TIMES expr .)
    RPARA           reduce using rule 34 (expr -> expr TIMES expr .)
    ATHAWA          reduce using rule 34 (expr -> expr TIMES expr .)
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50

  ! MODULUS         [ reduce using rule 34 (expr -> expr TIMES expr .) ]
  ! POWER           [ reduce using rule 34 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 85

    (55) expr -> expr LT expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    GT              reduce using rule 55 (expr -> expr LT expr .)
    LT              reduce using rule 55 (expr -> expr LT expr .)
    GE              reduce using rule 55 (expr -> expr LT expr .)
    LE              reduce using rule 55 (expr -> expr LT expr .)
    EQ              reduce using rule 55 (expr -> expr LT expr .)
    NE              reduce using rule 55 (expr -> expr LT expr .)
    RA              reduce using rule 55 (expr -> expr LT expr .)
    WA              reduce using rule 55 (expr -> expr LT expr .)
    CHHA            reduce using rule 55 (expr -> expr LT expr .)
    CHHAINA         reduce using rule 55 (expr -> expr LT expr .)
    NEWLINE         reduce using rule 55 (expr -> expr LT expr .)
    $end            reduce using rule 55 (expr -> expr LT expr .)
    LEKHA           reduce using rule 55 (expr -> expr LT expr .)
    COMMA           reduce using rule 55 (expr -> expr LT expr .)
    BHAE            reduce using rule 55 (expr -> expr LT expr .)
    RPARA           reduce using rule 55 (expr -> expr LT expr .)
    ATHAWA          reduce using rule 55 (expr -> expr LT expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50

  ! PLUS            [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! MODULUS         [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! POWER           [ reduce using rule 55 (expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 86

    (57) expr -> expr LE expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    GT              reduce using rule 57 (expr -> expr LE expr .)
    LT              reduce using rule 57 (expr -> expr LE expr .)
    GE              reduce using rule 57 (expr -> expr LE expr .)
    LE              reduce using rule 57 (expr -> expr LE expr .)
    EQ              reduce using rule 57 (expr -> expr LE expr .)
    NE              reduce using rule 57 (expr -> expr LE expr .)
    RA              reduce using rule 57 (expr -> expr LE expr .)
    WA              reduce using rule 57 (expr -> expr LE expr .)
    CHHA            reduce using rule 57 (expr -> expr LE expr .)
    CHHAINA         reduce using rule 57 (expr -> expr LE expr .)
    NEWLINE         reduce using rule 57 (expr -> expr LE expr .)
    $end            reduce using rule 57 (expr -> expr LE expr .)
    LEKHA           reduce using rule 57 (expr -> expr LE expr .)
    COMMA           reduce using rule 57 (expr -> expr LE expr .)
    BHAE            reduce using rule 57 (expr -> expr LE expr .)
    RPARA           reduce using rule 57 (expr -> expr LE expr .)
    ATHAWA          reduce using rule 57 (expr -> expr LE expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50

  ! PLUS            [ reduce using rule 57 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 57 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 57 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 57 (expr -> expr LE expr .) ]
  ! MODULUS         [ reduce using rule 57 (expr -> expr LE expr .) ]
  ! POWER           [ reduce using rule 57 (expr -> expr LE expr .) ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 87

    (32) expr -> expr PLUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    PLUS            reduce using rule 32 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 32 (expr -> expr PLUS expr .)
    GT              reduce using rule 32 (expr -> expr PLUS expr .)
    LT              reduce using rule 32 (expr -> expr PLUS expr .)
    GE              reduce using rule 32 (expr -> expr PLUS expr .)
    LE              reduce using rule 32 (expr -> expr PLUS expr .)
    EQ              reduce using rule 32 (expr -> expr PLUS expr .)
    NE              reduce using rule 32 (expr -> expr PLUS expr .)
    RA              reduce using rule 32 (expr -> expr PLUS expr .)
    WA              reduce using rule 32 (expr -> expr PLUS expr .)
    CHHA            reduce using rule 32 (expr -> expr PLUS expr .)
    CHHAINA         reduce using rule 32 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 32 (expr -> expr PLUS expr .)
    $end            reduce using rule 32 (expr -> expr PLUS expr .)
    LEKHA           reduce using rule 32 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 32 (expr -> expr PLUS expr .)
    BHAE            reduce using rule 32 (expr -> expr PLUS expr .)
    RPARA           reduce using rule 32 (expr -> expr PLUS expr .)
    ATHAWA          reduce using rule 32 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50

  ! TIMES           [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! MODULUS         [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 32 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 61 ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 88

    (60) expr -> expr RA expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    RA              reduce using rule 60 (expr -> expr RA expr .)
    WA              reduce using rule 60 (expr -> expr RA expr .)
    CHHA            reduce using rule 60 (expr -> expr RA expr .)
    CHHAINA         reduce using rule 60 (expr -> expr RA expr .)
    NEWLINE         reduce using rule 60 (expr -> expr RA expr .)
    $end            reduce using rule 60 (expr -> expr RA expr .)
    LEKHA           reduce using rule 60 (expr -> expr RA expr .)
    COMMA           reduce using rule 60 (expr -> expr RA expr .)
    BHAE            reduce using rule 60 (expr -> expr RA expr .)
    RPARA           reduce using rule 60 (expr -> expr RA expr .)
    ATHAWA          reduce using rule 60 (expr -> expr RA expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62

  ! PLUS            [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! MINUS           [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! TIMES           [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! DIVIDE          [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! MODULUS         [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! POWER           [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! GT              [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! LT              [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! GE              [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! LE              [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! EQ              [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! NE              [ reduce using rule 60 (expr -> expr RA expr .) ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 89

    (61) expr -> expr WA expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    RA              reduce using rule 61 (expr -> expr WA expr .)
    WA              reduce using rule 61 (expr -> expr WA expr .)
    CHHA            reduce using rule 61 (expr -> expr WA expr .)
    CHHAINA         reduce using rule 61 (expr -> expr WA expr .)
    NEWLINE         reduce using rule 61 (expr -> expr WA expr .)
    $end            reduce using rule 61 (expr -> expr WA expr .)
    LEKHA           reduce using rule 61 (expr -> expr WA expr .)
    COMMA           reduce using rule 61 (expr -> expr WA expr .)
    BHAE            reduce using rule 61 (expr -> expr WA expr .)
    RPARA           reduce using rule 61 (expr -> expr WA expr .)
    ATHAWA          reduce using rule 61 (expr -> expr WA expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62

  ! PLUS            [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! MINUS           [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! TIMES           [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! DIVIDE          [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! MODULUS         [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! POWER           [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! GT              [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! LT              [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! GE              [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! LE              [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! EQ              [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! NE              [ reduce using rule 61 (expr -> expr WA expr .) ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 90

    (36) expr -> expr MODULUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    PLUS            reduce using rule 36 (expr -> expr MODULUS expr .)
    MINUS           reduce using rule 36 (expr -> expr MODULUS expr .)
    TIMES           reduce using rule 36 (expr -> expr MODULUS expr .)
    DIVIDE          reduce using rule 36 (expr -> expr MODULUS expr .)
    MODULUS         reduce using rule 36 (expr -> expr MODULUS expr .)
    POWER           reduce using rule 36 (expr -> expr MODULUS expr .)
    GT              reduce using rule 36 (expr -> expr MODULUS expr .)
    LT              reduce using rule 36 (expr -> expr MODULUS expr .)
    GE              reduce using rule 36 (expr -> expr MODULUS expr .)
    LE              reduce using rule 36 (expr -> expr MODULUS expr .)
    EQ              reduce using rule 36 (expr -> expr MODULUS expr .)
    NE              reduce using rule 36 (expr -> expr MODULUS expr .)
    RA              reduce using rule 36 (expr -> expr MODULUS expr .)
    WA              reduce using rule 36 (expr -> expr MODULUS expr .)
    CHHA            reduce using rule 36 (expr -> expr MODULUS expr .)
    CHHAINA         reduce using rule 36 (expr -> expr MODULUS expr .)
    NEWLINE         reduce using rule 36 (expr -> expr MODULUS expr .)
    $end            reduce using rule 36 (expr -> expr MODULUS expr .)
    LEKHA           reduce using rule 36 (expr -> expr MODULUS expr .)
    COMMA           reduce using rule 36 (expr -> expr MODULUS expr .)
    BHAE            reduce using rule 36 (expr -> expr MODULUS expr .)
    RPARA           reduce using rule 36 (expr -> expr MODULUS expr .)
    ATHAWA          reduce using rule 36 (expr -> expr MODULUS expr .)

  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIVIDE          [ shift and go to state 49 ]
  ! MODULUS         [ shift and go to state 60 ]
  ! POWER           [ shift and go to state 50 ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 91

    (33) expr -> expr MINUS expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    PLUS            reduce using rule 33 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 33 (expr -> expr MINUS expr .)
    GT              reduce using rule 33 (expr -> expr MINUS expr .)
    LT              reduce using rule 33 (expr -> expr MINUS expr .)
    GE              reduce using rule 33 (expr -> expr MINUS expr .)
    LE              reduce using rule 33 (expr -> expr MINUS expr .)
    EQ              reduce using rule 33 (expr -> expr MINUS expr .)
    NE              reduce using rule 33 (expr -> expr MINUS expr .)
    RA              reduce using rule 33 (expr -> expr MINUS expr .)
    WA              reduce using rule 33 (expr -> expr MINUS expr .)
    CHHA            reduce using rule 33 (expr -> expr MINUS expr .)
    CHHAINA         reduce using rule 33 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 33 (expr -> expr MINUS expr .)
    $end            reduce using rule 33 (expr -> expr MINUS expr .)
    LEKHA           reduce using rule 33 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 33 (expr -> expr MINUS expr .)
    BHAE            reduce using rule 33 (expr -> expr MINUS expr .)
    RPARA           reduce using rule 33 (expr -> expr MINUS expr .)
    ATHAWA          reduce using rule 33 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50

  ! TIMES           [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! MODULUS         [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 33 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 61 ]
  ! GT              [ shift and go to state 47 ]
  ! LT              [ shift and go to state 53 ]
  ! GE              [ shift and go to state 51 ]
  ! LE              [ shift and go to state 54 ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 92

    (59) expr -> expr NE expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    EQ              reduce using rule 59 (expr -> expr NE expr .)
    NE              reduce using rule 59 (expr -> expr NE expr .)
    RA              reduce using rule 59 (expr -> expr NE expr .)
    WA              reduce using rule 59 (expr -> expr NE expr .)
    CHHA            reduce using rule 59 (expr -> expr NE expr .)
    CHHAINA         reduce using rule 59 (expr -> expr NE expr .)
    NEWLINE         reduce using rule 59 (expr -> expr NE expr .)
    $end            reduce using rule 59 (expr -> expr NE expr .)
    LEKHA           reduce using rule 59 (expr -> expr NE expr .)
    COMMA           reduce using rule 59 (expr -> expr NE expr .)
    BHAE            reduce using rule 59 (expr -> expr NE expr .)
    RPARA           reduce using rule 59 (expr -> expr NE expr .)
    ATHAWA          reduce using rule 59 (expr -> expr NE expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54

  ! PLUS            [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! MODULUS         [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! POWER           [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 59 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 48 ]
  ! NE              [ shift and go to state 62 ]
  ! RA              [ shift and go to state 56 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 58 ]
  ! CHHAINA         [ shift and go to state 57 ]


state 93

    (25) variableExpr -> variableExpr COMMA expr .
    (32) expr -> expr . PLUS expr
    (33) expr -> expr . MINUS expr
    (34) expr -> expr . TIMES expr
    (35) expr -> expr . DIVIDE expr
    (36) expr -> expr . MODULUS expr
    (37) expr -> expr . POWER expr
    (54) expr -> expr . GT expr
    (55) expr -> expr . LT expr
    (56) expr -> expr . GE expr
    (57) expr -> expr . LE expr
    (58) expr -> expr . EQ expr
    (59) expr -> expr . NE expr
    (60) expr -> expr . RA expr
    (61) expr -> expr . WA expr
    (62) expr -> expr . CHHA
    (63) expr -> expr . CHHAINA

    LEKHA           reduce using rule 25 (variableExpr -> variableExpr COMMA expr .)
    COMMA           reduce using rule 25 (variableExpr -> variableExpr COMMA expr .)
    RPARA           reduce using rule 25 (variableExpr -> variableExpr COMMA expr .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 61
    TIMES           shift and go to state 52
    DIVIDE          shift and go to state 49
    MODULUS         shift and go to state 60
    POWER           shift and go to state 50
    GT              shift and go to state 47
    LT              shift and go to state 53
    GE              shift and go to state 51
    LE              shift and go to state 54
    EQ              shift and go to state 48
    NE              shift and go to state 62
    RA              shift and go to state 56
    WA              shift and go to state 59
    CHHA            shift and go to state 58
    CHHAINA         shift and go to state 57


state 94

    (15) print -> variableExpr LEKHA SEMICOLON .

    NEWLINE         reduce using rule 15 (print -> variableExpr LEKHA SEMICOLON .)
    $end            reduce using rule 15 (print -> variableExpr LEKHA SEMICOLON .)
    ATHAWA          reduce using rule 15 (print -> variableExpr LEKHA SEMICOLON .)


state 95

    (27) variableExpr -> empty .
    (31) variableArgs -> empty .

    LEKHA           reduce using rule 27 (variableExpr -> empty .)
    COMMA           reduce using rule 27 (variableExpr -> empty .)
    LEU             reduce using rule 31 (variableArgs -> empty .)


state 96

    (22) slif -> YEDI expr BHAE slstmt . ATHAWA slstmt
    (23) slif -> YEDI expr BHAE slstmt .

  ! shift/reduce conflict for ATHAWA resolved as shift
    ATHAWA          shift and go to state 98
    NEWLINE         reduce using rule 23 (slif -> YEDI expr BHAE slstmt .)
    $end            reduce using rule 23 (slif -> YEDI expr BHAE slstmt .)

  ! ATHAWA          [ reduce using rule 23 (slif -> YEDI expr BHAE slstmt .) ]


state 97

    (52) functioncall -> IDENTIFIER LPARA variableExpr RPARA .

    PLUS            reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MINUS           reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    TIMES           reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DIVIDE          reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MODULUS         reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    POWER           reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    GT              reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LT              reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    GE              reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LE              reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    EQ              reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    NE              reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RA              reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    WA              reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHHA            reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHHAINA         reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    NEWLINE         reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    $end            reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LEKHA           reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    COMMA           reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BHAE            reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RPARA           reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    ATHAWA          reduce using rule 52 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)


state 98

    (22) slif -> YEDI expr BHAE slstmt ATHAWA . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) expression -> . expr
    (14) assignment -> . IDENTIFIER ASSIGNMENT expr
    (15) print -> . variableExpr LEKHA SEMICOLON
    (16) print -> . variableExpr LEKHA
    (17) input -> . variableArgs LEU
    (22) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (23) slif -> . YEDI expr BHAE slstmt
    (18) incremental -> . IDENTIFIER AI expr
    (19) incremental -> . IDENTIFIER SI expr
    (20) incremental -> . IDENTIFIER MI expr
    (21) incremental -> . IDENTIFIER DI expr
    (32) expr -> . expr PLUS expr
    (33) expr -> . expr MINUS expr
    (34) expr -> . expr TIMES expr
    (35) expr -> . expr DIVIDE expr
    (36) expr -> . expr MODULUS expr
    (37) expr -> . expr POWER expr
    (38) expr -> . LPARA expr RPARA
    (39) expr -> . integer
    (40) expr -> . float
    (41) expr -> . imaginary
    (42) expr -> . string
    (43) expr -> . identifier
    (44) expr -> . functioncall
    (53) expr -> . MINUS expr
    (54) expr -> . expr GT expr
    (55) expr -> . expr LT expr
    (56) expr -> . expr GE expr
    (57) expr -> . expr LE expr
    (58) expr -> . expr EQ expr
    (59) expr -> . expr NE expr
    (60) expr -> . expr RA expr
    (61) expr -> . expr WA expr
    (62) expr -> . expr CHHA
    (63) expr -> . expr CHHAINA
    (25) variableExpr -> . variableExpr COMMA expr
    (26) variableExpr -> . expr
    (27) variableExpr -> . empty
    (28) variableArgs -> . IDENTIFIER COMMA variableArgs
    (29) variableArgs -> . IDENTIFIER
    (30) variableArgs -> . IDENTIFIER BOGUS
    (31) variableArgs -> . empty
    (45) integer -> . DECIMALINTEGER
    (46) integer -> . OCTALINTEGER
    (47) integer -> . HEXAINTEGER
    (48) float -> . FLOAT
    (49) imaginary -> . IMAGNUMBER
    (50) string -> . STRING
    (51) identifier -> . IDENTIFIER
    (52) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (64) empty -> .

    IDENTIFIER      shift and go to state 13
    YEDI            shift and go to state 2
    LPARA           shift and go to state 3
    MINUS           shift and go to state 6
    DECIMALINTEGER  shift and go to state 19
    OCTALINTEGER    shift and go to state 7
    HEXAINTEGER     shift and go to state 21
    FLOAT           shift and go to state 27
    IMAGNUMBER      shift and go to state 25
    STRING          shift and go to state 12
    LEKHA           reduce using rule 64 (empty -> .)
    COMMA           reduce using rule 64 (empty -> .)
    LEU             reduce using rule 64 (empty -> .)

    slif                           shift and go to state 1
    identifier                     shift and go to state 31
    slstmt                         shift and go to state 99
    integer                        shift and go to state 22
    expr                           shift and go to state 26
    float                          shift and go to state 16
    variableExpr                   shift and go to state 28
    incremental                    shift and go to state 4
    functioncall                   shift and go to state 30
    assignment                     shift and go to state 18
    print                          shift and go to state 10
    input                          shift and go to state 11
    imaginary                      shift and go to state 23
    variableArgs                   shift and go to state 8
    expression                     shift and go to state 32
    empty                          shift and go to state 95
    string                         shift and go to state 24

state 99

    (22) slif -> YEDI expr BHAE slstmt ATHAWA slstmt .

    ATHAWA          reduce using rule 22 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    NEWLINE         reduce using rule 22 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    $end            reduce using rule 22 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 13 resolved as shift
WARNING: shift/reduce conflict for ATHAWA in state 96 resolved as shift

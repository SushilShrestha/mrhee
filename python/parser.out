Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    BOGUS
    QUESTION
    NABHAE

Grammar

Rule 0     S' -> begin
Rule 1     begin -> program
Rule 2     program -> program NEWLINE stmt
Rule 3     program -> stmt
Rule 4     stmt -> empty
Rule 5     stmt -> slstmt
Rule 6     stmt -> mlstmt
Rule 7     slstmt -> expression
Rule 8     slstmt -> assignment
Rule 9     slstmt -> print
Rule 10    slstmt -> input
Rule 11    slstmt -> slif
Rule 12    slstmt -> incremental
Rule 13    slstmt -> return
Rule 14    slstmt -> continue
Rule 15    slstmt -> break
Rule 16    slstmt -> filewriteln
Rule 17    slstmt -> filewrite
Rule 18    slstmt -> fileread
Rule 19    slstmt -> fileclose
Rule 20    slstmt -> graphicshow
Rule 21    slstmt -> graphichide
Rule 22    slstmt -> graphicclose
Rule 23    slstmt -> graphicupdate
Rule 24    slstmt -> graphicclear
Rule 25    slstmt -> graphicdraw
Rule 26    expression -> expr
Rule 27    assignment -> reference ASSIGNMENT expr
Rule 28    print -> variableExpr LEKHA SEMICOLON
Rule 29    print -> variableExpr LEKHA
Rule 30    input -> variableExpr LEU
Rule 31    incremental -> reference AI expr
Rule 32    incremental -> reference SI expr
Rule 33    incremental -> reference MI expr
Rule 34    incremental -> reference DI expr
Rule 35    return -> expr PATHAU
Rule 36    continue -> ARKO
Rule 37    break -> BAHIRA
Rule 38    slif -> YEDI expr BHAE slstmt ATHAWA slstmt
Rule 39    slif -> YEDI expr BHAE slstmt
Rule 40    mlstmt -> mlif
Rule 41    mlstmt -> forloop
Rule 42    mlstmt -> whileloop
Rule 43    mlstmt -> repeatloop
Rule 44    mlstmt -> function
Rule 45    mlstmt -> class
Rule 46    mlif -> YEDI expr BHAE NEWLINE program DIYE
Rule 47    mlif -> YEDI expr BHAE NEWLINE program optelse DIYE
Rule 48    optelse -> ATHAWA expr BHAE NEWLINE program optelse
Rule 49    optelse -> ATHAWA expr BHAE NEWLINE program
Rule 50    optelse -> ATHAWA NEWLINE program
Rule 51    forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
Rule 52    forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
Rule 53    whileloop -> JABA SAMMA expr NEWLINE program BAJA
Rule 54    repeatloop -> expr CHOTI NEWLINE program TICHO
Rule 55    function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
Rule 56    class -> KHAKA IDENTIFIER NEWLINE program KAKHA
Rule 57    filewriteln -> reference MA variableExpr LEKHA
Rule 58    filewrite -> reference MA variableExpr LEKHA SEMICOLON
Rule 59    fileread -> reference BATA reference LEU
Rule 60    fileclose -> reference BANDAGARA
Rule 61    graphicshow -> reference DEKHAU
Rule 62    graphichide -> reference LUKAU
Rule 63    graphicclose -> reference HATAU
Rule 64    graphicupdate -> reference BANAU
Rule 65    graphicclear -> reference METAU
Rule 66    graphicdraw -> reference MA string KORA variableExpr
Rule 67    variableExpr -> variableExpr COMMA expr
Rule 68    variableExpr -> expr
Rule 69    variableExpr -> empty
Rule 70    variableArgs -> variableArgs COMMA IDENTIFIER
Rule 71    variableArgs -> IDENTIFIER
Rule 72    variableArgs -> empty
Rule 73    expr -> expr PLUS expr
Rule 74    expr -> expr MINUS expr
Rule 75    expr -> expr TIMES expr
Rule 76    expr -> expr DIVIDE expr
Rule 77    expr -> expr MODULUS expr
Rule 78    expr -> expr POWER expr
Rule 79    expr -> LPARA expr RPARA
Rule 80    expr -> integer
Rule 81    expr -> float
Rule 82    expr -> imaginary
Rule 83    expr -> string
Rule 84    expr -> null
Rule 85    expr -> boolean
Rule 86    expr -> reference
Rule 87    expr -> array
Rule 88    integer -> DECIMALINTEGER
Rule 89    integer -> OCTALINTEGER
Rule 90    integer -> HEXAINTEGER
Rule 91    float -> FLOAT
Rule 92    imaginary -> IMAGNUMBER
Rule 93    string -> STRING
Rule 94    null -> SUNYA
Rule 95    boolean -> SACHO
Rule 96    boolean -> JHUTO
Rule 97    array -> LGPARA variableExpr RGPARA
Rule 98    reference -> identifier
Rule 99    reference -> functioncall
Rule 100   reference -> reference DOT reference
Rule 101   reference -> reference KO reference
Rule 102   reference -> identifier optindex
Rule 103   optindex -> optindex LGPARA aryexpr RGPARA
Rule 104   optindex -> LGPARA aryexpr RGPARA
Rule 105   aryexpr -> expr
Rule 106   aryexpr -> expr COLON expr
Rule 107   reference -> MERO reference
Rule 108   identifier -> IDENTIFIER
Rule 109   functioncall -> IDENTIFIER LPARA variableExpr RPARA
Rule 110   expr -> MINUS expr
Rule 111   expr -> expr GT expr
Rule 112   expr -> expr LT expr
Rule 113   expr -> expr GE expr
Rule 114   expr -> expr LE expr
Rule 115   expr -> expr EQ expr
Rule 116   expr -> expr NE expr
Rule 117   expr -> expr RA expr
Rule 118   expr -> expr WA expr
Rule 119   expr -> expr CHHA
Rule 120   expr -> expr CHHAINA
Rule 121   empty -> <empty>
Rule 122   slif -> YEDI expr error slstmt
Rule 123   slif -> YEDI expr error ATHAWA slstmt
Rule 124   mlif -> YEDI expr error NEWLINE program DIYE
Rule 125   mlif -> YEDI expr error NEWLINE program optelse DIYE
Rule 126   optelse -> ATHAWA expr error NEWLINE program optelse
Rule 127   optelse -> ATHAWA expr error NEWLINE program
Rule 128   mlif -> YEDI expr BHAE NEWLINE program error
Rule 129   mlif -> YEDI expr BHAE NEWLINE program optelse error
Rule 130   function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA

Terminals, with rules where they appear

AI                   : 31
ARKO                 : 36
ASSIGNMENT           : 27 51 52
ATHAWA               : 38 48 49 50 123 126 127
BAHIRA               : 37
BAISA                : 51 52
BAJA                 : 53
BANAU                : 64
BANDAGARA            : 60
BATA                 : 59
BHAE                 : 38 39 46 47 48 49 128 129
BOGUS                : 
CHHA                 : 119
CHHAINA              : 120
CHOTI                : 54
COLON                : 52 106
COMMA                : 67 70
DECIMALINTEGER       : 88
DEKHAU               : 61
DEKHI                : 51 52
DI                   : 34
DIVIDE               : 76
DIYE                 : 46 47 124 125
DOT                  : 100
EQ                   : 115
FLOAT                : 91
GE                   : 113
GT                   : 111
HATAU                : 63
HEXAINTEGER          : 90
IDENTIFIER           : 55 56 70 71 108 109 130
IMAGNUMBER           : 92
JABA                 : 53
JHUTO                : 96
KAAM                 : 55 130
KAKHA                : 56
KHAKA                : 56
KO                   : 101
KORA                 : 66
LE                   : 114
LEKHA                : 28 29 57 58
LEU                  : 30 59
LGPARA               : 97 103 104
LPARA                : 55 79 109 130
LT                   : 112
LUKAU                : 62
MA                   : 57 58 66
MAKA                 : 55 130
MERO                 : 107
METAU                : 65
MI                   : 33
MINUS                : 74 110
MODULUS              : 77
NABHAE               : 
NE                   : 116
NEWLINE              : 2 46 47 48 49 50 51 52 53 54 55 56 124 125 126 127 128 129 130
OCTALINTEGER         : 89
PATHAU               : 35
PLUS                 : 73
POWER                : 78
QUESTION             : 
RA                   : 117
RGPARA               : 97 103 104
RPARA                : 55 79 109 130
SABAI                : 51 52
SACHO                : 95
SAMMA                : 53
SEMICOLON            : 28 58
SI                   : 32
STRING               : 93
SUNYA                : 94
TICHO                : 54
TIMES                : 75
WA                   : 118
YEDI                 : 38 39 46 47 122 123 124 125 128 129
error                : 122 123 124 125 126 127 128 129 130

Nonterminals, with rules where they appear

array                : 87
aryexpr              : 103 104
assignment           : 8
begin                : 0
boolean              : 85
break                : 15
class                : 45
continue             : 14
empty                : 4 69 72
expr                 : 26 27 31 32 33 34 35 38 39 46 47 48 49 51 51 52 52 52 53 54 67 68 73 73 74 74 75 75 76 76 77 77 78 78 79 105 106 106 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 120 122 123 124 125 126 127 128 129
expression           : 7
fileclose            : 19
fileread             : 18
filewrite            : 17
filewriteln          : 16
float                : 81
forloop              : 41
function             : 44
functioncall         : 99
graphicclear         : 24
graphicclose         : 22
graphicdraw          : 25
graphichide          : 21
graphicshow          : 20
graphicupdate        : 23
identifier           : 98 102
imaginary            : 82
incremental          : 12
input                : 10
integer              : 80
mlif                 : 40
mlstmt               : 6
null                 : 84
optelse              : 47 48 125 126 129
optindex             : 102 103
print                : 9
program              : 1 2 46 47 48 49 50 51 52 53 54 55 56 124 125 126 127 128 129 130
reference            : 27 31 32 33 34 51 52 57 58 59 59 60 61 62 63 64 65 66 86 100 100 101 101 107
repeatloop           : 43
return               : 13
slif                 : 11
slstmt               : 5 38 38 39 122 123
stmt                 : 2 3
string               : 66 83
variableArgs         : 55 70
variableExpr         : 28 29 30 57 58 66 67 97 109
whileloop            : 42

Parsing method: LALR

state 0

    (0) S' -> . begin
    (1) begin -> . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 121 (empty -> .)
    $end            reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewrite                      shift and go to state 21
    program                        shift and go to state 4
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    begin                          shift and go to state 57
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewriteln                    shift and go to state 38
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 1

    (110) expr -> MINUS . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 66
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 2

    (37) break -> BAHIRA .

    DIYE            reduce using rule 37 (break -> BAHIRA .)
    NEWLINE         reduce using rule 37 (break -> BAHIRA .)
    ATHAWA          reduce using rule 37 (break -> BAHIRA .)
    BAISA           reduce using rule 37 (break -> BAHIRA .)
    error           reduce using rule 37 (break -> BAHIRA .)
    $end            reduce using rule 37 (break -> BAHIRA .)
    KAKHA           reduce using rule 37 (break -> BAHIRA .)
    TICHO           reduce using rule 37 (break -> BAHIRA .)
    BAJA            reduce using rule 37 (break -> BAHIRA .)
    MAKA            reduce using rule 37 (break -> BAHIRA .)


state 3

    (41) mlstmt -> forloop .

    NEWLINE         reduce using rule 41 (mlstmt -> forloop .)
    ATHAWA          reduce using rule 41 (mlstmt -> forloop .)
    DIYE            reduce using rule 41 (mlstmt -> forloop .)
    error           reduce using rule 41 (mlstmt -> forloop .)
    $end            reduce using rule 41 (mlstmt -> forloop .)
    KAKHA           reduce using rule 41 (mlstmt -> forloop .)
    TICHO           reduce using rule 41 (mlstmt -> forloop .)
    BAJA            reduce using rule 41 (mlstmt -> forloop .)
    MAKA            reduce using rule 41 (mlstmt -> forloop .)
    BAISA           reduce using rule 41 (mlstmt -> forloop .)


state 4

    (1) begin -> program .
    (2) program -> program . NEWLINE stmt

    $end            reduce using rule 1 (begin -> program .)
    NEWLINE         shift and go to state 67


state 5

    (10) slstmt -> input .

    NEWLINE         reduce using rule 10 (slstmt -> input .)
    $end            reduce using rule 10 (slstmt -> input .)
    KAKHA           reduce using rule 10 (slstmt -> input .)
    TICHO           reduce using rule 10 (slstmt -> input .)
    DIYE            reduce using rule 10 (slstmt -> input .)
    error           reduce using rule 10 (slstmt -> input .)
    ATHAWA          reduce using rule 10 (slstmt -> input .)
    BAJA            reduce using rule 10 (slstmt -> input .)
    MAKA            reduce using rule 10 (slstmt -> input .)
    BAISA           reduce using rule 10 (slstmt -> input .)


state 6

    (79) expr -> LPARA . expr RPARA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 68
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 7

    (13) slstmt -> return .

    NEWLINE         reduce using rule 13 (slstmt -> return .)
    $end            reduce using rule 13 (slstmt -> return .)
    KAKHA           reduce using rule 13 (slstmt -> return .)
    TICHO           reduce using rule 13 (slstmt -> return .)
    DIYE            reduce using rule 13 (slstmt -> return .)
    error           reduce using rule 13 (slstmt -> return .)
    ATHAWA          reduce using rule 13 (slstmt -> return .)
    BAJA            reduce using rule 13 (slstmt -> return .)
    MAKA            reduce using rule 13 (slstmt -> return .)
    BAISA           reduce using rule 13 (slstmt -> return .)


state 8

    (83) expr -> string .

    PLUS            reduce using rule 83 (expr -> string .)
    MINUS           reduce using rule 83 (expr -> string .)
    TIMES           reduce using rule 83 (expr -> string .)
    DIVIDE          reduce using rule 83 (expr -> string .)
    MODULUS         reduce using rule 83 (expr -> string .)
    POWER           reduce using rule 83 (expr -> string .)
    GT              reduce using rule 83 (expr -> string .)
    LT              reduce using rule 83 (expr -> string .)
    GE              reduce using rule 83 (expr -> string .)
    LE              reduce using rule 83 (expr -> string .)
    EQ              reduce using rule 83 (expr -> string .)
    NE              reduce using rule 83 (expr -> string .)
    RA              reduce using rule 83 (expr -> string .)
    WA              reduce using rule 83 (expr -> string .)
    CHHA            reduce using rule 83 (expr -> string .)
    CHHAINA         reduce using rule 83 (expr -> string .)
    PATHAU          reduce using rule 83 (expr -> string .)
    CHOTI           reduce using rule 83 (expr -> string .)
    NEWLINE         reduce using rule 83 (expr -> string .)
    $end            reduce using rule 83 (expr -> string .)
    LEKHA           reduce using rule 83 (expr -> string .)
    LEU             reduce using rule 83 (expr -> string .)
    COMMA           reduce using rule 83 (expr -> string .)
    RPARA           reduce using rule 83 (expr -> string .)
    RGPARA          reduce using rule 83 (expr -> string .)
    BHAE            reduce using rule 83 (expr -> string .)
    error           reduce using rule 83 (expr -> string .)
    KAKHA           reduce using rule 83 (expr -> string .)
    TICHO           reduce using rule 83 (expr -> string .)
    DIYE            reduce using rule 83 (expr -> string .)
    ATHAWA          reduce using rule 83 (expr -> string .)
    BAJA            reduce using rule 83 (expr -> string .)
    MAKA            reduce using rule 83 (expr -> string .)
    BAISA           reduce using rule 83 (expr -> string .)
    COLON           reduce using rule 83 (expr -> string .)
    DEKHI           reduce using rule 83 (expr -> string .)


state 9

    (43) mlstmt -> repeatloop .

    NEWLINE         reduce using rule 43 (mlstmt -> repeatloop .)
    ATHAWA          reduce using rule 43 (mlstmt -> repeatloop .)
    DIYE            reduce using rule 43 (mlstmt -> repeatloop .)
    error           reduce using rule 43 (mlstmt -> repeatloop .)
    $end            reduce using rule 43 (mlstmt -> repeatloop .)
    KAKHA           reduce using rule 43 (mlstmt -> repeatloop .)
    TICHO           reduce using rule 43 (mlstmt -> repeatloop .)
    BAJA            reduce using rule 43 (mlstmt -> repeatloop .)
    MAKA            reduce using rule 43 (mlstmt -> repeatloop .)
    BAISA           reduce using rule 43 (mlstmt -> repeatloop .)


state 10

    (15) slstmt -> break .

    NEWLINE         reduce using rule 15 (slstmt -> break .)
    $end            reduce using rule 15 (slstmt -> break .)
    KAKHA           reduce using rule 15 (slstmt -> break .)
    TICHO           reduce using rule 15 (slstmt -> break .)
    DIYE            reduce using rule 15 (slstmt -> break .)
    error           reduce using rule 15 (slstmt -> break .)
    ATHAWA          reduce using rule 15 (slstmt -> break .)
    BAJA            reduce using rule 15 (slstmt -> break .)
    MAKA            reduce using rule 15 (slstmt -> break .)
    BAISA           reduce using rule 15 (slstmt -> break .)


state 11

    (80) expr -> integer .

    PLUS            reduce using rule 80 (expr -> integer .)
    MINUS           reduce using rule 80 (expr -> integer .)
    TIMES           reduce using rule 80 (expr -> integer .)
    DIVIDE          reduce using rule 80 (expr -> integer .)
    MODULUS         reduce using rule 80 (expr -> integer .)
    POWER           reduce using rule 80 (expr -> integer .)
    GT              reduce using rule 80 (expr -> integer .)
    LT              reduce using rule 80 (expr -> integer .)
    GE              reduce using rule 80 (expr -> integer .)
    LE              reduce using rule 80 (expr -> integer .)
    EQ              reduce using rule 80 (expr -> integer .)
    NE              reduce using rule 80 (expr -> integer .)
    RA              reduce using rule 80 (expr -> integer .)
    WA              reduce using rule 80 (expr -> integer .)
    CHHA            reduce using rule 80 (expr -> integer .)
    CHHAINA         reduce using rule 80 (expr -> integer .)
    PATHAU          reduce using rule 80 (expr -> integer .)
    CHOTI           reduce using rule 80 (expr -> integer .)
    NEWLINE         reduce using rule 80 (expr -> integer .)
    $end            reduce using rule 80 (expr -> integer .)
    LEKHA           reduce using rule 80 (expr -> integer .)
    LEU             reduce using rule 80 (expr -> integer .)
    COMMA           reduce using rule 80 (expr -> integer .)
    RPARA           reduce using rule 80 (expr -> integer .)
    RGPARA          reduce using rule 80 (expr -> integer .)
    BHAE            reduce using rule 80 (expr -> integer .)
    error           reduce using rule 80 (expr -> integer .)
    KAKHA           reduce using rule 80 (expr -> integer .)
    TICHO           reduce using rule 80 (expr -> integer .)
    DIYE            reduce using rule 80 (expr -> integer .)
    ATHAWA          reduce using rule 80 (expr -> integer .)
    BAJA            reduce using rule 80 (expr -> integer .)
    MAKA            reduce using rule 80 (expr -> integer .)
    BAISA           reduce using rule 80 (expr -> integer .)
    COLON           reduce using rule 80 (expr -> integer .)
    DEKHI           reduce using rule 80 (expr -> integer .)


state 12

    (40) mlstmt -> mlif .

    NEWLINE         reduce using rule 40 (mlstmt -> mlif .)
    ATHAWA          reduce using rule 40 (mlstmt -> mlif .)
    DIYE            reduce using rule 40 (mlstmt -> mlif .)
    error           reduce using rule 40 (mlstmt -> mlif .)
    $end            reduce using rule 40 (mlstmt -> mlif .)
    KAKHA           reduce using rule 40 (mlstmt -> mlif .)
    TICHO           reduce using rule 40 (mlstmt -> mlif .)
    BAJA            reduce using rule 40 (mlstmt -> mlif .)
    MAKA            reduce using rule 40 (mlstmt -> mlif .)
    BAISA           reduce using rule 40 (mlstmt -> mlif .)


state 13

    (92) imaginary -> IMAGNUMBER .

    PLUS            reduce using rule 92 (imaginary -> IMAGNUMBER .)
    MINUS           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    TIMES           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    DIVIDE          reduce using rule 92 (imaginary -> IMAGNUMBER .)
    MODULUS         reduce using rule 92 (imaginary -> IMAGNUMBER .)
    POWER           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    GT              reduce using rule 92 (imaginary -> IMAGNUMBER .)
    LT              reduce using rule 92 (imaginary -> IMAGNUMBER .)
    GE              reduce using rule 92 (imaginary -> IMAGNUMBER .)
    LE              reduce using rule 92 (imaginary -> IMAGNUMBER .)
    EQ              reduce using rule 92 (imaginary -> IMAGNUMBER .)
    NE              reduce using rule 92 (imaginary -> IMAGNUMBER .)
    RA              reduce using rule 92 (imaginary -> IMAGNUMBER .)
    WA              reduce using rule 92 (imaginary -> IMAGNUMBER .)
    CHHA            reduce using rule 92 (imaginary -> IMAGNUMBER .)
    CHHAINA         reduce using rule 92 (imaginary -> IMAGNUMBER .)
    PATHAU          reduce using rule 92 (imaginary -> IMAGNUMBER .)
    CHOTI           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    NEWLINE         reduce using rule 92 (imaginary -> IMAGNUMBER .)
    $end            reduce using rule 92 (imaginary -> IMAGNUMBER .)
    LEKHA           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    LEU             reduce using rule 92 (imaginary -> IMAGNUMBER .)
    COMMA           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    RPARA           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    RGPARA          reduce using rule 92 (imaginary -> IMAGNUMBER .)
    BHAE            reduce using rule 92 (imaginary -> IMAGNUMBER .)
    error           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    KAKHA           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    TICHO           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    DIYE            reduce using rule 92 (imaginary -> IMAGNUMBER .)
    ATHAWA          reduce using rule 92 (imaginary -> IMAGNUMBER .)
    BAJA            reduce using rule 92 (imaginary -> IMAGNUMBER .)
    MAKA            reduce using rule 92 (imaginary -> IMAGNUMBER .)
    BAISA           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    COLON           reduce using rule 92 (imaginary -> IMAGNUMBER .)
    DEKHI           reduce using rule 92 (imaginary -> IMAGNUMBER .)


state 14

    (14) slstmt -> continue .

    NEWLINE         reduce using rule 14 (slstmt -> continue .)
    $end            reduce using rule 14 (slstmt -> continue .)
    KAKHA           reduce using rule 14 (slstmt -> continue .)
    TICHO           reduce using rule 14 (slstmt -> continue .)
    DIYE            reduce using rule 14 (slstmt -> continue .)
    error           reduce using rule 14 (slstmt -> continue .)
    ATHAWA          reduce using rule 14 (slstmt -> continue .)
    BAJA            reduce using rule 14 (slstmt -> continue .)
    MAKA            reduce using rule 14 (slstmt -> continue .)
    BAISA           reduce using rule 14 (slstmt -> continue .)


state 15

    (98) reference -> identifier .
    (102) reference -> identifier . optindex
    (103) optindex -> . optindex LGPARA aryexpr RGPARA
    (104) optindex -> . LGPARA aryexpr RGPARA

    DOT             reduce using rule 98 (reference -> identifier .)
    KO              reduce using rule 98 (reference -> identifier .)
    PLUS            reduce using rule 98 (reference -> identifier .)
    MINUS           reduce using rule 98 (reference -> identifier .)
    TIMES           reduce using rule 98 (reference -> identifier .)
    DIVIDE          reduce using rule 98 (reference -> identifier .)
    MODULUS         reduce using rule 98 (reference -> identifier .)
    POWER           reduce using rule 98 (reference -> identifier .)
    GT              reduce using rule 98 (reference -> identifier .)
    LT              reduce using rule 98 (reference -> identifier .)
    GE              reduce using rule 98 (reference -> identifier .)
    LE              reduce using rule 98 (reference -> identifier .)
    EQ              reduce using rule 98 (reference -> identifier .)
    NE              reduce using rule 98 (reference -> identifier .)
    RA              reduce using rule 98 (reference -> identifier .)
    WA              reduce using rule 98 (reference -> identifier .)
    CHHA            reduce using rule 98 (reference -> identifier .)
    CHHAINA         reduce using rule 98 (reference -> identifier .)
    NEWLINE         reduce using rule 98 (reference -> identifier .)
    $end            reduce using rule 98 (reference -> identifier .)
    KAKHA           reduce using rule 98 (reference -> identifier .)
    TICHO           reduce using rule 98 (reference -> identifier .)
    DIYE            reduce using rule 98 (reference -> identifier .)
    error           reduce using rule 98 (reference -> identifier .)
    ATHAWA          reduce using rule 98 (reference -> identifier .)
    BAJA            reduce using rule 98 (reference -> identifier .)
    MAKA            reduce using rule 98 (reference -> identifier .)
    BAISA           reduce using rule 98 (reference -> identifier .)
    ASSIGNMENT      reduce using rule 98 (reference -> identifier .)
    AI              reduce using rule 98 (reference -> identifier .)
    SI              reduce using rule 98 (reference -> identifier .)
    MI              reduce using rule 98 (reference -> identifier .)
    DI              reduce using rule 98 (reference -> identifier .)
    MA              reduce using rule 98 (reference -> identifier .)
    BATA            reduce using rule 98 (reference -> identifier .)
    BANDAGARA       reduce using rule 98 (reference -> identifier .)
    DEKHAU          reduce using rule 98 (reference -> identifier .)
    LUKAU           reduce using rule 98 (reference -> identifier .)
    HATAU           reduce using rule 98 (reference -> identifier .)
    BANAU           reduce using rule 98 (reference -> identifier .)
    METAU           reduce using rule 98 (reference -> identifier .)
    PATHAU          reduce using rule 98 (reference -> identifier .)
    CHOTI           reduce using rule 98 (reference -> identifier .)
    LEKHA           reduce using rule 98 (reference -> identifier .)
    LEU             reduce using rule 98 (reference -> identifier .)
    COMMA           reduce using rule 98 (reference -> identifier .)
    BHAE            reduce using rule 98 (reference -> identifier .)
    RPARA           reduce using rule 98 (reference -> identifier .)
    RGPARA          reduce using rule 98 (reference -> identifier .)
    COLON           reduce using rule 98 (reference -> identifier .)
    DEKHI           reduce using rule 98 (reference -> identifier .)
    LGPARA          shift and go to state 69

    optindex                       shift and go to state 70

state 16

    (97) array -> LGPARA . variableExpr RGPARA
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (121) empty -> .
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    RGPARA          reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 72
    float                          shift and go to state 19
    variableExpr                   shift and go to state 73
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36
    empty                          shift and go to state 71

state 17

    (27) assignment -> reference . ASSIGNMENT expr
    (31) incremental -> reference . AI expr
    (32) incremental -> reference . SI expr
    (33) incremental -> reference . MI expr
    (34) incremental -> reference . DI expr
    (57) filewriteln -> reference . MA variableExpr LEKHA
    (58) filewrite -> reference . MA variableExpr LEKHA SEMICOLON
    (59) fileread -> reference . BATA reference LEU
    (60) fileclose -> reference . BANDAGARA
    (61) graphicshow -> reference . DEKHAU
    (62) graphichide -> reference . LUKAU
    (63) graphicclose -> reference . HATAU
    (64) graphicupdate -> reference . BANAU
    (65) graphicclear -> reference . METAU
    (66) graphicdraw -> reference . MA string KORA variableExpr
    (86) expr -> reference .
    (100) reference -> reference . DOT reference
    (101) reference -> reference . KO reference

    ASSIGNMENT      shift and go to state 76
    AI              shift and go to state 83
    SI              shift and go to state 88
    MI              shift and go to state 87
    DI              shift and go to state 75
    MA              shift and go to state 85
    BATA            shift and go to state 81
    BANDAGARA       shift and go to state 78
    DEKHAU          shift and go to state 86
    LUKAU           shift and go to state 77
    HATAU           shift and go to state 74
    BANAU           shift and go to state 80
    METAU           shift and go to state 84
    PATHAU          reduce using rule 86 (expr -> reference .)
    CHOTI           reduce using rule 86 (expr -> reference .)
    PLUS            reduce using rule 86 (expr -> reference .)
    MINUS           reduce using rule 86 (expr -> reference .)
    TIMES           reduce using rule 86 (expr -> reference .)
    DIVIDE          reduce using rule 86 (expr -> reference .)
    MODULUS         reduce using rule 86 (expr -> reference .)
    POWER           reduce using rule 86 (expr -> reference .)
    GT              reduce using rule 86 (expr -> reference .)
    LT              reduce using rule 86 (expr -> reference .)
    GE              reduce using rule 86 (expr -> reference .)
    LE              reduce using rule 86 (expr -> reference .)
    EQ              reduce using rule 86 (expr -> reference .)
    NE              reduce using rule 86 (expr -> reference .)
    RA              reduce using rule 86 (expr -> reference .)
    WA              reduce using rule 86 (expr -> reference .)
    CHHA            reduce using rule 86 (expr -> reference .)
    CHHAINA         reduce using rule 86 (expr -> reference .)
    DIYE            reduce using rule 86 (expr -> reference .)
    error           reduce using rule 86 (expr -> reference .)
    NEWLINE         reduce using rule 86 (expr -> reference .)
    ATHAWA          reduce using rule 86 (expr -> reference .)
    LEKHA           reduce using rule 86 (expr -> reference .)
    LEU             reduce using rule 86 (expr -> reference .)
    COMMA           reduce using rule 86 (expr -> reference .)
    $end            reduce using rule 86 (expr -> reference .)
    KAKHA           reduce using rule 86 (expr -> reference .)
    TICHO           reduce using rule 86 (expr -> reference .)
    BAJA            reduce using rule 86 (expr -> reference .)
    MAKA            reduce using rule 86 (expr -> reference .)
    BAISA           reduce using rule 86 (expr -> reference .)
    DOT             shift and go to state 79
    KO              shift and go to state 82


state 18

    (38) slif -> YEDI . expr BHAE slstmt ATHAWA slstmt
    (39) slif -> YEDI . expr BHAE slstmt
    (122) slif -> YEDI . expr error slstmt
    (123) slif -> YEDI . expr error ATHAWA slstmt
    (46) mlif -> YEDI . expr BHAE NEWLINE program DIYE
    (47) mlif -> YEDI . expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> YEDI . expr error NEWLINE program DIYE
    (125) mlif -> YEDI . expr error NEWLINE program optelse DIYE
    (128) mlif -> YEDI . expr BHAE NEWLINE program error
    (129) mlif -> YEDI . expr BHAE NEWLINE program optelse error
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    reference                      shift and go to state 65
    boolean                        shift and go to state 34
    expr                           shift and go to state 89
    float                          shift and go to state 19
    identifier                     shift and go to state 15
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36
    string                         shift and go to state 8

state 19

    (81) expr -> float .

    PLUS            reduce using rule 81 (expr -> float .)
    MINUS           reduce using rule 81 (expr -> float .)
    TIMES           reduce using rule 81 (expr -> float .)
    DIVIDE          reduce using rule 81 (expr -> float .)
    MODULUS         reduce using rule 81 (expr -> float .)
    POWER           reduce using rule 81 (expr -> float .)
    GT              reduce using rule 81 (expr -> float .)
    LT              reduce using rule 81 (expr -> float .)
    GE              reduce using rule 81 (expr -> float .)
    LE              reduce using rule 81 (expr -> float .)
    EQ              reduce using rule 81 (expr -> float .)
    NE              reduce using rule 81 (expr -> float .)
    RA              reduce using rule 81 (expr -> float .)
    WA              reduce using rule 81 (expr -> float .)
    CHHA            reduce using rule 81 (expr -> float .)
    CHHAINA         reduce using rule 81 (expr -> float .)
    PATHAU          reduce using rule 81 (expr -> float .)
    CHOTI           reduce using rule 81 (expr -> float .)
    NEWLINE         reduce using rule 81 (expr -> float .)
    $end            reduce using rule 81 (expr -> float .)
    LEKHA           reduce using rule 81 (expr -> float .)
    LEU             reduce using rule 81 (expr -> float .)
    COMMA           reduce using rule 81 (expr -> float .)
    RPARA           reduce using rule 81 (expr -> float .)
    RGPARA          reduce using rule 81 (expr -> float .)
    BHAE            reduce using rule 81 (expr -> float .)
    error           reduce using rule 81 (expr -> float .)
    KAKHA           reduce using rule 81 (expr -> float .)
    TICHO           reduce using rule 81 (expr -> float .)
    DIYE            reduce using rule 81 (expr -> float .)
    ATHAWA          reduce using rule 81 (expr -> float .)
    BAJA            reduce using rule 81 (expr -> float .)
    MAKA            reduce using rule 81 (expr -> float .)
    BAISA           reduce using rule 81 (expr -> float .)
    COLON           reduce using rule 81 (expr -> float .)
    DEKHI           reduce using rule 81 (expr -> float .)


state 20

    (6) stmt -> mlstmt .

    BAISA           reduce using rule 6 (stmt -> mlstmt .)
    NEWLINE         reduce using rule 6 (stmt -> mlstmt .)
    $end            reduce using rule 6 (stmt -> mlstmt .)
    KAKHA           reduce using rule 6 (stmt -> mlstmt .)
    TICHO           reduce using rule 6 (stmt -> mlstmt .)
    DIYE            reduce using rule 6 (stmt -> mlstmt .)
    error           reduce using rule 6 (stmt -> mlstmt .)
    ATHAWA          reduce using rule 6 (stmt -> mlstmt .)
    BAJA            reduce using rule 6 (stmt -> mlstmt .)
    MAKA            reduce using rule 6 (stmt -> mlstmt .)


state 21

    (17) slstmt -> filewrite .

    NEWLINE         reduce using rule 17 (slstmt -> filewrite .)
    $end            reduce using rule 17 (slstmt -> filewrite .)
    KAKHA           reduce using rule 17 (slstmt -> filewrite .)
    TICHO           reduce using rule 17 (slstmt -> filewrite .)
    DIYE            reduce using rule 17 (slstmt -> filewrite .)
    error           reduce using rule 17 (slstmt -> filewrite .)
    ATHAWA          reduce using rule 17 (slstmt -> filewrite .)
    BAJA            reduce using rule 17 (slstmt -> filewrite .)
    MAKA            reduce using rule 17 (slstmt -> filewrite .)
    BAISA           reduce using rule 17 (slstmt -> filewrite .)


state 22

    (9) slstmt -> print .

    NEWLINE         reduce using rule 9 (slstmt -> print .)
    $end            reduce using rule 9 (slstmt -> print .)
    KAKHA           reduce using rule 9 (slstmt -> print .)
    TICHO           reduce using rule 9 (slstmt -> print .)
    DIYE            reduce using rule 9 (slstmt -> print .)
    error           reduce using rule 9 (slstmt -> print .)
    ATHAWA          reduce using rule 9 (slstmt -> print .)
    BAJA            reduce using rule 9 (slstmt -> print .)
    MAKA            reduce using rule 9 (slstmt -> print .)
    BAISA           reduce using rule 9 (slstmt -> print .)


state 23

    (42) mlstmt -> whileloop .

    NEWLINE         reduce using rule 42 (mlstmt -> whileloop .)
    ATHAWA          reduce using rule 42 (mlstmt -> whileloop .)
    DIYE            reduce using rule 42 (mlstmt -> whileloop .)
    error           reduce using rule 42 (mlstmt -> whileloop .)
    $end            reduce using rule 42 (mlstmt -> whileloop .)
    KAKHA           reduce using rule 42 (mlstmt -> whileloop .)
    TICHO           reduce using rule 42 (mlstmt -> whileloop .)
    BAJA            reduce using rule 42 (mlstmt -> whileloop .)
    MAKA            reduce using rule 42 (mlstmt -> whileloop .)
    BAISA           reduce using rule 42 (mlstmt -> whileloop .)


state 24

    (24) slstmt -> graphicclear .

    NEWLINE         reduce using rule 24 (slstmt -> graphicclear .)
    $end            reduce using rule 24 (slstmt -> graphicclear .)
    KAKHA           reduce using rule 24 (slstmt -> graphicclear .)
    TICHO           reduce using rule 24 (slstmt -> graphicclear .)
    DIYE            reduce using rule 24 (slstmt -> graphicclear .)
    error           reduce using rule 24 (slstmt -> graphicclear .)
    ATHAWA          reduce using rule 24 (slstmt -> graphicclear .)
    BAJA            reduce using rule 24 (slstmt -> graphicclear .)
    MAKA            reduce using rule 24 (slstmt -> graphicclear .)
    BAISA           reduce using rule 24 (slstmt -> graphicclear .)


state 25

    (3) program -> stmt .

    BAISA           reduce using rule 3 (program -> stmt .)
    NEWLINE         reduce using rule 3 (program -> stmt .)
    MAKA            reduce using rule 3 (program -> stmt .)
    DIYE            reduce using rule 3 (program -> stmt .)
    error           reduce using rule 3 (program -> stmt .)
    ATHAWA          reduce using rule 3 (program -> stmt .)
    TICHO           reduce using rule 3 (program -> stmt .)
    $end            reduce using rule 3 (program -> stmt .)
    BAJA            reduce using rule 3 (program -> stmt .)
    KAKHA           reduce using rule 3 (program -> stmt .)


state 26

    (21) slstmt -> graphichide .

    NEWLINE         reduce using rule 21 (slstmt -> graphichide .)
    $end            reduce using rule 21 (slstmt -> graphichide .)
    KAKHA           reduce using rule 21 (slstmt -> graphichide .)
    TICHO           reduce using rule 21 (slstmt -> graphichide .)
    DIYE            reduce using rule 21 (slstmt -> graphichide .)
    error           reduce using rule 21 (slstmt -> graphichide .)
    ATHAWA          reduce using rule 21 (slstmt -> graphichide .)
    BAJA            reduce using rule 21 (slstmt -> graphichide .)
    MAKA            reduce using rule 21 (slstmt -> graphichide .)
    BAISA           reduce using rule 21 (slstmt -> graphichide .)


state 27

    (82) expr -> imaginary .

    PLUS            reduce using rule 82 (expr -> imaginary .)
    MINUS           reduce using rule 82 (expr -> imaginary .)
    TIMES           reduce using rule 82 (expr -> imaginary .)
    DIVIDE          reduce using rule 82 (expr -> imaginary .)
    MODULUS         reduce using rule 82 (expr -> imaginary .)
    POWER           reduce using rule 82 (expr -> imaginary .)
    GT              reduce using rule 82 (expr -> imaginary .)
    LT              reduce using rule 82 (expr -> imaginary .)
    GE              reduce using rule 82 (expr -> imaginary .)
    LE              reduce using rule 82 (expr -> imaginary .)
    EQ              reduce using rule 82 (expr -> imaginary .)
    NE              reduce using rule 82 (expr -> imaginary .)
    RA              reduce using rule 82 (expr -> imaginary .)
    WA              reduce using rule 82 (expr -> imaginary .)
    CHHA            reduce using rule 82 (expr -> imaginary .)
    CHHAINA         reduce using rule 82 (expr -> imaginary .)
    PATHAU          reduce using rule 82 (expr -> imaginary .)
    CHOTI           reduce using rule 82 (expr -> imaginary .)
    NEWLINE         reduce using rule 82 (expr -> imaginary .)
    $end            reduce using rule 82 (expr -> imaginary .)
    LEKHA           reduce using rule 82 (expr -> imaginary .)
    LEU             reduce using rule 82 (expr -> imaginary .)
    COMMA           reduce using rule 82 (expr -> imaginary .)
    RPARA           reduce using rule 82 (expr -> imaginary .)
    RGPARA          reduce using rule 82 (expr -> imaginary .)
    BHAE            reduce using rule 82 (expr -> imaginary .)
    error           reduce using rule 82 (expr -> imaginary .)
    KAKHA           reduce using rule 82 (expr -> imaginary .)
    TICHO           reduce using rule 82 (expr -> imaginary .)
    DIYE            reduce using rule 82 (expr -> imaginary .)
    ATHAWA          reduce using rule 82 (expr -> imaginary .)
    BAJA            reduce using rule 82 (expr -> imaginary .)
    MAKA            reduce using rule 82 (expr -> imaginary .)
    BAISA           reduce using rule 82 (expr -> imaginary .)
    COLON           reduce using rule 82 (expr -> imaginary .)
    DEKHI           reduce using rule 82 (expr -> imaginary .)


state 28

    (23) slstmt -> graphicupdate .

    NEWLINE         reduce using rule 23 (slstmt -> graphicupdate .)
    $end            reduce using rule 23 (slstmt -> graphicupdate .)
    KAKHA           reduce using rule 23 (slstmt -> graphicupdate .)
    TICHO           reduce using rule 23 (slstmt -> graphicupdate .)
    DIYE            reduce using rule 23 (slstmt -> graphicupdate .)
    error           reduce using rule 23 (slstmt -> graphicupdate .)
    ATHAWA          reduce using rule 23 (slstmt -> graphicupdate .)
    BAJA            reduce using rule 23 (slstmt -> graphicupdate .)
    MAKA            reduce using rule 23 (slstmt -> graphicupdate .)
    BAISA           reduce using rule 23 (slstmt -> graphicupdate .)


state 29

    (90) integer -> HEXAINTEGER .

    PATHAU          reduce using rule 90 (integer -> HEXAINTEGER .)
    CHOTI           reduce using rule 90 (integer -> HEXAINTEGER .)
    PLUS            reduce using rule 90 (integer -> HEXAINTEGER .)
    MINUS           reduce using rule 90 (integer -> HEXAINTEGER .)
    TIMES           reduce using rule 90 (integer -> HEXAINTEGER .)
    DIVIDE          reduce using rule 90 (integer -> HEXAINTEGER .)
    MODULUS         reduce using rule 90 (integer -> HEXAINTEGER .)
    POWER           reduce using rule 90 (integer -> HEXAINTEGER .)
    GT              reduce using rule 90 (integer -> HEXAINTEGER .)
    LT              reduce using rule 90 (integer -> HEXAINTEGER .)
    GE              reduce using rule 90 (integer -> HEXAINTEGER .)
    LE              reduce using rule 90 (integer -> HEXAINTEGER .)
    EQ              reduce using rule 90 (integer -> HEXAINTEGER .)
    NE              reduce using rule 90 (integer -> HEXAINTEGER .)
    RA              reduce using rule 90 (integer -> HEXAINTEGER .)
    WA              reduce using rule 90 (integer -> HEXAINTEGER .)
    CHHA            reduce using rule 90 (integer -> HEXAINTEGER .)
    CHHAINA         reduce using rule 90 (integer -> HEXAINTEGER .)
    BAISA           reduce using rule 90 (integer -> HEXAINTEGER .)
    NEWLINE         reduce using rule 90 (integer -> HEXAINTEGER .)
    LEKHA           reduce using rule 90 (integer -> HEXAINTEGER .)
    LEU             reduce using rule 90 (integer -> HEXAINTEGER .)
    COMMA           reduce using rule 90 (integer -> HEXAINTEGER .)
    $end            reduce using rule 90 (integer -> HEXAINTEGER .)
    KAKHA           reduce using rule 90 (integer -> HEXAINTEGER .)
    TICHO           reduce using rule 90 (integer -> HEXAINTEGER .)
    DIYE            reduce using rule 90 (integer -> HEXAINTEGER .)
    error           reduce using rule 90 (integer -> HEXAINTEGER .)
    ATHAWA          reduce using rule 90 (integer -> HEXAINTEGER .)
    BAJA            reduce using rule 90 (integer -> HEXAINTEGER .)
    MAKA            reduce using rule 90 (integer -> HEXAINTEGER .)
    RPARA           reduce using rule 90 (integer -> HEXAINTEGER .)
    RGPARA          reduce using rule 90 (integer -> HEXAINTEGER .)
    BHAE            reduce using rule 90 (integer -> HEXAINTEGER .)
    COLON           reduce using rule 90 (integer -> HEXAINTEGER .)
    DEKHI           reduce using rule 90 (integer -> HEXAINTEGER .)


state 30

    (28) print -> variableExpr . LEKHA SEMICOLON
    (29) print -> variableExpr . LEKHA
    (30) input -> variableExpr . LEU
    (67) variableExpr -> variableExpr . COMMA expr

    LEKHA           shift and go to state 92
    LEU             shift and go to state 91
    COMMA           shift and go to state 90


state 31

    (96) boolean -> JHUTO .

    PLUS            reduce using rule 96 (boolean -> JHUTO .)
    MINUS           reduce using rule 96 (boolean -> JHUTO .)
    TIMES           reduce using rule 96 (boolean -> JHUTO .)
    DIVIDE          reduce using rule 96 (boolean -> JHUTO .)
    MODULUS         reduce using rule 96 (boolean -> JHUTO .)
    POWER           reduce using rule 96 (boolean -> JHUTO .)
    GT              reduce using rule 96 (boolean -> JHUTO .)
    LT              reduce using rule 96 (boolean -> JHUTO .)
    GE              reduce using rule 96 (boolean -> JHUTO .)
    LE              reduce using rule 96 (boolean -> JHUTO .)
    EQ              reduce using rule 96 (boolean -> JHUTO .)
    NE              reduce using rule 96 (boolean -> JHUTO .)
    RA              reduce using rule 96 (boolean -> JHUTO .)
    WA              reduce using rule 96 (boolean -> JHUTO .)
    CHHA            reduce using rule 96 (boolean -> JHUTO .)
    CHHAINA         reduce using rule 96 (boolean -> JHUTO .)
    PATHAU          reduce using rule 96 (boolean -> JHUTO .)
    CHOTI           reduce using rule 96 (boolean -> JHUTO .)
    NEWLINE         reduce using rule 96 (boolean -> JHUTO .)
    $end            reduce using rule 96 (boolean -> JHUTO .)
    LEKHA           reduce using rule 96 (boolean -> JHUTO .)
    LEU             reduce using rule 96 (boolean -> JHUTO .)
    COMMA           reduce using rule 96 (boolean -> JHUTO .)
    RPARA           reduce using rule 96 (boolean -> JHUTO .)
    RGPARA          reduce using rule 96 (boolean -> JHUTO .)
    BHAE            reduce using rule 96 (boolean -> JHUTO .)
    error           reduce using rule 96 (boolean -> JHUTO .)
    KAKHA           reduce using rule 96 (boolean -> JHUTO .)
    TICHO           reduce using rule 96 (boolean -> JHUTO .)
    DIYE            reduce using rule 96 (boolean -> JHUTO .)
    ATHAWA          reduce using rule 96 (boolean -> JHUTO .)
    BAJA            reduce using rule 96 (boolean -> JHUTO .)
    MAKA            reduce using rule 96 (boolean -> JHUTO .)
    BAISA           reduce using rule 96 (boolean -> JHUTO .)
    COLON           reduce using rule 96 (boolean -> JHUTO .)
    DEKHI           reduce using rule 96 (boolean -> JHUTO .)


state 32

    (7) slstmt -> expression .

    NEWLINE         reduce using rule 7 (slstmt -> expression .)
    $end            reduce using rule 7 (slstmt -> expression .)
    KAKHA           reduce using rule 7 (slstmt -> expression .)
    TICHO           reduce using rule 7 (slstmt -> expression .)
    DIYE            reduce using rule 7 (slstmt -> expression .)
    error           reduce using rule 7 (slstmt -> expression .)
    ATHAWA          reduce using rule 7 (slstmt -> expression .)
    BAJA            reduce using rule 7 (slstmt -> expression .)
    MAKA            reduce using rule 7 (slstmt -> expression .)
    BAISA           reduce using rule 7 (slstmt -> expression .)


state 33

    (95) boolean -> SACHO .

    PLUS            reduce using rule 95 (boolean -> SACHO .)
    MINUS           reduce using rule 95 (boolean -> SACHO .)
    TIMES           reduce using rule 95 (boolean -> SACHO .)
    DIVIDE          reduce using rule 95 (boolean -> SACHO .)
    MODULUS         reduce using rule 95 (boolean -> SACHO .)
    POWER           reduce using rule 95 (boolean -> SACHO .)
    GT              reduce using rule 95 (boolean -> SACHO .)
    LT              reduce using rule 95 (boolean -> SACHO .)
    GE              reduce using rule 95 (boolean -> SACHO .)
    LE              reduce using rule 95 (boolean -> SACHO .)
    EQ              reduce using rule 95 (boolean -> SACHO .)
    NE              reduce using rule 95 (boolean -> SACHO .)
    RA              reduce using rule 95 (boolean -> SACHO .)
    WA              reduce using rule 95 (boolean -> SACHO .)
    CHHA            reduce using rule 95 (boolean -> SACHO .)
    CHHAINA         reduce using rule 95 (boolean -> SACHO .)
    PATHAU          reduce using rule 95 (boolean -> SACHO .)
    CHOTI           reduce using rule 95 (boolean -> SACHO .)
    NEWLINE         reduce using rule 95 (boolean -> SACHO .)
    $end            reduce using rule 95 (boolean -> SACHO .)
    LEKHA           reduce using rule 95 (boolean -> SACHO .)
    LEU             reduce using rule 95 (boolean -> SACHO .)
    COMMA           reduce using rule 95 (boolean -> SACHO .)
    RPARA           reduce using rule 95 (boolean -> SACHO .)
    RGPARA          reduce using rule 95 (boolean -> SACHO .)
    BHAE            reduce using rule 95 (boolean -> SACHO .)
    error           reduce using rule 95 (boolean -> SACHO .)
    KAKHA           reduce using rule 95 (boolean -> SACHO .)
    TICHO           reduce using rule 95 (boolean -> SACHO .)
    DIYE            reduce using rule 95 (boolean -> SACHO .)
    ATHAWA          reduce using rule 95 (boolean -> SACHO .)
    BAJA            reduce using rule 95 (boolean -> SACHO .)
    MAKA            reduce using rule 95 (boolean -> SACHO .)
    BAISA           reduce using rule 95 (boolean -> SACHO .)
    COLON           reduce using rule 95 (boolean -> SACHO .)
    DEKHI           reduce using rule 95 (boolean -> SACHO .)


state 34

    (85) expr -> boolean .

    PLUS            reduce using rule 85 (expr -> boolean .)
    MINUS           reduce using rule 85 (expr -> boolean .)
    TIMES           reduce using rule 85 (expr -> boolean .)
    DIVIDE          reduce using rule 85 (expr -> boolean .)
    MODULUS         reduce using rule 85 (expr -> boolean .)
    POWER           reduce using rule 85 (expr -> boolean .)
    GT              reduce using rule 85 (expr -> boolean .)
    LT              reduce using rule 85 (expr -> boolean .)
    GE              reduce using rule 85 (expr -> boolean .)
    LE              reduce using rule 85 (expr -> boolean .)
    EQ              reduce using rule 85 (expr -> boolean .)
    NE              reduce using rule 85 (expr -> boolean .)
    RA              reduce using rule 85 (expr -> boolean .)
    WA              reduce using rule 85 (expr -> boolean .)
    CHHA            reduce using rule 85 (expr -> boolean .)
    CHHAINA         reduce using rule 85 (expr -> boolean .)
    PATHAU          reduce using rule 85 (expr -> boolean .)
    CHOTI           reduce using rule 85 (expr -> boolean .)
    NEWLINE         reduce using rule 85 (expr -> boolean .)
    $end            reduce using rule 85 (expr -> boolean .)
    LEKHA           reduce using rule 85 (expr -> boolean .)
    LEU             reduce using rule 85 (expr -> boolean .)
    COMMA           reduce using rule 85 (expr -> boolean .)
    RPARA           reduce using rule 85 (expr -> boolean .)
    RGPARA          reduce using rule 85 (expr -> boolean .)
    BHAE            reduce using rule 85 (expr -> boolean .)
    error           reduce using rule 85 (expr -> boolean .)
    KAKHA           reduce using rule 85 (expr -> boolean .)
    TICHO           reduce using rule 85 (expr -> boolean .)
    DIYE            reduce using rule 85 (expr -> boolean .)
    ATHAWA          reduce using rule 85 (expr -> boolean .)
    BAJA            reduce using rule 85 (expr -> boolean .)
    MAKA            reduce using rule 85 (expr -> boolean .)
    BAISA           reduce using rule 85 (expr -> boolean .)
    COLON           reduce using rule 85 (expr -> boolean .)
    DEKHI           reduce using rule 85 (expr -> boolean .)


state 35

    (107) reference -> MERO . reference
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MERO            shift and go to state 35
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    functioncall                   shift and go to state 63
    reference                      shift and go to state 93

state 36

    (87) expr -> array .

    PLUS            reduce using rule 87 (expr -> array .)
    MINUS           reduce using rule 87 (expr -> array .)
    TIMES           reduce using rule 87 (expr -> array .)
    DIVIDE          reduce using rule 87 (expr -> array .)
    MODULUS         reduce using rule 87 (expr -> array .)
    POWER           reduce using rule 87 (expr -> array .)
    GT              reduce using rule 87 (expr -> array .)
    LT              reduce using rule 87 (expr -> array .)
    GE              reduce using rule 87 (expr -> array .)
    LE              reduce using rule 87 (expr -> array .)
    EQ              reduce using rule 87 (expr -> array .)
    NE              reduce using rule 87 (expr -> array .)
    RA              reduce using rule 87 (expr -> array .)
    WA              reduce using rule 87 (expr -> array .)
    CHHA            reduce using rule 87 (expr -> array .)
    CHHAINA         reduce using rule 87 (expr -> array .)
    PATHAU          reduce using rule 87 (expr -> array .)
    CHOTI           reduce using rule 87 (expr -> array .)
    NEWLINE         reduce using rule 87 (expr -> array .)
    $end            reduce using rule 87 (expr -> array .)
    LEKHA           reduce using rule 87 (expr -> array .)
    LEU             reduce using rule 87 (expr -> array .)
    COMMA           reduce using rule 87 (expr -> array .)
    RPARA           reduce using rule 87 (expr -> array .)
    RGPARA          reduce using rule 87 (expr -> array .)
    BHAE            reduce using rule 87 (expr -> array .)
    error           reduce using rule 87 (expr -> array .)
    KAKHA           reduce using rule 87 (expr -> array .)
    TICHO           reduce using rule 87 (expr -> array .)
    DIYE            reduce using rule 87 (expr -> array .)
    ATHAWA          reduce using rule 87 (expr -> array .)
    BAJA            reduce using rule 87 (expr -> array .)
    MAKA            reduce using rule 87 (expr -> array .)
    BAISA           reduce using rule 87 (expr -> array .)
    COLON           reduce using rule 87 (expr -> array .)
    DEKHI           reduce using rule 87 (expr -> array .)


state 37

    (89) integer -> OCTALINTEGER .

    PATHAU          reduce using rule 89 (integer -> OCTALINTEGER .)
    CHOTI           reduce using rule 89 (integer -> OCTALINTEGER .)
    PLUS            reduce using rule 89 (integer -> OCTALINTEGER .)
    MINUS           reduce using rule 89 (integer -> OCTALINTEGER .)
    TIMES           reduce using rule 89 (integer -> OCTALINTEGER .)
    DIVIDE          reduce using rule 89 (integer -> OCTALINTEGER .)
    MODULUS         reduce using rule 89 (integer -> OCTALINTEGER .)
    POWER           reduce using rule 89 (integer -> OCTALINTEGER .)
    GT              reduce using rule 89 (integer -> OCTALINTEGER .)
    LT              reduce using rule 89 (integer -> OCTALINTEGER .)
    GE              reduce using rule 89 (integer -> OCTALINTEGER .)
    LE              reduce using rule 89 (integer -> OCTALINTEGER .)
    EQ              reduce using rule 89 (integer -> OCTALINTEGER .)
    NE              reduce using rule 89 (integer -> OCTALINTEGER .)
    RA              reduce using rule 89 (integer -> OCTALINTEGER .)
    WA              reduce using rule 89 (integer -> OCTALINTEGER .)
    CHHA            reduce using rule 89 (integer -> OCTALINTEGER .)
    CHHAINA         reduce using rule 89 (integer -> OCTALINTEGER .)
    BAISA           reduce using rule 89 (integer -> OCTALINTEGER .)
    NEWLINE         reduce using rule 89 (integer -> OCTALINTEGER .)
    LEKHA           reduce using rule 89 (integer -> OCTALINTEGER .)
    LEU             reduce using rule 89 (integer -> OCTALINTEGER .)
    COMMA           reduce using rule 89 (integer -> OCTALINTEGER .)
    $end            reduce using rule 89 (integer -> OCTALINTEGER .)
    KAKHA           reduce using rule 89 (integer -> OCTALINTEGER .)
    TICHO           reduce using rule 89 (integer -> OCTALINTEGER .)
    DIYE            reduce using rule 89 (integer -> OCTALINTEGER .)
    error           reduce using rule 89 (integer -> OCTALINTEGER .)
    ATHAWA          reduce using rule 89 (integer -> OCTALINTEGER .)
    BAJA            reduce using rule 89 (integer -> OCTALINTEGER .)
    MAKA            reduce using rule 89 (integer -> OCTALINTEGER .)
    RPARA           reduce using rule 89 (integer -> OCTALINTEGER .)
    RGPARA          reduce using rule 89 (integer -> OCTALINTEGER .)
    BHAE            reduce using rule 89 (integer -> OCTALINTEGER .)
    COLON           reduce using rule 89 (integer -> OCTALINTEGER .)
    DEKHI           reduce using rule 89 (integer -> OCTALINTEGER .)


state 38

    (16) slstmt -> filewriteln .

    NEWLINE         reduce using rule 16 (slstmt -> filewriteln .)
    $end            reduce using rule 16 (slstmt -> filewriteln .)
    KAKHA           reduce using rule 16 (slstmt -> filewriteln .)
    TICHO           reduce using rule 16 (slstmt -> filewriteln .)
    DIYE            reduce using rule 16 (slstmt -> filewriteln .)
    error           reduce using rule 16 (slstmt -> filewriteln .)
    ATHAWA          reduce using rule 16 (slstmt -> filewriteln .)
    BAJA            reduce using rule 16 (slstmt -> filewriteln .)
    MAKA            reduce using rule 16 (slstmt -> filewriteln .)
    BAISA           reduce using rule 16 (slstmt -> filewriteln .)


state 39

    (55) function -> KAAM . IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> KAAM . IDENTIFIER LPARA error RPARA NEWLINE program MAKA

    IDENTIFIER      shift and go to state 94


state 40

    (56) class -> KHAKA . IDENTIFIER NEWLINE program KAKHA

    IDENTIFIER      shift and go to state 95


state 41

    (108) identifier -> IDENTIFIER .
    (109) functioncall -> IDENTIFIER . LPARA variableExpr RPARA

    LGPARA          reduce using rule 108 (identifier -> IDENTIFIER .)
    DOT             reduce using rule 108 (identifier -> IDENTIFIER .)
    KO              reduce using rule 108 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 108 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 108 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 108 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 108 (identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 108 (identifier -> IDENTIFIER .)
    POWER           reduce using rule 108 (identifier -> IDENTIFIER .)
    GT              reduce using rule 108 (identifier -> IDENTIFIER .)
    LT              reduce using rule 108 (identifier -> IDENTIFIER .)
    GE              reduce using rule 108 (identifier -> IDENTIFIER .)
    LE              reduce using rule 108 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 108 (identifier -> IDENTIFIER .)
    NE              reduce using rule 108 (identifier -> IDENTIFIER .)
    RA              reduce using rule 108 (identifier -> IDENTIFIER .)
    WA              reduce using rule 108 (identifier -> IDENTIFIER .)
    CHHA            reduce using rule 108 (identifier -> IDENTIFIER .)
    CHHAINA         reduce using rule 108 (identifier -> IDENTIFIER .)
    PATHAU          reduce using rule 108 (identifier -> IDENTIFIER .)
    CHOTI           reduce using rule 108 (identifier -> IDENTIFIER .)
    NEWLINE         reduce using rule 108 (identifier -> IDENTIFIER .)
    $end            reduce using rule 108 (identifier -> IDENTIFIER .)
    LEKHA           reduce using rule 108 (identifier -> IDENTIFIER .)
    LEU             reduce using rule 108 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 108 (identifier -> IDENTIFIER .)
    RPARA           reduce using rule 108 (identifier -> IDENTIFIER .)
    RGPARA          reduce using rule 108 (identifier -> IDENTIFIER .)
    BHAE            reduce using rule 108 (identifier -> IDENTIFIER .)
    error           reduce using rule 108 (identifier -> IDENTIFIER .)
    KAKHA           reduce using rule 108 (identifier -> IDENTIFIER .)
    TICHO           reduce using rule 108 (identifier -> IDENTIFIER .)
    DIYE            reduce using rule 108 (identifier -> IDENTIFIER .)
    ATHAWA          reduce using rule 108 (identifier -> IDENTIFIER .)
    BAJA            reduce using rule 108 (identifier -> IDENTIFIER .)
    MAKA            reduce using rule 108 (identifier -> IDENTIFIER .)
    BAISA           reduce using rule 108 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 108 (identifier -> IDENTIFIER .)
    DEKHI           reduce using rule 108 (identifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 108 (identifier -> IDENTIFIER .)
    AI              reduce using rule 108 (identifier -> IDENTIFIER .)
    SI              reduce using rule 108 (identifier -> IDENTIFIER .)
    MI              reduce using rule 108 (identifier -> IDENTIFIER .)
    DI              reduce using rule 108 (identifier -> IDENTIFIER .)
    MA              reduce using rule 108 (identifier -> IDENTIFIER .)
    BATA            reduce using rule 108 (identifier -> IDENTIFIER .)
    BANDAGARA       reduce using rule 108 (identifier -> IDENTIFIER .)
    DEKHAU          reduce using rule 108 (identifier -> IDENTIFIER .)
    LUKAU           reduce using rule 108 (identifier -> IDENTIFIER .)
    HATAU           reduce using rule 108 (identifier -> IDENTIFIER .)
    BANAU           reduce using rule 108 (identifier -> IDENTIFIER .)
    METAU           reduce using rule 108 (identifier -> IDENTIFIER .)
    LPARA           shift and go to state 96


state 42

    (4) stmt -> empty .
    (69) variableExpr -> empty .

    BAISA           reduce using rule 4 (stmt -> empty .)
    NEWLINE         reduce using rule 4 (stmt -> empty .)
    $end            reduce using rule 4 (stmt -> empty .)
    KAKHA           reduce using rule 4 (stmt -> empty .)
    TICHO           reduce using rule 4 (stmt -> empty .)
    DIYE            reduce using rule 4 (stmt -> empty .)
    error           reduce using rule 4 (stmt -> empty .)
    ATHAWA          reduce using rule 4 (stmt -> empty .)
    BAJA            reduce using rule 4 (stmt -> empty .)
    MAKA            reduce using rule 4 (stmt -> empty .)
    LEKHA           reduce using rule 69 (variableExpr -> empty .)
    LEU             reduce using rule 69 (variableExpr -> empty .)
    COMMA           reduce using rule 69 (variableExpr -> empty .)


state 43

    (44) mlstmt -> function .

    NEWLINE         reduce using rule 44 (mlstmt -> function .)
    ATHAWA          reduce using rule 44 (mlstmt -> function .)
    DIYE            reduce using rule 44 (mlstmt -> function .)
    error           reduce using rule 44 (mlstmt -> function .)
    $end            reduce using rule 44 (mlstmt -> function .)
    KAKHA           reduce using rule 44 (mlstmt -> function .)
    TICHO           reduce using rule 44 (mlstmt -> function .)
    BAJA            reduce using rule 44 (mlstmt -> function .)
    MAKA            reduce using rule 44 (mlstmt -> function .)
    BAISA           reduce using rule 44 (mlstmt -> function .)


state 44

    (5) stmt -> slstmt .

    BAISA           reduce using rule 5 (stmt -> slstmt .)
    NEWLINE         reduce using rule 5 (stmt -> slstmt .)
    $end            reduce using rule 5 (stmt -> slstmt .)
    KAKHA           reduce using rule 5 (stmt -> slstmt .)
    TICHO           reduce using rule 5 (stmt -> slstmt .)
    DIYE            reduce using rule 5 (stmt -> slstmt .)
    error           reduce using rule 5 (stmt -> slstmt .)
    ATHAWA          reduce using rule 5 (stmt -> slstmt .)
    BAJA            reduce using rule 5 (stmt -> slstmt .)
    MAKA            reduce using rule 5 (stmt -> slstmt .)


state 45

    (94) null -> SUNYA .

    PATHAU          reduce using rule 94 (null -> SUNYA .)
    CHOTI           reduce using rule 94 (null -> SUNYA .)
    PLUS            reduce using rule 94 (null -> SUNYA .)
    MINUS           reduce using rule 94 (null -> SUNYA .)
    TIMES           reduce using rule 94 (null -> SUNYA .)
    DIVIDE          reduce using rule 94 (null -> SUNYA .)
    MODULUS         reduce using rule 94 (null -> SUNYA .)
    POWER           reduce using rule 94 (null -> SUNYA .)
    GT              reduce using rule 94 (null -> SUNYA .)
    LT              reduce using rule 94 (null -> SUNYA .)
    GE              reduce using rule 94 (null -> SUNYA .)
    LE              reduce using rule 94 (null -> SUNYA .)
    EQ              reduce using rule 94 (null -> SUNYA .)
    NE              reduce using rule 94 (null -> SUNYA .)
    RA              reduce using rule 94 (null -> SUNYA .)
    WA              reduce using rule 94 (null -> SUNYA .)
    CHHA            reduce using rule 94 (null -> SUNYA .)
    CHHAINA         reduce using rule 94 (null -> SUNYA .)
    NEWLINE         reduce using rule 94 (null -> SUNYA .)
    $end            reduce using rule 94 (null -> SUNYA .)
    LEKHA           reduce using rule 94 (null -> SUNYA .)
    LEU             reduce using rule 94 (null -> SUNYA .)
    COMMA           reduce using rule 94 (null -> SUNYA .)
    KAKHA           reduce using rule 94 (null -> SUNYA .)
    TICHO           reduce using rule 94 (null -> SUNYA .)
    DIYE            reduce using rule 94 (null -> SUNYA .)
    error           reduce using rule 94 (null -> SUNYA .)
    ATHAWA          reduce using rule 94 (null -> SUNYA .)
    BAJA            reduce using rule 94 (null -> SUNYA .)
    MAKA            reduce using rule 94 (null -> SUNYA .)
    BAISA           reduce using rule 94 (null -> SUNYA .)
    RGPARA          reduce using rule 94 (null -> SUNYA .)
    DEKHI           reduce using rule 94 (null -> SUNYA .)
    RPARA           reduce using rule 94 (null -> SUNYA .)
    BHAE            reduce using rule 94 (null -> SUNYA .)
    COLON           reduce using rule 94 (null -> SUNYA .)


state 46

    (25) slstmt -> graphicdraw .

    NEWLINE         reduce using rule 25 (slstmt -> graphicdraw .)
    $end            reduce using rule 25 (slstmt -> graphicdraw .)
    KAKHA           reduce using rule 25 (slstmt -> graphicdraw .)
    TICHO           reduce using rule 25 (slstmt -> graphicdraw .)
    DIYE            reduce using rule 25 (slstmt -> graphicdraw .)
    error           reduce using rule 25 (slstmt -> graphicdraw .)
    ATHAWA          reduce using rule 25 (slstmt -> graphicdraw .)
    BAJA            reduce using rule 25 (slstmt -> graphicdraw .)
    MAKA            reduce using rule 25 (slstmt -> graphicdraw .)
    BAISA           reduce using rule 25 (slstmt -> graphicdraw .)


state 47

    (26) expression -> expr .
    (35) return -> expr . PATHAU
    (54) repeatloop -> expr . CHOTI NEWLINE program TICHO
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA
    (68) variableExpr -> expr .

    NEWLINE         reduce using rule 26 (expression -> expr .)
    $end            reduce using rule 26 (expression -> expr .)
    BAISA           reduce using rule 26 (expression -> expr .)
    BAJA            reduce using rule 26 (expression -> expr .)
    DIYE            reduce using rule 26 (expression -> expr .)
    ATHAWA          reduce using rule 26 (expression -> expr .)
    KAKHA           reduce using rule 26 (expression -> expr .)
    MAKA            reduce using rule 26 (expression -> expr .)
    error           reduce using rule 26 (expression -> expr .)
    TICHO           reduce using rule 26 (expression -> expr .)
    PATHAU          shift and go to state 110
    CHOTI           shift and go to state 112
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98
    LEKHA           reduce using rule 68 (variableExpr -> expr .)
    LEU             reduce using rule 68 (variableExpr -> expr .)
    COMMA           reduce using rule 68 (variableExpr -> expr .)


state 48

    (11) slstmt -> slif .

    NEWLINE         reduce using rule 11 (slstmt -> slif .)
    $end            reduce using rule 11 (slstmt -> slif .)
    KAKHA           reduce using rule 11 (slstmt -> slif .)
    TICHO           reduce using rule 11 (slstmt -> slif .)
    DIYE            reduce using rule 11 (slstmt -> slif .)
    error           reduce using rule 11 (slstmt -> slif .)
    ATHAWA          reduce using rule 11 (slstmt -> slif .)
    BAJA            reduce using rule 11 (slstmt -> slif .)
    MAKA            reduce using rule 11 (slstmt -> slif .)
    BAISA           reduce using rule 11 (slstmt -> slif .)


state 49

    (20) slstmt -> graphicshow .

    NEWLINE         reduce using rule 20 (slstmt -> graphicshow .)
    $end            reduce using rule 20 (slstmt -> graphicshow .)
    KAKHA           reduce using rule 20 (slstmt -> graphicshow .)
    TICHO           reduce using rule 20 (slstmt -> graphicshow .)
    DIYE            reduce using rule 20 (slstmt -> graphicshow .)
    error           reduce using rule 20 (slstmt -> graphicshow .)
    ATHAWA          reduce using rule 20 (slstmt -> graphicshow .)
    BAJA            reduce using rule 20 (slstmt -> graphicshow .)
    MAKA            reduce using rule 20 (slstmt -> graphicshow .)
    BAISA           reduce using rule 20 (slstmt -> graphicshow .)


state 50

    (22) slstmt -> graphicclose .

    NEWLINE         reduce using rule 22 (slstmt -> graphicclose .)
    $end            reduce using rule 22 (slstmt -> graphicclose .)
    KAKHA           reduce using rule 22 (slstmt -> graphicclose .)
    TICHO           reduce using rule 22 (slstmt -> graphicclose .)
    DIYE            reduce using rule 22 (slstmt -> graphicclose .)
    error           reduce using rule 22 (slstmt -> graphicclose .)
    ATHAWA          reduce using rule 22 (slstmt -> graphicclose .)
    BAJA            reduce using rule 22 (slstmt -> graphicclose .)
    MAKA            reduce using rule 22 (slstmt -> graphicclose .)
    BAISA           reduce using rule 22 (slstmt -> graphicclose .)


state 51

    (53) whileloop -> JABA . SAMMA expr NEWLINE program BAJA

    SAMMA           shift and go to state 115


state 52

    (12) slstmt -> incremental .

    NEWLINE         reduce using rule 12 (slstmt -> incremental .)
    $end            reduce using rule 12 (slstmt -> incremental .)
    KAKHA           reduce using rule 12 (slstmt -> incremental .)
    TICHO           reduce using rule 12 (slstmt -> incremental .)
    DIYE            reduce using rule 12 (slstmt -> incremental .)
    error           reduce using rule 12 (slstmt -> incremental .)
    ATHAWA          reduce using rule 12 (slstmt -> incremental .)
    BAJA            reduce using rule 12 (slstmt -> incremental .)
    MAKA            reduce using rule 12 (slstmt -> incremental .)
    BAISA           reduce using rule 12 (slstmt -> incremental .)


state 53

    (84) expr -> null .

    PLUS            reduce using rule 84 (expr -> null .)
    MINUS           reduce using rule 84 (expr -> null .)
    TIMES           reduce using rule 84 (expr -> null .)
    DIVIDE          reduce using rule 84 (expr -> null .)
    MODULUS         reduce using rule 84 (expr -> null .)
    POWER           reduce using rule 84 (expr -> null .)
    GT              reduce using rule 84 (expr -> null .)
    LT              reduce using rule 84 (expr -> null .)
    GE              reduce using rule 84 (expr -> null .)
    LE              reduce using rule 84 (expr -> null .)
    EQ              reduce using rule 84 (expr -> null .)
    NE              reduce using rule 84 (expr -> null .)
    RA              reduce using rule 84 (expr -> null .)
    WA              reduce using rule 84 (expr -> null .)
    CHHA            reduce using rule 84 (expr -> null .)
    CHHAINA         reduce using rule 84 (expr -> null .)
    PATHAU          reduce using rule 84 (expr -> null .)
    CHOTI           reduce using rule 84 (expr -> null .)
    NEWLINE         reduce using rule 84 (expr -> null .)
    $end            reduce using rule 84 (expr -> null .)
    LEKHA           reduce using rule 84 (expr -> null .)
    LEU             reduce using rule 84 (expr -> null .)
    COMMA           reduce using rule 84 (expr -> null .)
    RPARA           reduce using rule 84 (expr -> null .)
    RGPARA          reduce using rule 84 (expr -> null .)
    BHAE            reduce using rule 84 (expr -> null .)
    error           reduce using rule 84 (expr -> null .)
    KAKHA           reduce using rule 84 (expr -> null .)
    TICHO           reduce using rule 84 (expr -> null .)
    DIYE            reduce using rule 84 (expr -> null .)
    ATHAWA          reduce using rule 84 (expr -> null .)
    BAJA            reduce using rule 84 (expr -> null .)
    MAKA            reduce using rule 84 (expr -> null .)
    BAISA           reduce using rule 84 (expr -> null .)
    COLON           reduce using rule 84 (expr -> null .)
    DEKHI           reduce using rule 84 (expr -> null .)


state 54

    (36) continue -> ARKO .

    MAKA            reduce using rule 36 (continue -> ARKO .)
    NEWLINE         reduce using rule 36 (continue -> ARKO .)
    ATHAWA          reduce using rule 36 (continue -> ARKO .)
    DIYE            reduce using rule 36 (continue -> ARKO .)
    error           reduce using rule 36 (continue -> ARKO .)
    BAISA           reduce using rule 36 (continue -> ARKO .)
    $end            reduce using rule 36 (continue -> ARKO .)
    KAKHA           reduce using rule 36 (continue -> ARKO .)
    TICHO           reduce using rule 36 (continue -> ARKO .)
    BAJA            reduce using rule 36 (continue -> ARKO .)


state 55

    (51) forloop -> SABAI . reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> SABAI . reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MERO            shift and go to state 35
    IDENTIFIER      shift and go to state 41

    reference                      shift and go to state 116
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15

state 56

    (88) integer -> DECIMALINTEGER .

    PATHAU          reduce using rule 88 (integer -> DECIMALINTEGER .)
    CHOTI           reduce using rule 88 (integer -> DECIMALINTEGER .)
    PLUS            reduce using rule 88 (integer -> DECIMALINTEGER .)
    MINUS           reduce using rule 88 (integer -> DECIMALINTEGER .)
    TIMES           reduce using rule 88 (integer -> DECIMALINTEGER .)
    DIVIDE          reduce using rule 88 (integer -> DECIMALINTEGER .)
    MODULUS         reduce using rule 88 (integer -> DECIMALINTEGER .)
    POWER           reduce using rule 88 (integer -> DECIMALINTEGER .)
    GT              reduce using rule 88 (integer -> DECIMALINTEGER .)
    LT              reduce using rule 88 (integer -> DECIMALINTEGER .)
    GE              reduce using rule 88 (integer -> DECIMALINTEGER .)
    LE              reduce using rule 88 (integer -> DECIMALINTEGER .)
    EQ              reduce using rule 88 (integer -> DECIMALINTEGER .)
    NE              reduce using rule 88 (integer -> DECIMALINTEGER .)
    RA              reduce using rule 88 (integer -> DECIMALINTEGER .)
    WA              reduce using rule 88 (integer -> DECIMALINTEGER .)
    CHHA            reduce using rule 88 (integer -> DECIMALINTEGER .)
    CHHAINA         reduce using rule 88 (integer -> DECIMALINTEGER .)
    BAISA           reduce using rule 88 (integer -> DECIMALINTEGER .)
    NEWLINE         reduce using rule 88 (integer -> DECIMALINTEGER .)
    LEKHA           reduce using rule 88 (integer -> DECIMALINTEGER .)
    LEU             reduce using rule 88 (integer -> DECIMALINTEGER .)
    COMMA           reduce using rule 88 (integer -> DECIMALINTEGER .)
    $end            reduce using rule 88 (integer -> DECIMALINTEGER .)
    KAKHA           reduce using rule 88 (integer -> DECIMALINTEGER .)
    TICHO           reduce using rule 88 (integer -> DECIMALINTEGER .)
    DIYE            reduce using rule 88 (integer -> DECIMALINTEGER .)
    error           reduce using rule 88 (integer -> DECIMALINTEGER .)
    ATHAWA          reduce using rule 88 (integer -> DECIMALINTEGER .)
    BAJA            reduce using rule 88 (integer -> DECIMALINTEGER .)
    MAKA            reduce using rule 88 (integer -> DECIMALINTEGER .)
    RPARA           reduce using rule 88 (integer -> DECIMALINTEGER .)
    RGPARA          reduce using rule 88 (integer -> DECIMALINTEGER .)
    BHAE            reduce using rule 88 (integer -> DECIMALINTEGER .)
    COLON           reduce using rule 88 (integer -> DECIMALINTEGER .)
    DEKHI           reduce using rule 88 (integer -> DECIMALINTEGER .)


state 57

    (0) S' -> begin .



state 58

    (93) string -> STRING .

    PLUS            reduce using rule 93 (string -> STRING .)
    MINUS           reduce using rule 93 (string -> STRING .)
    TIMES           reduce using rule 93 (string -> STRING .)
    DIVIDE          reduce using rule 93 (string -> STRING .)
    MODULUS         reduce using rule 93 (string -> STRING .)
    POWER           reduce using rule 93 (string -> STRING .)
    GT              reduce using rule 93 (string -> STRING .)
    LT              reduce using rule 93 (string -> STRING .)
    GE              reduce using rule 93 (string -> STRING .)
    LE              reduce using rule 93 (string -> STRING .)
    EQ              reduce using rule 93 (string -> STRING .)
    NE              reduce using rule 93 (string -> STRING .)
    RA              reduce using rule 93 (string -> STRING .)
    WA              reduce using rule 93 (string -> STRING .)
    CHHA            reduce using rule 93 (string -> STRING .)
    CHHAINA         reduce using rule 93 (string -> STRING .)
    PATHAU          reduce using rule 93 (string -> STRING .)
    CHOTI           reduce using rule 93 (string -> STRING .)
    NEWLINE         reduce using rule 93 (string -> STRING .)
    $end            reduce using rule 93 (string -> STRING .)
    LEKHA           reduce using rule 93 (string -> STRING .)
    LEU             reduce using rule 93 (string -> STRING .)
    COMMA           reduce using rule 93 (string -> STRING .)
    RPARA           reduce using rule 93 (string -> STRING .)
    RGPARA          reduce using rule 93 (string -> STRING .)
    BHAE            reduce using rule 93 (string -> STRING .)
    error           reduce using rule 93 (string -> STRING .)
    KAKHA           reduce using rule 93 (string -> STRING .)
    TICHO           reduce using rule 93 (string -> STRING .)
    DIYE            reduce using rule 93 (string -> STRING .)
    ATHAWA          reduce using rule 93 (string -> STRING .)
    BAJA            reduce using rule 93 (string -> STRING .)
    MAKA            reduce using rule 93 (string -> STRING .)
    BAISA           reduce using rule 93 (string -> STRING .)
    COLON           reduce using rule 93 (string -> STRING .)
    DEKHI           reduce using rule 93 (string -> STRING .)
    KORA            reduce using rule 93 (string -> STRING .)


state 59

    (8) slstmt -> assignment .

    NEWLINE         reduce using rule 8 (slstmt -> assignment .)
    $end            reduce using rule 8 (slstmt -> assignment .)
    KAKHA           reduce using rule 8 (slstmt -> assignment .)
    TICHO           reduce using rule 8 (slstmt -> assignment .)
    DIYE            reduce using rule 8 (slstmt -> assignment .)
    error           reduce using rule 8 (slstmt -> assignment .)
    ATHAWA          reduce using rule 8 (slstmt -> assignment .)
    BAJA            reduce using rule 8 (slstmt -> assignment .)
    MAKA            reduce using rule 8 (slstmt -> assignment .)
    BAISA           reduce using rule 8 (slstmt -> assignment .)


state 60

    (45) mlstmt -> class .

    NEWLINE         reduce using rule 45 (mlstmt -> class .)
    ATHAWA          reduce using rule 45 (mlstmt -> class .)
    DIYE            reduce using rule 45 (mlstmt -> class .)
    error           reduce using rule 45 (mlstmt -> class .)
    $end            reduce using rule 45 (mlstmt -> class .)
    KAKHA           reduce using rule 45 (mlstmt -> class .)
    TICHO           reduce using rule 45 (mlstmt -> class .)
    BAJA            reduce using rule 45 (mlstmt -> class .)
    MAKA            reduce using rule 45 (mlstmt -> class .)
    BAISA           reduce using rule 45 (mlstmt -> class .)


state 61

    (18) slstmt -> fileread .

    NEWLINE         reduce using rule 18 (slstmt -> fileread .)
    $end            reduce using rule 18 (slstmt -> fileread .)
    KAKHA           reduce using rule 18 (slstmt -> fileread .)
    TICHO           reduce using rule 18 (slstmt -> fileread .)
    DIYE            reduce using rule 18 (slstmt -> fileread .)
    error           reduce using rule 18 (slstmt -> fileread .)
    ATHAWA          reduce using rule 18 (slstmt -> fileread .)
    BAJA            reduce using rule 18 (slstmt -> fileread .)
    MAKA            reduce using rule 18 (slstmt -> fileread .)
    BAISA           reduce using rule 18 (slstmt -> fileread .)


state 62

    (91) float -> FLOAT .

    COLON           reduce using rule 91 (float -> FLOAT .)
    PLUS            reduce using rule 91 (float -> FLOAT .)
    MINUS           reduce using rule 91 (float -> FLOAT .)
    TIMES           reduce using rule 91 (float -> FLOAT .)
    DIVIDE          reduce using rule 91 (float -> FLOAT .)
    MODULUS         reduce using rule 91 (float -> FLOAT .)
    POWER           reduce using rule 91 (float -> FLOAT .)
    GT              reduce using rule 91 (float -> FLOAT .)
    LT              reduce using rule 91 (float -> FLOAT .)
    GE              reduce using rule 91 (float -> FLOAT .)
    LE              reduce using rule 91 (float -> FLOAT .)
    EQ              reduce using rule 91 (float -> FLOAT .)
    NE              reduce using rule 91 (float -> FLOAT .)
    RA              reduce using rule 91 (float -> FLOAT .)
    WA              reduce using rule 91 (float -> FLOAT .)
    CHHA            reduce using rule 91 (float -> FLOAT .)
    CHHAINA         reduce using rule 91 (float -> FLOAT .)
    RGPARA          reduce using rule 91 (float -> FLOAT .)
    PATHAU          reduce using rule 91 (float -> FLOAT .)
    CHOTI           reduce using rule 91 (float -> FLOAT .)
    TICHO           reduce using rule 91 (float -> FLOAT .)
    NEWLINE         reduce using rule 91 (float -> FLOAT .)
    LEKHA           reduce using rule 91 (float -> FLOAT .)
    LEU             reduce using rule 91 (float -> FLOAT .)
    COMMA           reduce using rule 91 (float -> FLOAT .)
    ATHAWA          reduce using rule 91 (float -> FLOAT .)
    DIYE            reduce using rule 91 (float -> FLOAT .)
    error           reduce using rule 91 (float -> FLOAT .)
    $end            reduce using rule 91 (float -> FLOAT .)
    RPARA           reduce using rule 91 (float -> FLOAT .)
    BHAE            reduce using rule 91 (float -> FLOAT .)
    KAKHA           reduce using rule 91 (float -> FLOAT .)
    BAJA            reduce using rule 91 (float -> FLOAT .)
    MAKA            reduce using rule 91 (float -> FLOAT .)
    BAISA           reduce using rule 91 (float -> FLOAT .)
    DEKHI           reduce using rule 91 (float -> FLOAT .)


state 63

    (99) reference -> functioncall .

    DOT             reduce using rule 99 (reference -> functioncall .)
    KO              reduce using rule 99 (reference -> functioncall .)
    PLUS            reduce using rule 99 (reference -> functioncall .)
    MINUS           reduce using rule 99 (reference -> functioncall .)
    TIMES           reduce using rule 99 (reference -> functioncall .)
    DIVIDE          reduce using rule 99 (reference -> functioncall .)
    MODULUS         reduce using rule 99 (reference -> functioncall .)
    POWER           reduce using rule 99 (reference -> functioncall .)
    GT              reduce using rule 99 (reference -> functioncall .)
    LT              reduce using rule 99 (reference -> functioncall .)
    GE              reduce using rule 99 (reference -> functioncall .)
    LE              reduce using rule 99 (reference -> functioncall .)
    EQ              reduce using rule 99 (reference -> functioncall .)
    NE              reduce using rule 99 (reference -> functioncall .)
    RA              reduce using rule 99 (reference -> functioncall .)
    WA              reduce using rule 99 (reference -> functioncall .)
    CHHA            reduce using rule 99 (reference -> functioncall .)
    CHHAINA         reduce using rule 99 (reference -> functioncall .)
    NEWLINE         reduce using rule 99 (reference -> functioncall .)
    $end            reduce using rule 99 (reference -> functioncall .)
    KAKHA           reduce using rule 99 (reference -> functioncall .)
    TICHO           reduce using rule 99 (reference -> functioncall .)
    DIYE            reduce using rule 99 (reference -> functioncall .)
    error           reduce using rule 99 (reference -> functioncall .)
    ATHAWA          reduce using rule 99 (reference -> functioncall .)
    BAJA            reduce using rule 99 (reference -> functioncall .)
    MAKA            reduce using rule 99 (reference -> functioncall .)
    BAISA           reduce using rule 99 (reference -> functioncall .)
    ASSIGNMENT      reduce using rule 99 (reference -> functioncall .)
    AI              reduce using rule 99 (reference -> functioncall .)
    SI              reduce using rule 99 (reference -> functioncall .)
    MI              reduce using rule 99 (reference -> functioncall .)
    DI              reduce using rule 99 (reference -> functioncall .)
    MA              reduce using rule 99 (reference -> functioncall .)
    BATA            reduce using rule 99 (reference -> functioncall .)
    BANDAGARA       reduce using rule 99 (reference -> functioncall .)
    DEKHAU          reduce using rule 99 (reference -> functioncall .)
    LUKAU           reduce using rule 99 (reference -> functioncall .)
    HATAU           reduce using rule 99 (reference -> functioncall .)
    BANAU           reduce using rule 99 (reference -> functioncall .)
    METAU           reduce using rule 99 (reference -> functioncall .)
    PATHAU          reduce using rule 99 (reference -> functioncall .)
    CHOTI           reduce using rule 99 (reference -> functioncall .)
    LEKHA           reduce using rule 99 (reference -> functioncall .)
    LEU             reduce using rule 99 (reference -> functioncall .)
    COMMA           reduce using rule 99 (reference -> functioncall .)
    BHAE            reduce using rule 99 (reference -> functioncall .)
    RPARA           reduce using rule 99 (reference -> functioncall .)
    RGPARA          reduce using rule 99 (reference -> functioncall .)
    COLON           reduce using rule 99 (reference -> functioncall .)
    DEKHI           reduce using rule 99 (reference -> functioncall .)


state 64

    (19) slstmt -> fileclose .

    NEWLINE         reduce using rule 19 (slstmt -> fileclose .)
    $end            reduce using rule 19 (slstmt -> fileclose .)
    KAKHA           reduce using rule 19 (slstmt -> fileclose .)
    TICHO           reduce using rule 19 (slstmt -> fileclose .)
    DIYE            reduce using rule 19 (slstmt -> fileclose .)
    error           reduce using rule 19 (slstmt -> fileclose .)
    ATHAWA          reduce using rule 19 (slstmt -> fileclose .)
    BAJA            reduce using rule 19 (slstmt -> fileclose .)
    MAKA            reduce using rule 19 (slstmt -> fileclose .)
    BAISA           reduce using rule 19 (slstmt -> fileclose .)


state 65

    (86) expr -> reference .
    (100) reference -> reference . DOT reference
    (101) reference -> reference . KO reference

    PLUS            reduce using rule 86 (expr -> reference .)
    MINUS           reduce using rule 86 (expr -> reference .)
    TIMES           reduce using rule 86 (expr -> reference .)
    DIVIDE          reduce using rule 86 (expr -> reference .)
    MODULUS         reduce using rule 86 (expr -> reference .)
    POWER           reduce using rule 86 (expr -> reference .)
    GT              reduce using rule 86 (expr -> reference .)
    LT              reduce using rule 86 (expr -> reference .)
    GE              reduce using rule 86 (expr -> reference .)
    LE              reduce using rule 86 (expr -> reference .)
    EQ              reduce using rule 86 (expr -> reference .)
    NE              reduce using rule 86 (expr -> reference .)
    RA              reduce using rule 86 (expr -> reference .)
    WA              reduce using rule 86 (expr -> reference .)
    CHHA            reduce using rule 86 (expr -> reference .)
    CHHAINA         reduce using rule 86 (expr -> reference .)
    PATHAU          reduce using rule 86 (expr -> reference .)
    CHOTI           reduce using rule 86 (expr -> reference .)
    NEWLINE         reduce using rule 86 (expr -> reference .)
    $end            reduce using rule 86 (expr -> reference .)
    LEKHA           reduce using rule 86 (expr -> reference .)
    LEU             reduce using rule 86 (expr -> reference .)
    COMMA           reduce using rule 86 (expr -> reference .)
    RPARA           reduce using rule 86 (expr -> reference .)
    RGPARA          reduce using rule 86 (expr -> reference .)
    BHAE            reduce using rule 86 (expr -> reference .)
    error           reduce using rule 86 (expr -> reference .)
    KAKHA           reduce using rule 86 (expr -> reference .)
    TICHO           reduce using rule 86 (expr -> reference .)
    DIYE            reduce using rule 86 (expr -> reference .)
    ATHAWA          reduce using rule 86 (expr -> reference .)
    BAJA            reduce using rule 86 (expr -> reference .)
    MAKA            reduce using rule 86 (expr -> reference .)
    BAISA           reduce using rule 86 (expr -> reference .)
    COLON           reduce using rule 86 (expr -> reference .)
    DEKHI           reduce using rule 86 (expr -> reference .)
    DOT             shift and go to state 79
    KO              shift and go to state 82


state 66

    (110) expr -> MINUS expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    PLUS            reduce using rule 110 (expr -> MINUS expr .)
    MINUS           reduce using rule 110 (expr -> MINUS expr .)
    TIMES           reduce using rule 110 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 110 (expr -> MINUS expr .)
    MODULUS         reduce using rule 110 (expr -> MINUS expr .)
    POWER           reduce using rule 110 (expr -> MINUS expr .)
    GT              reduce using rule 110 (expr -> MINUS expr .)
    LT              reduce using rule 110 (expr -> MINUS expr .)
    GE              reduce using rule 110 (expr -> MINUS expr .)
    LE              reduce using rule 110 (expr -> MINUS expr .)
    EQ              reduce using rule 110 (expr -> MINUS expr .)
    NE              reduce using rule 110 (expr -> MINUS expr .)
    RA              reduce using rule 110 (expr -> MINUS expr .)
    WA              reduce using rule 110 (expr -> MINUS expr .)
    CHHA            reduce using rule 110 (expr -> MINUS expr .)
    CHHAINA         reduce using rule 110 (expr -> MINUS expr .)
    PATHAU          reduce using rule 110 (expr -> MINUS expr .)
    CHOTI           reduce using rule 110 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 110 (expr -> MINUS expr .)
    $end            reduce using rule 110 (expr -> MINUS expr .)
    LEKHA           reduce using rule 110 (expr -> MINUS expr .)
    LEU             reduce using rule 110 (expr -> MINUS expr .)
    COMMA           reduce using rule 110 (expr -> MINUS expr .)
    RPARA           reduce using rule 110 (expr -> MINUS expr .)
    RGPARA          reduce using rule 110 (expr -> MINUS expr .)
    BHAE            reduce using rule 110 (expr -> MINUS expr .)
    error           reduce using rule 110 (expr -> MINUS expr .)
    KAKHA           reduce using rule 110 (expr -> MINUS expr .)
    TICHO           reduce using rule 110 (expr -> MINUS expr .)
    DIYE            reduce using rule 110 (expr -> MINUS expr .)
    ATHAWA          reduce using rule 110 (expr -> MINUS expr .)
    BAJA            reduce using rule 110 (expr -> MINUS expr .)
    MAKA            reduce using rule 110 (expr -> MINUS expr .)
    BAISA           reduce using rule 110 (expr -> MINUS expr .)
    COLON           reduce using rule 110 (expr -> MINUS expr .)
    DEKHI           reduce using rule 110 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 109 ]
  ! DIVIDE          [ shift and go to state 108 ]
  ! MODULUS         [ shift and go to state 102 ]
  ! POWER           [ shift and go to state 101 ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 67

    (2) program -> program NEWLINE . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 121 (empty -> .)
    $end            reduce using rule 121 (empty -> .)
    KAKHA           reduce using rule 121 (empty -> .)
    TICHO           reduce using rule 121 (empty -> .)
    DIYE            reduce using rule 121 (empty -> .)
    error           reduce using rule 121 (empty -> .)
    ATHAWA          reduce using rule 121 (empty -> .)
    BAJA            reduce using rule 121 (empty -> .)
    MAKA            reduce using rule 121 (empty -> .)
    BAISA           reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 117
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 68

    (79) expr -> LPARA expr . RPARA
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    RPARA           shift and go to state 118
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 69

    (104) optindex -> LGPARA . aryexpr RGPARA
    (105) aryexpr -> . expr
    (106) aryexpr -> . expr COLON expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 119
    float                          shift and go to state 19
    functioncall                   shift and go to state 63
    boolean                        shift and go to state 34
    aryexpr                        shift and go to state 120
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 70

    (102) reference -> identifier optindex .
    (103) optindex -> optindex . LGPARA aryexpr RGPARA

    DOT             reduce using rule 102 (reference -> identifier optindex .)
    KO              reduce using rule 102 (reference -> identifier optindex .)
    PLUS            reduce using rule 102 (reference -> identifier optindex .)
    MINUS           reduce using rule 102 (reference -> identifier optindex .)
    TIMES           reduce using rule 102 (reference -> identifier optindex .)
    DIVIDE          reduce using rule 102 (reference -> identifier optindex .)
    MODULUS         reduce using rule 102 (reference -> identifier optindex .)
    POWER           reduce using rule 102 (reference -> identifier optindex .)
    GT              reduce using rule 102 (reference -> identifier optindex .)
    LT              reduce using rule 102 (reference -> identifier optindex .)
    GE              reduce using rule 102 (reference -> identifier optindex .)
    LE              reduce using rule 102 (reference -> identifier optindex .)
    EQ              reduce using rule 102 (reference -> identifier optindex .)
    NE              reduce using rule 102 (reference -> identifier optindex .)
    RA              reduce using rule 102 (reference -> identifier optindex .)
    WA              reduce using rule 102 (reference -> identifier optindex .)
    CHHA            reduce using rule 102 (reference -> identifier optindex .)
    CHHAINA         reduce using rule 102 (reference -> identifier optindex .)
    NEWLINE         reduce using rule 102 (reference -> identifier optindex .)
    $end            reduce using rule 102 (reference -> identifier optindex .)
    KAKHA           reduce using rule 102 (reference -> identifier optindex .)
    TICHO           reduce using rule 102 (reference -> identifier optindex .)
    DIYE            reduce using rule 102 (reference -> identifier optindex .)
    error           reduce using rule 102 (reference -> identifier optindex .)
    ATHAWA          reduce using rule 102 (reference -> identifier optindex .)
    BAJA            reduce using rule 102 (reference -> identifier optindex .)
    MAKA            reduce using rule 102 (reference -> identifier optindex .)
    BAISA           reduce using rule 102 (reference -> identifier optindex .)
    ASSIGNMENT      reduce using rule 102 (reference -> identifier optindex .)
    AI              reduce using rule 102 (reference -> identifier optindex .)
    SI              reduce using rule 102 (reference -> identifier optindex .)
    MI              reduce using rule 102 (reference -> identifier optindex .)
    DI              reduce using rule 102 (reference -> identifier optindex .)
    MA              reduce using rule 102 (reference -> identifier optindex .)
    BATA            reduce using rule 102 (reference -> identifier optindex .)
    BANDAGARA       reduce using rule 102 (reference -> identifier optindex .)
    DEKHAU          reduce using rule 102 (reference -> identifier optindex .)
    LUKAU           reduce using rule 102 (reference -> identifier optindex .)
    HATAU           reduce using rule 102 (reference -> identifier optindex .)
    BANAU           reduce using rule 102 (reference -> identifier optindex .)
    METAU           reduce using rule 102 (reference -> identifier optindex .)
    PATHAU          reduce using rule 102 (reference -> identifier optindex .)
    CHOTI           reduce using rule 102 (reference -> identifier optindex .)
    LEKHA           reduce using rule 102 (reference -> identifier optindex .)
    LEU             reduce using rule 102 (reference -> identifier optindex .)
    COMMA           reduce using rule 102 (reference -> identifier optindex .)
    BHAE            reduce using rule 102 (reference -> identifier optindex .)
    RPARA           reduce using rule 102 (reference -> identifier optindex .)
    RGPARA          reduce using rule 102 (reference -> identifier optindex .)
    COLON           reduce using rule 102 (reference -> identifier optindex .)
    DEKHI           reduce using rule 102 (reference -> identifier optindex .)
    LGPARA          shift and go to state 121


state 71

    (69) variableExpr -> empty .

    LEKHA           reduce using rule 69 (variableExpr -> empty .)
    LEU             reduce using rule 69 (variableExpr -> empty .)
    COMMA           reduce using rule 69 (variableExpr -> empty .)
    RPARA           reduce using rule 69 (variableExpr -> empty .)
    NEWLINE         reduce using rule 69 (variableExpr -> empty .)
    $end            reduce using rule 69 (variableExpr -> empty .)
    KAKHA           reduce using rule 69 (variableExpr -> empty .)
    TICHO           reduce using rule 69 (variableExpr -> empty .)
    DIYE            reduce using rule 69 (variableExpr -> empty .)
    error           reduce using rule 69 (variableExpr -> empty .)
    ATHAWA          reduce using rule 69 (variableExpr -> empty .)
    BAJA            reduce using rule 69 (variableExpr -> empty .)
    MAKA            reduce using rule 69 (variableExpr -> empty .)
    BAISA           reduce using rule 69 (variableExpr -> empty .)
    RGPARA          reduce using rule 69 (variableExpr -> empty .)


state 72

    (68) variableExpr -> expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    LEKHA           reduce using rule 68 (variableExpr -> expr .)
    COMMA           reduce using rule 68 (variableExpr -> expr .)
    RPARA           reduce using rule 68 (variableExpr -> expr .)
    NEWLINE         reduce using rule 68 (variableExpr -> expr .)
    $end            reduce using rule 68 (variableExpr -> expr .)
    KAKHA           reduce using rule 68 (variableExpr -> expr .)
    TICHO           reduce using rule 68 (variableExpr -> expr .)
    DIYE            reduce using rule 68 (variableExpr -> expr .)
    error           reduce using rule 68 (variableExpr -> expr .)
    ATHAWA          reduce using rule 68 (variableExpr -> expr .)
    BAJA            reduce using rule 68 (variableExpr -> expr .)
    MAKA            reduce using rule 68 (variableExpr -> expr .)
    BAISA           reduce using rule 68 (variableExpr -> expr .)
    RGPARA          reduce using rule 68 (variableExpr -> expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 73

    (97) array -> LGPARA variableExpr . RGPARA
    (67) variableExpr -> variableExpr . COMMA expr

    RGPARA          shift and go to state 122
    COMMA           shift and go to state 90


state 74

    (63) graphicclose -> reference HATAU .

    NEWLINE         reduce using rule 63 (graphicclose -> reference HATAU .)
    $end            reduce using rule 63 (graphicclose -> reference HATAU .)
    KAKHA           reduce using rule 63 (graphicclose -> reference HATAU .)
    TICHO           reduce using rule 63 (graphicclose -> reference HATAU .)
    DIYE            reduce using rule 63 (graphicclose -> reference HATAU .)
    error           reduce using rule 63 (graphicclose -> reference HATAU .)
    ATHAWA          reduce using rule 63 (graphicclose -> reference HATAU .)
    BAJA            reduce using rule 63 (graphicclose -> reference HATAU .)
    MAKA            reduce using rule 63 (graphicclose -> reference HATAU .)
    BAISA           reduce using rule 63 (graphicclose -> reference HATAU .)


state 75

    (34) incremental -> reference DI . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 123
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 76

    (27) assignment -> reference ASSIGNMENT . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 124
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 77

    (62) graphichide -> reference LUKAU .

    MAKA            reduce using rule 62 (graphichide -> reference LUKAU .)
    NEWLINE         reduce using rule 62 (graphichide -> reference LUKAU .)
    BAJA            reduce using rule 62 (graphichide -> reference LUKAU .)
    $end            reduce using rule 62 (graphichide -> reference LUKAU .)
    KAKHA           reduce using rule 62 (graphichide -> reference LUKAU .)
    TICHO           reduce using rule 62 (graphichide -> reference LUKAU .)
    DIYE            reduce using rule 62 (graphichide -> reference LUKAU .)
    error           reduce using rule 62 (graphichide -> reference LUKAU .)
    ATHAWA          reduce using rule 62 (graphichide -> reference LUKAU .)
    BAISA           reduce using rule 62 (graphichide -> reference LUKAU .)


state 78

    (60) fileclose -> reference BANDAGARA .

    NEWLINE         reduce using rule 60 (fileclose -> reference BANDAGARA .)
    $end            reduce using rule 60 (fileclose -> reference BANDAGARA .)
    KAKHA           reduce using rule 60 (fileclose -> reference BANDAGARA .)
    TICHO           reduce using rule 60 (fileclose -> reference BANDAGARA .)
    DIYE            reduce using rule 60 (fileclose -> reference BANDAGARA .)
    error           reduce using rule 60 (fileclose -> reference BANDAGARA .)
    ATHAWA          reduce using rule 60 (fileclose -> reference BANDAGARA .)
    BAJA            reduce using rule 60 (fileclose -> reference BANDAGARA .)
    MAKA            reduce using rule 60 (fileclose -> reference BANDAGARA .)
    BAISA           reduce using rule 60 (fileclose -> reference BANDAGARA .)


state 79

    (100) reference -> reference DOT . reference
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MERO            shift and go to state 35
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    functioncall                   shift and go to state 63
    reference                      shift and go to state 125

state 80

    (64) graphicupdate -> reference BANAU .

    BAISA           reduce using rule 64 (graphicupdate -> reference BANAU .)
    NEWLINE         reduce using rule 64 (graphicupdate -> reference BANAU .)
    DIYE            reduce using rule 64 (graphicupdate -> reference BANAU .)
    ATHAWA          reduce using rule 64 (graphicupdate -> reference BANAU .)
    $end            reduce using rule 64 (graphicupdate -> reference BANAU .)
    KAKHA           reduce using rule 64 (graphicupdate -> reference BANAU .)
    TICHO           reduce using rule 64 (graphicupdate -> reference BANAU .)
    error           reduce using rule 64 (graphicupdate -> reference BANAU .)
    BAJA            reduce using rule 64 (graphicupdate -> reference BANAU .)
    MAKA            reduce using rule 64 (graphicupdate -> reference BANAU .)


state 81

    (59) fileread -> reference BATA . reference LEU
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MERO            shift and go to state 35
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    functioncall                   shift and go to state 63
    reference                      shift and go to state 126

state 82

    (101) reference -> reference KO . reference
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MERO            shift and go to state 35
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    functioncall                   shift and go to state 63
    reference                      shift and go to state 127

state 83

    (31) incremental -> reference AI . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 128
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 84

    (65) graphicclear -> reference METAU .

    NEWLINE         reduce using rule 65 (graphicclear -> reference METAU .)
    ATHAWA          reduce using rule 65 (graphicclear -> reference METAU .)
    DIYE            reduce using rule 65 (graphicclear -> reference METAU .)
    error           reduce using rule 65 (graphicclear -> reference METAU .)
    MAKA            reduce using rule 65 (graphicclear -> reference METAU .)
    $end            reduce using rule 65 (graphicclear -> reference METAU .)
    KAKHA           reduce using rule 65 (graphicclear -> reference METAU .)
    TICHO           reduce using rule 65 (graphicclear -> reference METAU .)
    BAJA            reduce using rule 65 (graphicclear -> reference METAU .)
    BAISA           reduce using rule 65 (graphicclear -> reference METAU .)


state 85

    (57) filewriteln -> reference MA . variableExpr LEKHA
    (58) filewrite -> reference MA . variableExpr LEKHA SEMICOLON
    (66) graphicdraw -> reference MA . string KORA variableExpr
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (93) string -> . STRING
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (121) empty -> .
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    STRING          shift and go to state 58
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    LEKHA           reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 129
    reference                      shift and go to state 65
    expr                           shift and go to state 72
    float                          shift and go to state 19
    variableExpr                   shift and go to state 130
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36
    empty                          shift and go to state 71

state 86

    (61) graphicshow -> reference DEKHAU .

    NEWLINE         reduce using rule 61 (graphicshow -> reference DEKHAU .)
    $end            reduce using rule 61 (graphicshow -> reference DEKHAU .)
    KAKHA           reduce using rule 61 (graphicshow -> reference DEKHAU .)
    TICHO           reduce using rule 61 (graphicshow -> reference DEKHAU .)
    DIYE            reduce using rule 61 (graphicshow -> reference DEKHAU .)
    error           reduce using rule 61 (graphicshow -> reference DEKHAU .)
    ATHAWA          reduce using rule 61 (graphicshow -> reference DEKHAU .)
    BAJA            reduce using rule 61 (graphicshow -> reference DEKHAU .)
    MAKA            reduce using rule 61 (graphicshow -> reference DEKHAU .)
    BAISA           reduce using rule 61 (graphicshow -> reference DEKHAU .)


state 87

    (33) incremental -> reference MI . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 131
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 88

    (32) incremental -> reference SI . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 132
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 89

    (38) slif -> YEDI expr . BHAE slstmt ATHAWA slstmt
    (39) slif -> YEDI expr . BHAE slstmt
    (122) slif -> YEDI expr . error slstmt
    (123) slif -> YEDI expr . error ATHAWA slstmt
    (46) mlif -> YEDI expr . BHAE NEWLINE program DIYE
    (47) mlif -> YEDI expr . BHAE NEWLINE program optelse DIYE
    (124) mlif -> YEDI expr . error NEWLINE program DIYE
    (125) mlif -> YEDI expr . error NEWLINE program optelse DIYE
    (128) mlif -> YEDI expr . BHAE NEWLINE program error
    (129) mlif -> YEDI expr . BHAE NEWLINE program optelse error
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    BHAE            shift and go to state 133
    error           shift and go to state 134
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 90

    (67) variableExpr -> variableExpr COMMA . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 135
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 91

    (30) input -> variableExpr LEU .

    NEWLINE         reduce using rule 30 (input -> variableExpr LEU .)
    $end            reduce using rule 30 (input -> variableExpr LEU .)
    KAKHA           reduce using rule 30 (input -> variableExpr LEU .)
    TICHO           reduce using rule 30 (input -> variableExpr LEU .)
    DIYE            reduce using rule 30 (input -> variableExpr LEU .)
    error           reduce using rule 30 (input -> variableExpr LEU .)
    ATHAWA          reduce using rule 30 (input -> variableExpr LEU .)
    BAJA            reduce using rule 30 (input -> variableExpr LEU .)
    MAKA            reduce using rule 30 (input -> variableExpr LEU .)
    BAISA           reduce using rule 30 (input -> variableExpr LEU .)


state 92

    (28) print -> variableExpr LEKHA . SEMICOLON
    (29) print -> variableExpr LEKHA .

    SEMICOLON       shift and go to state 136
    MAKA            reduce using rule 29 (print -> variableExpr LEKHA .)
    NEWLINE         reduce using rule 29 (print -> variableExpr LEKHA .)
    DIYE            reduce using rule 29 (print -> variableExpr LEKHA .)
    error           reduce using rule 29 (print -> variableExpr LEKHA .)
    $end            reduce using rule 29 (print -> variableExpr LEKHA .)
    KAKHA           reduce using rule 29 (print -> variableExpr LEKHA .)
    TICHO           reduce using rule 29 (print -> variableExpr LEKHA .)
    ATHAWA          reduce using rule 29 (print -> variableExpr LEKHA .)
    BAJA            reduce using rule 29 (print -> variableExpr LEKHA .)
    BAISA           reduce using rule 29 (print -> variableExpr LEKHA .)


state 93

    (107) reference -> MERO reference .
    (100) reference -> reference . DOT reference
    (101) reference -> reference . KO reference

    DOT             reduce using rule 107 (reference -> MERO reference .)
    KO              reduce using rule 107 (reference -> MERO reference .)
    PLUS            reduce using rule 107 (reference -> MERO reference .)
    MINUS           reduce using rule 107 (reference -> MERO reference .)
    TIMES           reduce using rule 107 (reference -> MERO reference .)
    DIVIDE          reduce using rule 107 (reference -> MERO reference .)
    MODULUS         reduce using rule 107 (reference -> MERO reference .)
    POWER           reduce using rule 107 (reference -> MERO reference .)
    GT              reduce using rule 107 (reference -> MERO reference .)
    LT              reduce using rule 107 (reference -> MERO reference .)
    GE              reduce using rule 107 (reference -> MERO reference .)
    LE              reduce using rule 107 (reference -> MERO reference .)
    EQ              reduce using rule 107 (reference -> MERO reference .)
    NE              reduce using rule 107 (reference -> MERO reference .)
    RA              reduce using rule 107 (reference -> MERO reference .)
    WA              reduce using rule 107 (reference -> MERO reference .)
    CHHA            reduce using rule 107 (reference -> MERO reference .)
    CHHAINA         reduce using rule 107 (reference -> MERO reference .)
    NEWLINE         reduce using rule 107 (reference -> MERO reference .)
    $end            reduce using rule 107 (reference -> MERO reference .)
    KAKHA           reduce using rule 107 (reference -> MERO reference .)
    TICHO           reduce using rule 107 (reference -> MERO reference .)
    DIYE            reduce using rule 107 (reference -> MERO reference .)
    error           reduce using rule 107 (reference -> MERO reference .)
    ATHAWA          reduce using rule 107 (reference -> MERO reference .)
    BAJA            reduce using rule 107 (reference -> MERO reference .)
    MAKA            reduce using rule 107 (reference -> MERO reference .)
    BAISA           reduce using rule 107 (reference -> MERO reference .)
    ASSIGNMENT      reduce using rule 107 (reference -> MERO reference .)
    AI              reduce using rule 107 (reference -> MERO reference .)
    SI              reduce using rule 107 (reference -> MERO reference .)
    MI              reduce using rule 107 (reference -> MERO reference .)
    DI              reduce using rule 107 (reference -> MERO reference .)
    MA              reduce using rule 107 (reference -> MERO reference .)
    BATA            reduce using rule 107 (reference -> MERO reference .)
    BANDAGARA       reduce using rule 107 (reference -> MERO reference .)
    DEKHAU          reduce using rule 107 (reference -> MERO reference .)
    LUKAU           reduce using rule 107 (reference -> MERO reference .)
    HATAU           reduce using rule 107 (reference -> MERO reference .)
    BANAU           reduce using rule 107 (reference -> MERO reference .)
    METAU           reduce using rule 107 (reference -> MERO reference .)
    PATHAU          reduce using rule 107 (reference -> MERO reference .)
    CHOTI           reduce using rule 107 (reference -> MERO reference .)
    LEKHA           reduce using rule 107 (reference -> MERO reference .)
    LEU             reduce using rule 107 (reference -> MERO reference .)
    COMMA           reduce using rule 107 (reference -> MERO reference .)
    BHAE            reduce using rule 107 (reference -> MERO reference .)
    RPARA           reduce using rule 107 (reference -> MERO reference .)
    RGPARA          reduce using rule 107 (reference -> MERO reference .)
    COLON           reduce using rule 107 (reference -> MERO reference .)
    DEKHI           reduce using rule 107 (reference -> MERO reference .)

  ! DOT             [ shift and go to state 79 ]
  ! KO              [ shift and go to state 82 ]


state 94

    (55) function -> KAAM IDENTIFIER . LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> KAAM IDENTIFIER . LPARA error RPARA NEWLINE program MAKA

    LPARA           shift and go to state 137


state 95

    (56) class -> KHAKA IDENTIFIER . NEWLINE program KAKHA

    NEWLINE         shift and go to state 138


state 96

    (109) functioncall -> IDENTIFIER LPARA . variableExpr RPARA
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (121) empty -> .
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    RPARA           reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 72
    float                          shift and go to state 19
    variableExpr                   shift and go to state 139
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36
    empty                          shift and go to state 71

state 97

    (118) expr -> expr WA . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 140
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 98

    (120) expr -> expr CHHAINA .

    PLUS            reduce using rule 120 (expr -> expr CHHAINA .)
    MINUS           reduce using rule 120 (expr -> expr CHHAINA .)
    TIMES           reduce using rule 120 (expr -> expr CHHAINA .)
    DIVIDE          reduce using rule 120 (expr -> expr CHHAINA .)
    MODULUS         reduce using rule 120 (expr -> expr CHHAINA .)
    POWER           reduce using rule 120 (expr -> expr CHHAINA .)
    GT              reduce using rule 120 (expr -> expr CHHAINA .)
    LT              reduce using rule 120 (expr -> expr CHHAINA .)
    GE              reduce using rule 120 (expr -> expr CHHAINA .)
    LE              reduce using rule 120 (expr -> expr CHHAINA .)
    EQ              reduce using rule 120 (expr -> expr CHHAINA .)
    NE              reduce using rule 120 (expr -> expr CHHAINA .)
    RA              reduce using rule 120 (expr -> expr CHHAINA .)
    WA              reduce using rule 120 (expr -> expr CHHAINA .)
    CHHA            reduce using rule 120 (expr -> expr CHHAINA .)
    CHHAINA         reduce using rule 120 (expr -> expr CHHAINA .)
    PATHAU          reduce using rule 120 (expr -> expr CHHAINA .)
    CHOTI           reduce using rule 120 (expr -> expr CHHAINA .)
    NEWLINE         reduce using rule 120 (expr -> expr CHHAINA .)
    $end            reduce using rule 120 (expr -> expr CHHAINA .)
    LEKHA           reduce using rule 120 (expr -> expr CHHAINA .)
    LEU             reduce using rule 120 (expr -> expr CHHAINA .)
    COMMA           reduce using rule 120 (expr -> expr CHHAINA .)
    RPARA           reduce using rule 120 (expr -> expr CHHAINA .)
    RGPARA          reduce using rule 120 (expr -> expr CHHAINA .)
    BHAE            reduce using rule 120 (expr -> expr CHHAINA .)
    error           reduce using rule 120 (expr -> expr CHHAINA .)
    KAKHA           reduce using rule 120 (expr -> expr CHHAINA .)
    TICHO           reduce using rule 120 (expr -> expr CHHAINA .)
    DIYE            reduce using rule 120 (expr -> expr CHHAINA .)
    ATHAWA          reduce using rule 120 (expr -> expr CHHAINA .)
    BAJA            reduce using rule 120 (expr -> expr CHHAINA .)
    MAKA            reduce using rule 120 (expr -> expr CHHAINA .)
    BAISA           reduce using rule 120 (expr -> expr CHHAINA .)
    COLON           reduce using rule 120 (expr -> expr CHHAINA .)
    DEKHI           reduce using rule 120 (expr -> expr CHHAINA .)


state 99

    (74) expr -> expr MINUS . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 141
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 100

    (114) expr -> expr LE . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 142
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 101

    (78) expr -> expr POWER . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 143
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 102

    (77) expr -> expr MODULUS . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 144
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 103

    (116) expr -> expr NE . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 145
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 104

    (112) expr -> expr LT . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 146
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 105

    (73) expr -> expr PLUS . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 147
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 106

    (117) expr -> expr RA . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 148
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 107

    (111) expr -> expr GT . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 149
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 108

    (76) expr -> expr DIVIDE . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 150
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 109

    (75) expr -> expr TIMES . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 151
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 110

    (35) return -> expr PATHAU .

    DIYE            reduce using rule 35 (return -> expr PATHAU .)
    NEWLINE         reduce using rule 35 (return -> expr PATHAU .)
    ATHAWA          reduce using rule 35 (return -> expr PATHAU .)
    $end            reduce using rule 35 (return -> expr PATHAU .)
    KAKHA           reduce using rule 35 (return -> expr PATHAU .)
    TICHO           reduce using rule 35 (return -> expr PATHAU .)
    error           reduce using rule 35 (return -> expr PATHAU .)
    BAJA            reduce using rule 35 (return -> expr PATHAU .)
    MAKA            reduce using rule 35 (return -> expr PATHAU .)
    BAISA           reduce using rule 35 (return -> expr PATHAU .)


state 111

    (113) expr -> expr GE . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 152
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 112

    (54) repeatloop -> expr CHOTI . NEWLINE program TICHO

    NEWLINE         shift and go to state 153


state 113

    (115) expr -> expr EQ . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 154
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 114

    (119) expr -> expr CHHA .

    PLUS            reduce using rule 119 (expr -> expr CHHA .)
    MINUS           reduce using rule 119 (expr -> expr CHHA .)
    TIMES           reduce using rule 119 (expr -> expr CHHA .)
    DIVIDE          reduce using rule 119 (expr -> expr CHHA .)
    MODULUS         reduce using rule 119 (expr -> expr CHHA .)
    POWER           reduce using rule 119 (expr -> expr CHHA .)
    GT              reduce using rule 119 (expr -> expr CHHA .)
    LT              reduce using rule 119 (expr -> expr CHHA .)
    GE              reduce using rule 119 (expr -> expr CHHA .)
    LE              reduce using rule 119 (expr -> expr CHHA .)
    EQ              reduce using rule 119 (expr -> expr CHHA .)
    NE              reduce using rule 119 (expr -> expr CHHA .)
    RA              reduce using rule 119 (expr -> expr CHHA .)
    WA              reduce using rule 119 (expr -> expr CHHA .)
    CHHA            reduce using rule 119 (expr -> expr CHHA .)
    CHHAINA         reduce using rule 119 (expr -> expr CHHA .)
    PATHAU          reduce using rule 119 (expr -> expr CHHA .)
    CHOTI           reduce using rule 119 (expr -> expr CHHA .)
    NEWLINE         reduce using rule 119 (expr -> expr CHHA .)
    $end            reduce using rule 119 (expr -> expr CHHA .)
    LEKHA           reduce using rule 119 (expr -> expr CHHA .)
    LEU             reduce using rule 119 (expr -> expr CHHA .)
    COMMA           reduce using rule 119 (expr -> expr CHHA .)
    RPARA           reduce using rule 119 (expr -> expr CHHA .)
    RGPARA          reduce using rule 119 (expr -> expr CHHA .)
    BHAE            reduce using rule 119 (expr -> expr CHHA .)
    error           reduce using rule 119 (expr -> expr CHHA .)
    KAKHA           reduce using rule 119 (expr -> expr CHHA .)
    TICHO           reduce using rule 119 (expr -> expr CHHA .)
    DIYE            reduce using rule 119 (expr -> expr CHHA .)
    ATHAWA          reduce using rule 119 (expr -> expr CHHA .)
    BAJA            reduce using rule 119 (expr -> expr CHHA .)
    MAKA            reduce using rule 119 (expr -> expr CHHA .)
    BAISA           reduce using rule 119 (expr -> expr CHHA .)
    COLON           reduce using rule 119 (expr -> expr CHHA .)
    DEKHI           reduce using rule 119 (expr -> expr CHHA .)


state 115

    (53) whileloop -> JABA SAMMA . expr NEWLINE program BAJA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    boolean                        shift and go to state 34
    expr                           shift and go to state 155
    float                          shift and go to state 19
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 116

    (51) forloop -> SABAI reference . ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> SABAI reference . ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (100) reference -> reference . DOT reference
    (101) reference -> reference . KO reference

    ASSIGNMENT      shift and go to state 156
    DOT             shift and go to state 79
    KO              shift and go to state 82


state 117

    (2) program -> program NEWLINE stmt .

    BAISA           reduce using rule 2 (program -> program NEWLINE stmt .)
    NEWLINE         reduce using rule 2 (program -> program NEWLINE stmt .)
    MAKA            reduce using rule 2 (program -> program NEWLINE stmt .)
    DIYE            reduce using rule 2 (program -> program NEWLINE stmt .)
    error           reduce using rule 2 (program -> program NEWLINE stmt .)
    ATHAWA          reduce using rule 2 (program -> program NEWLINE stmt .)
    TICHO           reduce using rule 2 (program -> program NEWLINE stmt .)
    $end            reduce using rule 2 (program -> program NEWLINE stmt .)
    BAJA            reduce using rule 2 (program -> program NEWLINE stmt .)
    KAKHA           reduce using rule 2 (program -> program NEWLINE stmt .)


state 118

    (79) expr -> LPARA expr RPARA .

    PLUS            reduce using rule 79 (expr -> LPARA expr RPARA .)
    MINUS           reduce using rule 79 (expr -> LPARA expr RPARA .)
    TIMES           reduce using rule 79 (expr -> LPARA expr RPARA .)
    DIVIDE          reduce using rule 79 (expr -> LPARA expr RPARA .)
    MODULUS         reduce using rule 79 (expr -> LPARA expr RPARA .)
    POWER           reduce using rule 79 (expr -> LPARA expr RPARA .)
    GT              reduce using rule 79 (expr -> LPARA expr RPARA .)
    LT              reduce using rule 79 (expr -> LPARA expr RPARA .)
    GE              reduce using rule 79 (expr -> LPARA expr RPARA .)
    LE              reduce using rule 79 (expr -> LPARA expr RPARA .)
    EQ              reduce using rule 79 (expr -> LPARA expr RPARA .)
    NE              reduce using rule 79 (expr -> LPARA expr RPARA .)
    RA              reduce using rule 79 (expr -> LPARA expr RPARA .)
    WA              reduce using rule 79 (expr -> LPARA expr RPARA .)
    CHHA            reduce using rule 79 (expr -> LPARA expr RPARA .)
    CHHAINA         reduce using rule 79 (expr -> LPARA expr RPARA .)
    PATHAU          reduce using rule 79 (expr -> LPARA expr RPARA .)
    CHOTI           reduce using rule 79 (expr -> LPARA expr RPARA .)
    NEWLINE         reduce using rule 79 (expr -> LPARA expr RPARA .)
    $end            reduce using rule 79 (expr -> LPARA expr RPARA .)
    LEKHA           reduce using rule 79 (expr -> LPARA expr RPARA .)
    LEU             reduce using rule 79 (expr -> LPARA expr RPARA .)
    COMMA           reduce using rule 79 (expr -> LPARA expr RPARA .)
    RPARA           reduce using rule 79 (expr -> LPARA expr RPARA .)
    RGPARA          reduce using rule 79 (expr -> LPARA expr RPARA .)
    BHAE            reduce using rule 79 (expr -> LPARA expr RPARA .)
    error           reduce using rule 79 (expr -> LPARA expr RPARA .)
    KAKHA           reduce using rule 79 (expr -> LPARA expr RPARA .)
    TICHO           reduce using rule 79 (expr -> LPARA expr RPARA .)
    DIYE            reduce using rule 79 (expr -> LPARA expr RPARA .)
    ATHAWA          reduce using rule 79 (expr -> LPARA expr RPARA .)
    BAJA            reduce using rule 79 (expr -> LPARA expr RPARA .)
    MAKA            reduce using rule 79 (expr -> LPARA expr RPARA .)
    BAISA           reduce using rule 79 (expr -> LPARA expr RPARA .)
    COLON           reduce using rule 79 (expr -> LPARA expr RPARA .)
    DEKHI           reduce using rule 79 (expr -> LPARA expr RPARA .)


state 119

    (105) aryexpr -> expr .
    (106) aryexpr -> expr . COLON expr
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    RGPARA          reduce using rule 105 (aryexpr -> expr .)
    COLON           shift and go to state 157
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 120

    (104) optindex -> LGPARA aryexpr . RGPARA

    RGPARA          shift and go to state 158


state 121

    (103) optindex -> optindex LGPARA . aryexpr RGPARA
    (105) aryexpr -> . expr
    (106) aryexpr -> . expr COLON expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 119
    array                          shift and go to state 36
    float                          shift and go to state 19
    functioncall                   shift and go to state 63
    boolean                        shift and go to state 34
    aryexpr                        shift and go to state 159
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53

state 122

    (97) array -> LGPARA variableExpr RGPARA .

    PLUS            reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    MINUS           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    TIMES           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    DIVIDE          reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    MODULUS         reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    POWER           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    GT              reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    LT              reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    GE              reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    LE              reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    EQ              reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    NE              reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    RA              reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    WA              reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    CHHA            reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    CHHAINA         reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    NEWLINE         reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    $end            reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    KAKHA           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    TICHO           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    DIYE            reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    error           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    ATHAWA          reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    BAJA            reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    MAKA            reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    BAISA           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    PATHAU          reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    CHOTI           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    LEKHA           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    LEU             reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    COMMA           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    RGPARA          reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    RPARA           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    BHAE            reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    COLON           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)
    DEKHI           reduce using rule 97 (array -> LGPARA variableExpr RGPARA .)


state 123

    (34) incremental -> reference DI expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    MAKA            reduce using rule 34 (incremental -> reference DI expr .)
    NEWLINE         reduce using rule 34 (incremental -> reference DI expr .)
    ATHAWA          reduce using rule 34 (incremental -> reference DI expr .)
    DIYE            reduce using rule 34 (incremental -> reference DI expr .)
    error           reduce using rule 34 (incremental -> reference DI expr .)
    $end            reduce using rule 34 (incremental -> reference DI expr .)
    KAKHA           reduce using rule 34 (incremental -> reference DI expr .)
    TICHO           reduce using rule 34 (incremental -> reference DI expr .)
    BAJA            reduce using rule 34 (incremental -> reference DI expr .)
    BAISA           reduce using rule 34 (incremental -> reference DI expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 124

    (27) assignment -> reference ASSIGNMENT expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    ATHAWA          reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    DIYE            reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    error           reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    $end            reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    KAKHA           reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    TICHO           reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    BAJA            reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    MAKA            reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    BAISA           reduce using rule 27 (assignment -> reference ASSIGNMENT expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 125

    (100) reference -> reference DOT reference .
    (100) reference -> reference . DOT reference
    (101) reference -> reference . KO reference

    DOT             reduce using rule 100 (reference -> reference DOT reference .)
    KO              reduce using rule 100 (reference -> reference DOT reference .)
    PLUS            reduce using rule 100 (reference -> reference DOT reference .)
    MINUS           reduce using rule 100 (reference -> reference DOT reference .)
    TIMES           reduce using rule 100 (reference -> reference DOT reference .)
    DIVIDE          reduce using rule 100 (reference -> reference DOT reference .)
    MODULUS         reduce using rule 100 (reference -> reference DOT reference .)
    POWER           reduce using rule 100 (reference -> reference DOT reference .)
    GT              reduce using rule 100 (reference -> reference DOT reference .)
    LT              reduce using rule 100 (reference -> reference DOT reference .)
    GE              reduce using rule 100 (reference -> reference DOT reference .)
    LE              reduce using rule 100 (reference -> reference DOT reference .)
    EQ              reduce using rule 100 (reference -> reference DOT reference .)
    NE              reduce using rule 100 (reference -> reference DOT reference .)
    RA              reduce using rule 100 (reference -> reference DOT reference .)
    WA              reduce using rule 100 (reference -> reference DOT reference .)
    CHHA            reduce using rule 100 (reference -> reference DOT reference .)
    CHHAINA         reduce using rule 100 (reference -> reference DOT reference .)
    NEWLINE         reduce using rule 100 (reference -> reference DOT reference .)
    $end            reduce using rule 100 (reference -> reference DOT reference .)
    KAKHA           reduce using rule 100 (reference -> reference DOT reference .)
    TICHO           reduce using rule 100 (reference -> reference DOT reference .)
    DIYE            reduce using rule 100 (reference -> reference DOT reference .)
    error           reduce using rule 100 (reference -> reference DOT reference .)
    ATHAWA          reduce using rule 100 (reference -> reference DOT reference .)
    BAJA            reduce using rule 100 (reference -> reference DOT reference .)
    MAKA            reduce using rule 100 (reference -> reference DOT reference .)
    BAISA           reduce using rule 100 (reference -> reference DOT reference .)
    ASSIGNMENT      reduce using rule 100 (reference -> reference DOT reference .)
    AI              reduce using rule 100 (reference -> reference DOT reference .)
    SI              reduce using rule 100 (reference -> reference DOT reference .)
    MI              reduce using rule 100 (reference -> reference DOT reference .)
    DI              reduce using rule 100 (reference -> reference DOT reference .)
    MA              reduce using rule 100 (reference -> reference DOT reference .)
    BATA            reduce using rule 100 (reference -> reference DOT reference .)
    BANDAGARA       reduce using rule 100 (reference -> reference DOT reference .)
    DEKHAU          reduce using rule 100 (reference -> reference DOT reference .)
    LUKAU           reduce using rule 100 (reference -> reference DOT reference .)
    HATAU           reduce using rule 100 (reference -> reference DOT reference .)
    BANAU           reduce using rule 100 (reference -> reference DOT reference .)
    METAU           reduce using rule 100 (reference -> reference DOT reference .)
    PATHAU          reduce using rule 100 (reference -> reference DOT reference .)
    CHOTI           reduce using rule 100 (reference -> reference DOT reference .)
    LEKHA           reduce using rule 100 (reference -> reference DOT reference .)
    LEU             reduce using rule 100 (reference -> reference DOT reference .)
    COMMA           reduce using rule 100 (reference -> reference DOT reference .)
    BHAE            reduce using rule 100 (reference -> reference DOT reference .)
    RPARA           reduce using rule 100 (reference -> reference DOT reference .)
    RGPARA          reduce using rule 100 (reference -> reference DOT reference .)
    COLON           reduce using rule 100 (reference -> reference DOT reference .)
    DEKHI           reduce using rule 100 (reference -> reference DOT reference .)

  ! DOT             [ shift and go to state 79 ]
  ! KO              [ shift and go to state 82 ]


state 126

    (59) fileread -> reference BATA reference . LEU
    (100) reference -> reference . DOT reference
    (101) reference -> reference . KO reference

    LEU             shift and go to state 160
    DOT             shift and go to state 79
    KO              shift and go to state 82


state 127

    (101) reference -> reference KO reference .
    (100) reference -> reference . DOT reference
    (101) reference -> reference . KO reference

    DOT             reduce using rule 101 (reference -> reference KO reference .)
    KO              reduce using rule 101 (reference -> reference KO reference .)
    PLUS            reduce using rule 101 (reference -> reference KO reference .)
    MINUS           reduce using rule 101 (reference -> reference KO reference .)
    TIMES           reduce using rule 101 (reference -> reference KO reference .)
    DIVIDE          reduce using rule 101 (reference -> reference KO reference .)
    MODULUS         reduce using rule 101 (reference -> reference KO reference .)
    POWER           reduce using rule 101 (reference -> reference KO reference .)
    GT              reduce using rule 101 (reference -> reference KO reference .)
    LT              reduce using rule 101 (reference -> reference KO reference .)
    GE              reduce using rule 101 (reference -> reference KO reference .)
    LE              reduce using rule 101 (reference -> reference KO reference .)
    EQ              reduce using rule 101 (reference -> reference KO reference .)
    NE              reduce using rule 101 (reference -> reference KO reference .)
    RA              reduce using rule 101 (reference -> reference KO reference .)
    WA              reduce using rule 101 (reference -> reference KO reference .)
    CHHA            reduce using rule 101 (reference -> reference KO reference .)
    CHHAINA         reduce using rule 101 (reference -> reference KO reference .)
    NEWLINE         reduce using rule 101 (reference -> reference KO reference .)
    $end            reduce using rule 101 (reference -> reference KO reference .)
    KAKHA           reduce using rule 101 (reference -> reference KO reference .)
    TICHO           reduce using rule 101 (reference -> reference KO reference .)
    DIYE            reduce using rule 101 (reference -> reference KO reference .)
    error           reduce using rule 101 (reference -> reference KO reference .)
    ATHAWA          reduce using rule 101 (reference -> reference KO reference .)
    BAJA            reduce using rule 101 (reference -> reference KO reference .)
    MAKA            reduce using rule 101 (reference -> reference KO reference .)
    BAISA           reduce using rule 101 (reference -> reference KO reference .)
    ASSIGNMENT      reduce using rule 101 (reference -> reference KO reference .)
    AI              reduce using rule 101 (reference -> reference KO reference .)
    SI              reduce using rule 101 (reference -> reference KO reference .)
    MI              reduce using rule 101 (reference -> reference KO reference .)
    DI              reduce using rule 101 (reference -> reference KO reference .)
    MA              reduce using rule 101 (reference -> reference KO reference .)
    BATA            reduce using rule 101 (reference -> reference KO reference .)
    BANDAGARA       reduce using rule 101 (reference -> reference KO reference .)
    DEKHAU          reduce using rule 101 (reference -> reference KO reference .)
    LUKAU           reduce using rule 101 (reference -> reference KO reference .)
    HATAU           reduce using rule 101 (reference -> reference KO reference .)
    BANAU           reduce using rule 101 (reference -> reference KO reference .)
    METAU           reduce using rule 101 (reference -> reference KO reference .)
    PATHAU          reduce using rule 101 (reference -> reference KO reference .)
    CHOTI           reduce using rule 101 (reference -> reference KO reference .)
    LEKHA           reduce using rule 101 (reference -> reference KO reference .)
    LEU             reduce using rule 101 (reference -> reference KO reference .)
    COMMA           reduce using rule 101 (reference -> reference KO reference .)
    BHAE            reduce using rule 101 (reference -> reference KO reference .)
    RPARA           reduce using rule 101 (reference -> reference KO reference .)
    RGPARA          reduce using rule 101 (reference -> reference KO reference .)
    COLON           reduce using rule 101 (reference -> reference KO reference .)
    DEKHI           reduce using rule 101 (reference -> reference KO reference .)

  ! DOT             [ shift and go to state 79 ]
  ! KO              [ shift and go to state 82 ]


state 128

    (31) incremental -> reference AI expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    MAKA            reduce using rule 31 (incremental -> reference AI expr .)
    NEWLINE         reduce using rule 31 (incremental -> reference AI expr .)
    ATHAWA          reduce using rule 31 (incremental -> reference AI expr .)
    DIYE            reduce using rule 31 (incremental -> reference AI expr .)
    error           reduce using rule 31 (incremental -> reference AI expr .)
    $end            reduce using rule 31 (incremental -> reference AI expr .)
    KAKHA           reduce using rule 31 (incremental -> reference AI expr .)
    TICHO           reduce using rule 31 (incremental -> reference AI expr .)
    BAJA            reduce using rule 31 (incremental -> reference AI expr .)
    BAISA           reduce using rule 31 (incremental -> reference AI expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 129

    (66) graphicdraw -> reference MA string . KORA variableExpr
    (83) expr -> string .

    KORA            shift and go to state 161
    PLUS            reduce using rule 83 (expr -> string .)
    MINUS           reduce using rule 83 (expr -> string .)
    TIMES           reduce using rule 83 (expr -> string .)
    DIVIDE          reduce using rule 83 (expr -> string .)
    MODULUS         reduce using rule 83 (expr -> string .)
    POWER           reduce using rule 83 (expr -> string .)
    GT              reduce using rule 83 (expr -> string .)
    LT              reduce using rule 83 (expr -> string .)
    GE              reduce using rule 83 (expr -> string .)
    LE              reduce using rule 83 (expr -> string .)
    EQ              reduce using rule 83 (expr -> string .)
    NE              reduce using rule 83 (expr -> string .)
    RA              reduce using rule 83 (expr -> string .)
    WA              reduce using rule 83 (expr -> string .)
    CHHA            reduce using rule 83 (expr -> string .)
    CHHAINA         reduce using rule 83 (expr -> string .)
    LEKHA           reduce using rule 83 (expr -> string .)
    COMMA           reduce using rule 83 (expr -> string .)


state 130

    (57) filewriteln -> reference MA variableExpr . LEKHA
    (58) filewrite -> reference MA variableExpr . LEKHA SEMICOLON
    (67) variableExpr -> variableExpr . COMMA expr

    LEKHA           shift and go to state 162
    COMMA           shift and go to state 90


state 131

    (33) incremental -> reference MI expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    MAKA            reduce using rule 33 (incremental -> reference MI expr .)
    NEWLINE         reduce using rule 33 (incremental -> reference MI expr .)
    ATHAWA          reduce using rule 33 (incremental -> reference MI expr .)
    DIYE            reduce using rule 33 (incremental -> reference MI expr .)
    error           reduce using rule 33 (incremental -> reference MI expr .)
    $end            reduce using rule 33 (incremental -> reference MI expr .)
    KAKHA           reduce using rule 33 (incremental -> reference MI expr .)
    TICHO           reduce using rule 33 (incremental -> reference MI expr .)
    BAJA            reduce using rule 33 (incremental -> reference MI expr .)
    BAISA           reduce using rule 33 (incremental -> reference MI expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 132

    (32) incremental -> reference SI expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    MAKA            reduce using rule 32 (incremental -> reference SI expr .)
    NEWLINE         reduce using rule 32 (incremental -> reference SI expr .)
    ATHAWA          reduce using rule 32 (incremental -> reference SI expr .)
    DIYE            reduce using rule 32 (incremental -> reference SI expr .)
    error           reduce using rule 32 (incremental -> reference SI expr .)
    $end            reduce using rule 32 (incremental -> reference SI expr .)
    KAKHA           reduce using rule 32 (incremental -> reference SI expr .)
    TICHO           reduce using rule 32 (incremental -> reference SI expr .)
    BAJA            reduce using rule 32 (incremental -> reference SI expr .)
    BAISA           reduce using rule 32 (incremental -> reference SI expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 133

    (38) slif -> YEDI expr BHAE . slstmt ATHAWA slstmt
    (39) slif -> YEDI expr BHAE . slstmt
    (46) mlif -> YEDI expr BHAE . NEWLINE program DIYE
    (47) mlif -> YEDI expr BHAE . NEWLINE program optelse DIYE
    (128) mlif -> YEDI expr BHAE . NEWLINE program error
    (129) mlif -> YEDI expr BHAE . NEWLINE program optelse error
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (121) empty -> .

    NEWLINE         shift and go to state 163
    YEDI            shift and go to state 164
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    string                         shift and go to state 8
    filewriteln                    shift and go to state 38
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 71
    return                         shift and go to state 7
    slstmt                         shift and go to state 165
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 166
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 134

    (122) slif -> YEDI expr error . slstmt
    (123) slif -> YEDI expr error . ATHAWA slstmt
    (124) mlif -> YEDI expr error . NEWLINE program DIYE
    (125) mlif -> YEDI expr error . NEWLINE program optelse DIYE
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (121) empty -> .

    ATHAWA          shift and go to state 168
    NEWLINE         shift and go to state 167
    YEDI            shift and go to state 164
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    string                         shift and go to state 8
    filewriteln                    shift and go to state 38
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 71
    return                         shift and go to state 7
    slstmt                         shift and go to state 169
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 166
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 135

    (67) variableExpr -> variableExpr COMMA expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    LEKHA           reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    LEU             reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    COMMA           reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    RPARA           reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    NEWLINE         reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    $end            reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    KAKHA           reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    TICHO           reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    DIYE            reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    error           reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    ATHAWA          reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    BAJA            reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    MAKA            reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    BAISA           reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    RGPARA          reduce using rule 67 (variableExpr -> variableExpr COMMA expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 136

    (28) print -> variableExpr LEKHA SEMICOLON .

    MAKA            reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)
    NEWLINE         reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)
    DIYE            reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)
    error           reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)
    $end            reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)
    KAKHA           reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)
    TICHO           reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)
    ATHAWA          reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)
    BAJA            reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)
    BAISA           reduce using rule 28 (print -> variableExpr LEKHA SEMICOLON .)


state 137

    (55) function -> KAAM IDENTIFIER LPARA . variableArgs RPARA NEWLINE program MAKA
    (130) function -> KAAM IDENTIFIER LPARA . error RPARA NEWLINE program MAKA
    (70) variableArgs -> . variableArgs COMMA IDENTIFIER
    (71) variableArgs -> . IDENTIFIER
    (72) variableArgs -> . empty
    (121) empty -> .

    error           shift and go to state 171
    IDENTIFIER      shift and go to state 172
    RPARA           reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)

    variableArgs                   shift and go to state 170
    empty                          shift and go to state 173

state 138

    (56) class -> KHAKA IDENTIFIER NEWLINE . program KAKHA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    KAKHA           reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 174
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 139

    (109) functioncall -> IDENTIFIER LPARA variableExpr . RPARA
    (67) variableExpr -> variableExpr . COMMA expr

    RPARA           shift and go to state 175
    COMMA           shift and go to state 90


state 140

    (118) expr -> expr WA expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    RA              reduce using rule 118 (expr -> expr WA expr .)
    WA              reduce using rule 118 (expr -> expr WA expr .)
    CHHA            reduce using rule 118 (expr -> expr WA expr .)
    CHHAINA         reduce using rule 118 (expr -> expr WA expr .)
    PATHAU          reduce using rule 118 (expr -> expr WA expr .)
    CHOTI           reduce using rule 118 (expr -> expr WA expr .)
    NEWLINE         reduce using rule 118 (expr -> expr WA expr .)
    $end            reduce using rule 118 (expr -> expr WA expr .)
    LEKHA           reduce using rule 118 (expr -> expr WA expr .)
    LEU             reduce using rule 118 (expr -> expr WA expr .)
    COMMA           reduce using rule 118 (expr -> expr WA expr .)
    RPARA           reduce using rule 118 (expr -> expr WA expr .)
    RGPARA          reduce using rule 118 (expr -> expr WA expr .)
    BHAE            reduce using rule 118 (expr -> expr WA expr .)
    error           reduce using rule 118 (expr -> expr WA expr .)
    KAKHA           reduce using rule 118 (expr -> expr WA expr .)
    TICHO           reduce using rule 118 (expr -> expr WA expr .)
    DIYE            reduce using rule 118 (expr -> expr WA expr .)
    ATHAWA          reduce using rule 118 (expr -> expr WA expr .)
    BAJA            reduce using rule 118 (expr -> expr WA expr .)
    MAKA            reduce using rule 118 (expr -> expr WA expr .)
    BAISA           reduce using rule 118 (expr -> expr WA expr .)
    COLON           reduce using rule 118 (expr -> expr WA expr .)
    DEKHI           reduce using rule 118 (expr -> expr WA expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103

  ! PLUS            [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! MINUS           [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! TIMES           [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! DIVIDE          [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! MODULUS         [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! POWER           [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! GT              [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! LT              [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! GE              [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! LE              [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! EQ              [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! NE              [ reduce using rule 118 (expr -> expr WA expr .) ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 141

    (74) expr -> expr MINUS expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    PLUS            reduce using rule 74 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 74 (expr -> expr MINUS expr .)
    GT              reduce using rule 74 (expr -> expr MINUS expr .)
    LT              reduce using rule 74 (expr -> expr MINUS expr .)
    GE              reduce using rule 74 (expr -> expr MINUS expr .)
    LE              reduce using rule 74 (expr -> expr MINUS expr .)
    EQ              reduce using rule 74 (expr -> expr MINUS expr .)
    NE              reduce using rule 74 (expr -> expr MINUS expr .)
    RA              reduce using rule 74 (expr -> expr MINUS expr .)
    WA              reduce using rule 74 (expr -> expr MINUS expr .)
    CHHA            reduce using rule 74 (expr -> expr MINUS expr .)
    CHHAINA         reduce using rule 74 (expr -> expr MINUS expr .)
    PATHAU          reduce using rule 74 (expr -> expr MINUS expr .)
    CHOTI           reduce using rule 74 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 74 (expr -> expr MINUS expr .)
    $end            reduce using rule 74 (expr -> expr MINUS expr .)
    LEKHA           reduce using rule 74 (expr -> expr MINUS expr .)
    LEU             reduce using rule 74 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 74 (expr -> expr MINUS expr .)
    RPARA           reduce using rule 74 (expr -> expr MINUS expr .)
    RGPARA          reduce using rule 74 (expr -> expr MINUS expr .)
    BHAE            reduce using rule 74 (expr -> expr MINUS expr .)
    error           reduce using rule 74 (expr -> expr MINUS expr .)
    KAKHA           reduce using rule 74 (expr -> expr MINUS expr .)
    TICHO           reduce using rule 74 (expr -> expr MINUS expr .)
    DIYE            reduce using rule 74 (expr -> expr MINUS expr .)
    ATHAWA          reduce using rule 74 (expr -> expr MINUS expr .)
    BAJA            reduce using rule 74 (expr -> expr MINUS expr .)
    MAKA            reduce using rule 74 (expr -> expr MINUS expr .)
    BAISA           reduce using rule 74 (expr -> expr MINUS expr .)
    COLON           reduce using rule 74 (expr -> expr MINUS expr .)
    DEKHI           reduce using rule 74 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101

  ! TIMES           [ reduce using rule 74 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 74 (expr -> expr MINUS expr .) ]
  ! MODULUS         [ reduce using rule 74 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 74 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 99 ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 142

    (114) expr -> expr LE expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    GT              reduce using rule 114 (expr -> expr LE expr .)
    LT              reduce using rule 114 (expr -> expr LE expr .)
    GE              reduce using rule 114 (expr -> expr LE expr .)
    LE              reduce using rule 114 (expr -> expr LE expr .)
    EQ              reduce using rule 114 (expr -> expr LE expr .)
    NE              reduce using rule 114 (expr -> expr LE expr .)
    RA              reduce using rule 114 (expr -> expr LE expr .)
    WA              reduce using rule 114 (expr -> expr LE expr .)
    CHHA            reduce using rule 114 (expr -> expr LE expr .)
    CHHAINA         reduce using rule 114 (expr -> expr LE expr .)
    PATHAU          reduce using rule 114 (expr -> expr LE expr .)
    CHOTI           reduce using rule 114 (expr -> expr LE expr .)
    NEWLINE         reduce using rule 114 (expr -> expr LE expr .)
    $end            reduce using rule 114 (expr -> expr LE expr .)
    LEKHA           reduce using rule 114 (expr -> expr LE expr .)
    LEU             reduce using rule 114 (expr -> expr LE expr .)
    COMMA           reduce using rule 114 (expr -> expr LE expr .)
    RPARA           reduce using rule 114 (expr -> expr LE expr .)
    RGPARA          reduce using rule 114 (expr -> expr LE expr .)
    BHAE            reduce using rule 114 (expr -> expr LE expr .)
    error           reduce using rule 114 (expr -> expr LE expr .)
    KAKHA           reduce using rule 114 (expr -> expr LE expr .)
    TICHO           reduce using rule 114 (expr -> expr LE expr .)
    DIYE            reduce using rule 114 (expr -> expr LE expr .)
    ATHAWA          reduce using rule 114 (expr -> expr LE expr .)
    BAJA            reduce using rule 114 (expr -> expr LE expr .)
    MAKA            reduce using rule 114 (expr -> expr LE expr .)
    BAISA           reduce using rule 114 (expr -> expr LE expr .)
    COLON           reduce using rule 114 (expr -> expr LE expr .)
    DEKHI           reduce using rule 114 (expr -> expr LE expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101

  ! PLUS            [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! MODULUS         [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! POWER           [ reduce using rule 114 (expr -> expr LE expr .) ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 143

    (78) expr -> expr POWER expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    PLUS            reduce using rule 78 (expr -> expr POWER expr .)
    MINUS           reduce using rule 78 (expr -> expr POWER expr .)
    TIMES           reduce using rule 78 (expr -> expr POWER expr .)
    DIVIDE          reduce using rule 78 (expr -> expr POWER expr .)
    MODULUS         reduce using rule 78 (expr -> expr POWER expr .)
    POWER           reduce using rule 78 (expr -> expr POWER expr .)
    GT              reduce using rule 78 (expr -> expr POWER expr .)
    LT              reduce using rule 78 (expr -> expr POWER expr .)
    GE              reduce using rule 78 (expr -> expr POWER expr .)
    LE              reduce using rule 78 (expr -> expr POWER expr .)
    EQ              reduce using rule 78 (expr -> expr POWER expr .)
    NE              reduce using rule 78 (expr -> expr POWER expr .)
    RA              reduce using rule 78 (expr -> expr POWER expr .)
    WA              reduce using rule 78 (expr -> expr POWER expr .)
    CHHA            reduce using rule 78 (expr -> expr POWER expr .)
    CHHAINA         reduce using rule 78 (expr -> expr POWER expr .)
    PATHAU          reduce using rule 78 (expr -> expr POWER expr .)
    CHOTI           reduce using rule 78 (expr -> expr POWER expr .)
    NEWLINE         reduce using rule 78 (expr -> expr POWER expr .)
    $end            reduce using rule 78 (expr -> expr POWER expr .)
    LEKHA           reduce using rule 78 (expr -> expr POWER expr .)
    LEU             reduce using rule 78 (expr -> expr POWER expr .)
    COMMA           reduce using rule 78 (expr -> expr POWER expr .)
    RPARA           reduce using rule 78 (expr -> expr POWER expr .)
    RGPARA          reduce using rule 78 (expr -> expr POWER expr .)
    BHAE            reduce using rule 78 (expr -> expr POWER expr .)
    error           reduce using rule 78 (expr -> expr POWER expr .)
    KAKHA           reduce using rule 78 (expr -> expr POWER expr .)
    TICHO           reduce using rule 78 (expr -> expr POWER expr .)
    DIYE            reduce using rule 78 (expr -> expr POWER expr .)
    ATHAWA          reduce using rule 78 (expr -> expr POWER expr .)
    BAJA            reduce using rule 78 (expr -> expr POWER expr .)
    MAKA            reduce using rule 78 (expr -> expr POWER expr .)
    BAISA           reduce using rule 78 (expr -> expr POWER expr .)
    COLON           reduce using rule 78 (expr -> expr POWER expr .)
    DEKHI           reduce using rule 78 (expr -> expr POWER expr .)

  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 109 ]
  ! DIVIDE          [ shift and go to state 108 ]
  ! MODULUS         [ shift and go to state 102 ]
  ! POWER           [ shift and go to state 101 ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 144

    (77) expr -> expr MODULUS expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    PLUS            reduce using rule 77 (expr -> expr MODULUS expr .)
    MINUS           reduce using rule 77 (expr -> expr MODULUS expr .)
    TIMES           reduce using rule 77 (expr -> expr MODULUS expr .)
    DIVIDE          reduce using rule 77 (expr -> expr MODULUS expr .)
    MODULUS         reduce using rule 77 (expr -> expr MODULUS expr .)
    POWER           reduce using rule 77 (expr -> expr MODULUS expr .)
    GT              reduce using rule 77 (expr -> expr MODULUS expr .)
    LT              reduce using rule 77 (expr -> expr MODULUS expr .)
    GE              reduce using rule 77 (expr -> expr MODULUS expr .)
    LE              reduce using rule 77 (expr -> expr MODULUS expr .)
    EQ              reduce using rule 77 (expr -> expr MODULUS expr .)
    NE              reduce using rule 77 (expr -> expr MODULUS expr .)
    RA              reduce using rule 77 (expr -> expr MODULUS expr .)
    WA              reduce using rule 77 (expr -> expr MODULUS expr .)
    CHHA            reduce using rule 77 (expr -> expr MODULUS expr .)
    CHHAINA         reduce using rule 77 (expr -> expr MODULUS expr .)
    PATHAU          reduce using rule 77 (expr -> expr MODULUS expr .)
    CHOTI           reduce using rule 77 (expr -> expr MODULUS expr .)
    NEWLINE         reduce using rule 77 (expr -> expr MODULUS expr .)
    $end            reduce using rule 77 (expr -> expr MODULUS expr .)
    LEKHA           reduce using rule 77 (expr -> expr MODULUS expr .)
    LEU             reduce using rule 77 (expr -> expr MODULUS expr .)
    COMMA           reduce using rule 77 (expr -> expr MODULUS expr .)
    RPARA           reduce using rule 77 (expr -> expr MODULUS expr .)
    RGPARA          reduce using rule 77 (expr -> expr MODULUS expr .)
    BHAE            reduce using rule 77 (expr -> expr MODULUS expr .)
    error           reduce using rule 77 (expr -> expr MODULUS expr .)
    KAKHA           reduce using rule 77 (expr -> expr MODULUS expr .)
    TICHO           reduce using rule 77 (expr -> expr MODULUS expr .)
    DIYE            reduce using rule 77 (expr -> expr MODULUS expr .)
    ATHAWA          reduce using rule 77 (expr -> expr MODULUS expr .)
    BAJA            reduce using rule 77 (expr -> expr MODULUS expr .)
    MAKA            reduce using rule 77 (expr -> expr MODULUS expr .)
    BAISA           reduce using rule 77 (expr -> expr MODULUS expr .)
    COLON           reduce using rule 77 (expr -> expr MODULUS expr .)
    DEKHI           reduce using rule 77 (expr -> expr MODULUS expr .)

  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 109 ]
  ! DIVIDE          [ shift and go to state 108 ]
  ! MODULUS         [ shift and go to state 102 ]
  ! POWER           [ shift and go to state 101 ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 145

    (116) expr -> expr NE expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    EQ              reduce using rule 116 (expr -> expr NE expr .)
    NE              reduce using rule 116 (expr -> expr NE expr .)
    RA              reduce using rule 116 (expr -> expr NE expr .)
    WA              reduce using rule 116 (expr -> expr NE expr .)
    CHHA            reduce using rule 116 (expr -> expr NE expr .)
    CHHAINA         reduce using rule 116 (expr -> expr NE expr .)
    PATHAU          reduce using rule 116 (expr -> expr NE expr .)
    CHOTI           reduce using rule 116 (expr -> expr NE expr .)
    NEWLINE         reduce using rule 116 (expr -> expr NE expr .)
    $end            reduce using rule 116 (expr -> expr NE expr .)
    LEKHA           reduce using rule 116 (expr -> expr NE expr .)
    LEU             reduce using rule 116 (expr -> expr NE expr .)
    COMMA           reduce using rule 116 (expr -> expr NE expr .)
    RPARA           reduce using rule 116 (expr -> expr NE expr .)
    RGPARA          reduce using rule 116 (expr -> expr NE expr .)
    BHAE            reduce using rule 116 (expr -> expr NE expr .)
    error           reduce using rule 116 (expr -> expr NE expr .)
    KAKHA           reduce using rule 116 (expr -> expr NE expr .)
    TICHO           reduce using rule 116 (expr -> expr NE expr .)
    DIYE            reduce using rule 116 (expr -> expr NE expr .)
    ATHAWA          reduce using rule 116 (expr -> expr NE expr .)
    BAJA            reduce using rule 116 (expr -> expr NE expr .)
    MAKA            reduce using rule 116 (expr -> expr NE expr .)
    BAISA           reduce using rule 116 (expr -> expr NE expr .)
    COLON           reduce using rule 116 (expr -> expr NE expr .)
    DEKHI           reduce using rule 116 (expr -> expr NE expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100

  ! PLUS            [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! MODULUS         [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! POWER           [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 116 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 146

    (112) expr -> expr LT expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    GT              reduce using rule 112 (expr -> expr LT expr .)
    LT              reduce using rule 112 (expr -> expr LT expr .)
    GE              reduce using rule 112 (expr -> expr LT expr .)
    LE              reduce using rule 112 (expr -> expr LT expr .)
    EQ              reduce using rule 112 (expr -> expr LT expr .)
    NE              reduce using rule 112 (expr -> expr LT expr .)
    RA              reduce using rule 112 (expr -> expr LT expr .)
    WA              reduce using rule 112 (expr -> expr LT expr .)
    CHHA            reduce using rule 112 (expr -> expr LT expr .)
    CHHAINA         reduce using rule 112 (expr -> expr LT expr .)
    PATHAU          reduce using rule 112 (expr -> expr LT expr .)
    CHOTI           reduce using rule 112 (expr -> expr LT expr .)
    NEWLINE         reduce using rule 112 (expr -> expr LT expr .)
    $end            reduce using rule 112 (expr -> expr LT expr .)
    LEKHA           reduce using rule 112 (expr -> expr LT expr .)
    LEU             reduce using rule 112 (expr -> expr LT expr .)
    COMMA           reduce using rule 112 (expr -> expr LT expr .)
    RPARA           reduce using rule 112 (expr -> expr LT expr .)
    RGPARA          reduce using rule 112 (expr -> expr LT expr .)
    BHAE            reduce using rule 112 (expr -> expr LT expr .)
    error           reduce using rule 112 (expr -> expr LT expr .)
    KAKHA           reduce using rule 112 (expr -> expr LT expr .)
    TICHO           reduce using rule 112 (expr -> expr LT expr .)
    DIYE            reduce using rule 112 (expr -> expr LT expr .)
    ATHAWA          reduce using rule 112 (expr -> expr LT expr .)
    BAJA            reduce using rule 112 (expr -> expr LT expr .)
    MAKA            reduce using rule 112 (expr -> expr LT expr .)
    BAISA           reduce using rule 112 (expr -> expr LT expr .)
    COLON           reduce using rule 112 (expr -> expr LT expr .)
    DEKHI           reduce using rule 112 (expr -> expr LT expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101

  ! PLUS            [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! MODULUS         [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! POWER           [ reduce using rule 112 (expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 147

    (73) expr -> expr PLUS expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    PLUS            reduce using rule 73 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 73 (expr -> expr PLUS expr .)
    GT              reduce using rule 73 (expr -> expr PLUS expr .)
    LT              reduce using rule 73 (expr -> expr PLUS expr .)
    GE              reduce using rule 73 (expr -> expr PLUS expr .)
    LE              reduce using rule 73 (expr -> expr PLUS expr .)
    EQ              reduce using rule 73 (expr -> expr PLUS expr .)
    NE              reduce using rule 73 (expr -> expr PLUS expr .)
    RA              reduce using rule 73 (expr -> expr PLUS expr .)
    WA              reduce using rule 73 (expr -> expr PLUS expr .)
    CHHA            reduce using rule 73 (expr -> expr PLUS expr .)
    CHHAINA         reduce using rule 73 (expr -> expr PLUS expr .)
    PATHAU          reduce using rule 73 (expr -> expr PLUS expr .)
    CHOTI           reduce using rule 73 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 73 (expr -> expr PLUS expr .)
    $end            reduce using rule 73 (expr -> expr PLUS expr .)
    LEKHA           reduce using rule 73 (expr -> expr PLUS expr .)
    LEU             reduce using rule 73 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 73 (expr -> expr PLUS expr .)
    RPARA           reduce using rule 73 (expr -> expr PLUS expr .)
    RGPARA          reduce using rule 73 (expr -> expr PLUS expr .)
    BHAE            reduce using rule 73 (expr -> expr PLUS expr .)
    error           reduce using rule 73 (expr -> expr PLUS expr .)
    KAKHA           reduce using rule 73 (expr -> expr PLUS expr .)
    TICHO           reduce using rule 73 (expr -> expr PLUS expr .)
    DIYE            reduce using rule 73 (expr -> expr PLUS expr .)
    ATHAWA          reduce using rule 73 (expr -> expr PLUS expr .)
    BAJA            reduce using rule 73 (expr -> expr PLUS expr .)
    MAKA            reduce using rule 73 (expr -> expr PLUS expr .)
    BAISA           reduce using rule 73 (expr -> expr PLUS expr .)
    COLON           reduce using rule 73 (expr -> expr PLUS expr .)
    DEKHI           reduce using rule 73 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101

  ! TIMES           [ reduce using rule 73 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 73 (expr -> expr PLUS expr .) ]
  ! MODULUS         [ reduce using rule 73 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 73 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 99 ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 148

    (117) expr -> expr RA expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    RA              reduce using rule 117 (expr -> expr RA expr .)
    WA              reduce using rule 117 (expr -> expr RA expr .)
    CHHA            reduce using rule 117 (expr -> expr RA expr .)
    CHHAINA         reduce using rule 117 (expr -> expr RA expr .)
    PATHAU          reduce using rule 117 (expr -> expr RA expr .)
    CHOTI           reduce using rule 117 (expr -> expr RA expr .)
    NEWLINE         reduce using rule 117 (expr -> expr RA expr .)
    $end            reduce using rule 117 (expr -> expr RA expr .)
    LEKHA           reduce using rule 117 (expr -> expr RA expr .)
    LEU             reduce using rule 117 (expr -> expr RA expr .)
    COMMA           reduce using rule 117 (expr -> expr RA expr .)
    RPARA           reduce using rule 117 (expr -> expr RA expr .)
    RGPARA          reduce using rule 117 (expr -> expr RA expr .)
    BHAE            reduce using rule 117 (expr -> expr RA expr .)
    error           reduce using rule 117 (expr -> expr RA expr .)
    KAKHA           reduce using rule 117 (expr -> expr RA expr .)
    TICHO           reduce using rule 117 (expr -> expr RA expr .)
    DIYE            reduce using rule 117 (expr -> expr RA expr .)
    ATHAWA          reduce using rule 117 (expr -> expr RA expr .)
    BAJA            reduce using rule 117 (expr -> expr RA expr .)
    MAKA            reduce using rule 117 (expr -> expr RA expr .)
    BAISA           reduce using rule 117 (expr -> expr RA expr .)
    COLON           reduce using rule 117 (expr -> expr RA expr .)
    DEKHI           reduce using rule 117 (expr -> expr RA expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103

  ! PLUS            [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! MINUS           [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! TIMES           [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! DIVIDE          [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! MODULUS         [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! POWER           [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! GT              [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! LT              [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! GE              [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! LE              [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! EQ              [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! NE              [ reduce using rule 117 (expr -> expr RA expr .) ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 149

    (111) expr -> expr GT expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    GT              reduce using rule 111 (expr -> expr GT expr .)
    LT              reduce using rule 111 (expr -> expr GT expr .)
    GE              reduce using rule 111 (expr -> expr GT expr .)
    LE              reduce using rule 111 (expr -> expr GT expr .)
    EQ              reduce using rule 111 (expr -> expr GT expr .)
    NE              reduce using rule 111 (expr -> expr GT expr .)
    RA              reduce using rule 111 (expr -> expr GT expr .)
    WA              reduce using rule 111 (expr -> expr GT expr .)
    CHHA            reduce using rule 111 (expr -> expr GT expr .)
    CHHAINA         reduce using rule 111 (expr -> expr GT expr .)
    PATHAU          reduce using rule 111 (expr -> expr GT expr .)
    CHOTI           reduce using rule 111 (expr -> expr GT expr .)
    NEWLINE         reduce using rule 111 (expr -> expr GT expr .)
    $end            reduce using rule 111 (expr -> expr GT expr .)
    LEKHA           reduce using rule 111 (expr -> expr GT expr .)
    LEU             reduce using rule 111 (expr -> expr GT expr .)
    COMMA           reduce using rule 111 (expr -> expr GT expr .)
    RPARA           reduce using rule 111 (expr -> expr GT expr .)
    RGPARA          reduce using rule 111 (expr -> expr GT expr .)
    BHAE            reduce using rule 111 (expr -> expr GT expr .)
    error           reduce using rule 111 (expr -> expr GT expr .)
    KAKHA           reduce using rule 111 (expr -> expr GT expr .)
    TICHO           reduce using rule 111 (expr -> expr GT expr .)
    DIYE            reduce using rule 111 (expr -> expr GT expr .)
    ATHAWA          reduce using rule 111 (expr -> expr GT expr .)
    BAJA            reduce using rule 111 (expr -> expr GT expr .)
    MAKA            reduce using rule 111 (expr -> expr GT expr .)
    BAISA           reduce using rule 111 (expr -> expr GT expr .)
    COLON           reduce using rule 111 (expr -> expr GT expr .)
    DEKHI           reduce using rule 111 (expr -> expr GT expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101

  ! PLUS            [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! MODULUS         [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! POWER           [ reduce using rule 111 (expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 150

    (76) expr -> expr DIVIDE expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    PLUS            reduce using rule 76 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 76 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 76 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 76 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 76 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 76 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 76 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 76 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 76 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 76 (expr -> expr DIVIDE expr .)
    RA              reduce using rule 76 (expr -> expr DIVIDE expr .)
    WA              reduce using rule 76 (expr -> expr DIVIDE expr .)
    CHHA            reduce using rule 76 (expr -> expr DIVIDE expr .)
    CHHAINA         reduce using rule 76 (expr -> expr DIVIDE expr .)
    PATHAU          reduce using rule 76 (expr -> expr DIVIDE expr .)
    CHOTI           reduce using rule 76 (expr -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 76 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 76 (expr -> expr DIVIDE expr .)
    LEKHA           reduce using rule 76 (expr -> expr DIVIDE expr .)
    LEU             reduce using rule 76 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 76 (expr -> expr DIVIDE expr .)
    RPARA           reduce using rule 76 (expr -> expr DIVIDE expr .)
    RGPARA          reduce using rule 76 (expr -> expr DIVIDE expr .)
    BHAE            reduce using rule 76 (expr -> expr DIVIDE expr .)
    error           reduce using rule 76 (expr -> expr DIVIDE expr .)
    KAKHA           reduce using rule 76 (expr -> expr DIVIDE expr .)
    TICHO           reduce using rule 76 (expr -> expr DIVIDE expr .)
    DIYE            reduce using rule 76 (expr -> expr DIVIDE expr .)
    ATHAWA          reduce using rule 76 (expr -> expr DIVIDE expr .)
    BAJA            reduce using rule 76 (expr -> expr DIVIDE expr .)
    MAKA            reduce using rule 76 (expr -> expr DIVIDE expr .)
    BAISA           reduce using rule 76 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 76 (expr -> expr DIVIDE expr .)
    DEKHI           reduce using rule 76 (expr -> expr DIVIDE expr .)
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101

  ! MODULUS         [ reduce using rule 76 (expr -> expr DIVIDE expr .) ]
  ! POWER           [ reduce using rule 76 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 109 ]
  ! DIVIDE          [ shift and go to state 108 ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 151

    (75) expr -> expr TIMES expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    PLUS            reduce using rule 75 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 75 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 75 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 75 (expr -> expr TIMES expr .)
    GT              reduce using rule 75 (expr -> expr TIMES expr .)
    LT              reduce using rule 75 (expr -> expr TIMES expr .)
    GE              reduce using rule 75 (expr -> expr TIMES expr .)
    LE              reduce using rule 75 (expr -> expr TIMES expr .)
    EQ              reduce using rule 75 (expr -> expr TIMES expr .)
    NE              reduce using rule 75 (expr -> expr TIMES expr .)
    RA              reduce using rule 75 (expr -> expr TIMES expr .)
    WA              reduce using rule 75 (expr -> expr TIMES expr .)
    CHHA            reduce using rule 75 (expr -> expr TIMES expr .)
    CHHAINA         reduce using rule 75 (expr -> expr TIMES expr .)
    PATHAU          reduce using rule 75 (expr -> expr TIMES expr .)
    CHOTI           reduce using rule 75 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 75 (expr -> expr TIMES expr .)
    $end            reduce using rule 75 (expr -> expr TIMES expr .)
    LEKHA           reduce using rule 75 (expr -> expr TIMES expr .)
    LEU             reduce using rule 75 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 75 (expr -> expr TIMES expr .)
    RPARA           reduce using rule 75 (expr -> expr TIMES expr .)
    RGPARA          reduce using rule 75 (expr -> expr TIMES expr .)
    BHAE            reduce using rule 75 (expr -> expr TIMES expr .)
    error           reduce using rule 75 (expr -> expr TIMES expr .)
    KAKHA           reduce using rule 75 (expr -> expr TIMES expr .)
    TICHO           reduce using rule 75 (expr -> expr TIMES expr .)
    DIYE            reduce using rule 75 (expr -> expr TIMES expr .)
    ATHAWA          reduce using rule 75 (expr -> expr TIMES expr .)
    BAJA            reduce using rule 75 (expr -> expr TIMES expr .)
    MAKA            reduce using rule 75 (expr -> expr TIMES expr .)
    BAISA           reduce using rule 75 (expr -> expr TIMES expr .)
    COLON           reduce using rule 75 (expr -> expr TIMES expr .)
    DEKHI           reduce using rule 75 (expr -> expr TIMES expr .)
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101

  ! MODULUS         [ reduce using rule 75 (expr -> expr TIMES expr .) ]
  ! POWER           [ reduce using rule 75 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 105 ]
  ! MINUS           [ shift and go to state 99 ]
  ! TIMES           [ shift and go to state 109 ]
  ! DIVIDE          [ shift and go to state 108 ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 152

    (113) expr -> expr GE expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    GT              reduce using rule 113 (expr -> expr GE expr .)
    LT              reduce using rule 113 (expr -> expr GE expr .)
    GE              reduce using rule 113 (expr -> expr GE expr .)
    LE              reduce using rule 113 (expr -> expr GE expr .)
    EQ              reduce using rule 113 (expr -> expr GE expr .)
    NE              reduce using rule 113 (expr -> expr GE expr .)
    RA              reduce using rule 113 (expr -> expr GE expr .)
    WA              reduce using rule 113 (expr -> expr GE expr .)
    CHHA            reduce using rule 113 (expr -> expr GE expr .)
    CHHAINA         reduce using rule 113 (expr -> expr GE expr .)
    PATHAU          reduce using rule 113 (expr -> expr GE expr .)
    CHOTI           reduce using rule 113 (expr -> expr GE expr .)
    NEWLINE         reduce using rule 113 (expr -> expr GE expr .)
    $end            reduce using rule 113 (expr -> expr GE expr .)
    LEKHA           reduce using rule 113 (expr -> expr GE expr .)
    LEU             reduce using rule 113 (expr -> expr GE expr .)
    COMMA           reduce using rule 113 (expr -> expr GE expr .)
    RPARA           reduce using rule 113 (expr -> expr GE expr .)
    RGPARA          reduce using rule 113 (expr -> expr GE expr .)
    BHAE            reduce using rule 113 (expr -> expr GE expr .)
    error           reduce using rule 113 (expr -> expr GE expr .)
    KAKHA           reduce using rule 113 (expr -> expr GE expr .)
    TICHO           reduce using rule 113 (expr -> expr GE expr .)
    DIYE            reduce using rule 113 (expr -> expr GE expr .)
    ATHAWA          reduce using rule 113 (expr -> expr GE expr .)
    BAJA            reduce using rule 113 (expr -> expr GE expr .)
    MAKA            reduce using rule 113 (expr -> expr GE expr .)
    BAISA           reduce using rule 113 (expr -> expr GE expr .)
    COLON           reduce using rule 113 (expr -> expr GE expr .)
    DEKHI           reduce using rule 113 (expr -> expr GE expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101

  ! PLUS            [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! MODULUS         [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! POWER           [ reduce using rule 113 (expr -> expr GE expr .) ]
  ! GT              [ shift and go to state 107 ]
  ! LT              [ shift and go to state 104 ]
  ! GE              [ shift and go to state 111 ]
  ! LE              [ shift and go to state 100 ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 153

    (54) repeatloop -> expr CHOTI NEWLINE . program TICHO
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    TICHO           reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 176
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 154

    (115) expr -> expr EQ expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    EQ              reduce using rule 115 (expr -> expr EQ expr .)
    NE              reduce using rule 115 (expr -> expr EQ expr .)
    RA              reduce using rule 115 (expr -> expr EQ expr .)
    WA              reduce using rule 115 (expr -> expr EQ expr .)
    CHHA            reduce using rule 115 (expr -> expr EQ expr .)
    CHHAINA         reduce using rule 115 (expr -> expr EQ expr .)
    PATHAU          reduce using rule 115 (expr -> expr EQ expr .)
    CHOTI           reduce using rule 115 (expr -> expr EQ expr .)
    NEWLINE         reduce using rule 115 (expr -> expr EQ expr .)
    $end            reduce using rule 115 (expr -> expr EQ expr .)
    LEKHA           reduce using rule 115 (expr -> expr EQ expr .)
    LEU             reduce using rule 115 (expr -> expr EQ expr .)
    COMMA           reduce using rule 115 (expr -> expr EQ expr .)
    RPARA           reduce using rule 115 (expr -> expr EQ expr .)
    RGPARA          reduce using rule 115 (expr -> expr EQ expr .)
    BHAE            reduce using rule 115 (expr -> expr EQ expr .)
    error           reduce using rule 115 (expr -> expr EQ expr .)
    KAKHA           reduce using rule 115 (expr -> expr EQ expr .)
    TICHO           reduce using rule 115 (expr -> expr EQ expr .)
    DIYE            reduce using rule 115 (expr -> expr EQ expr .)
    ATHAWA          reduce using rule 115 (expr -> expr EQ expr .)
    BAJA            reduce using rule 115 (expr -> expr EQ expr .)
    MAKA            reduce using rule 115 (expr -> expr EQ expr .)
    BAISA           reduce using rule 115 (expr -> expr EQ expr .)
    COLON           reduce using rule 115 (expr -> expr EQ expr .)
    DEKHI           reduce using rule 115 (expr -> expr EQ expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100

  ! PLUS            [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! MODULUS         [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! POWER           [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 115 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 113 ]
  ! NE              [ shift and go to state 103 ]
  ! RA              [ shift and go to state 106 ]
  ! WA              [ shift and go to state 97 ]
  ! CHHA            [ shift and go to state 114 ]
  ! CHHAINA         [ shift and go to state 98 ]


state 155

    (53) whileloop -> JABA SAMMA expr . NEWLINE program BAJA
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    NEWLINE         shift and go to state 177
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 156

    (51) forloop -> SABAI reference ASSIGNMENT . expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> SABAI reference ASSIGNMENT . expr DEKHI expr COLON expr NEWLINE program BAISA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    boolean                        shift and go to state 34
    expr                           shift and go to state 178
    float                          shift and go to state 19
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 157

    (106) aryexpr -> expr COLON . expr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 179
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 158

    (104) optindex -> LGPARA aryexpr RGPARA .

    LGPARA          reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    ASSIGNMENT      reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    AI              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    SI              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    MI              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    DI              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    MA              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    BATA            reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    BANDAGARA       reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    DEKHAU          reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    LUKAU           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    HATAU           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    BANAU           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    METAU           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    DOT             reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    KO              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    PATHAU          reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    CHOTI           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    PLUS            reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    MINUS           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    TIMES           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    DIVIDE          reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    MODULUS         reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    POWER           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    GT              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    LT              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    GE              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    LE              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    EQ              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    NE              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    RA              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    WA              reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    CHHA            reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    CHHAINA         reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    NEWLINE         reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    $end            reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    LEKHA           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    LEU             reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    COMMA           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    RPARA           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    RGPARA          reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    BHAE            reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    error           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    KAKHA           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    TICHO           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    DIYE            reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    ATHAWA          reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    BAJA            reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    MAKA            reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    BAISA           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    COLON           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)
    DEKHI           reduce using rule 104 (optindex -> LGPARA aryexpr RGPARA .)


state 159

    (103) optindex -> optindex LGPARA aryexpr . RGPARA

    RGPARA          shift and go to state 180


state 160

    (59) fileread -> reference BATA reference LEU .

    DIYE            reduce using rule 59 (fileread -> reference BATA reference LEU .)
    error           reduce using rule 59 (fileread -> reference BATA reference LEU .)
    NEWLINE         reduce using rule 59 (fileread -> reference BATA reference LEU .)
    ATHAWA          reduce using rule 59 (fileread -> reference BATA reference LEU .)
    $end            reduce using rule 59 (fileread -> reference BATA reference LEU .)
    KAKHA           reduce using rule 59 (fileread -> reference BATA reference LEU .)
    TICHO           reduce using rule 59 (fileread -> reference BATA reference LEU .)
    BAJA            reduce using rule 59 (fileread -> reference BATA reference LEU .)
    MAKA            reduce using rule 59 (fileread -> reference BATA reference LEU .)
    BAISA           reduce using rule 59 (fileread -> reference BATA reference LEU .)


state 161

    (66) graphicdraw -> reference MA string KORA . variableExpr
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (121) empty -> .
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    COMMA           reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    $end            reduce using rule 121 (empty -> .)
    KAKHA           reduce using rule 121 (empty -> .)
    TICHO           reduce using rule 121 (empty -> .)
    DIYE            reduce using rule 121 (empty -> .)
    error           reduce using rule 121 (empty -> .)
    ATHAWA          reduce using rule 121 (empty -> .)
    BAJA            reduce using rule 121 (empty -> .)
    MAKA            reduce using rule 121 (empty -> .)
    BAISA           reduce using rule 121 (empty -> .)
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    expr                           shift and go to state 72
    float                          shift and go to state 19
    variableExpr                   shift and go to state 181
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36
    empty                          shift and go to state 71

state 162

    (57) filewriteln -> reference MA variableExpr LEKHA .
    (58) filewrite -> reference MA variableExpr LEKHA . SEMICOLON

    NEWLINE         reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    $end            reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    KAKHA           reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    TICHO           reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    DIYE            reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    error           reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    ATHAWA          reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    BAJA            reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    MAKA            reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    BAISA           reduce using rule 57 (filewriteln -> reference MA variableExpr LEKHA .)
    SEMICOLON       shift and go to state 182


state 163

    (46) mlif -> YEDI expr BHAE NEWLINE . program DIYE
    (47) mlif -> YEDI expr BHAE NEWLINE . program optelse DIYE
    (128) mlif -> YEDI expr BHAE NEWLINE . program error
    (129) mlif -> YEDI expr BHAE NEWLINE . program optelse error
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    DIYE            reduce using rule 121 (empty -> .)
    error           reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    ATHAWA          reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 183
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 164

    (38) slif -> YEDI . expr BHAE slstmt ATHAWA slstmt
    (39) slif -> YEDI . expr BHAE slstmt
    (122) slif -> YEDI . expr error slstmt
    (123) slif -> YEDI . expr error ATHAWA slstmt
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    reference                      shift and go to state 65
    expr                           shift and go to state 184
    float                          shift and go to state 19
    boolean                        shift and go to state 34
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36
    string                         shift and go to state 8

state 165

    (38) slif -> YEDI expr BHAE slstmt . ATHAWA slstmt
    (39) slif -> YEDI expr BHAE slstmt .

  ! shift/reduce conflict for ATHAWA resolved as shift
    ATHAWA          shift and go to state 185
    NEWLINE         reduce using rule 39 (slif -> YEDI expr BHAE slstmt .)
    DIYE            reduce using rule 39 (slif -> YEDI expr BHAE slstmt .)
    error           reduce using rule 39 (slif -> YEDI expr BHAE slstmt .)
    TICHO           reduce using rule 39 (slif -> YEDI expr BHAE slstmt .)
    $end            reduce using rule 39 (slif -> YEDI expr BHAE slstmt .)
    KAKHA           reduce using rule 39 (slif -> YEDI expr BHAE slstmt .)
    BAJA            reduce using rule 39 (slif -> YEDI expr BHAE slstmt .)
    MAKA            reduce using rule 39 (slif -> YEDI expr BHAE slstmt .)
    BAISA           reduce using rule 39 (slif -> YEDI expr BHAE slstmt .)

  ! ATHAWA          [ reduce using rule 39 (slif -> YEDI expr BHAE slstmt .) ]


state 166

    (26) expression -> expr .
    (35) return -> expr . PATHAU
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA
    (68) variableExpr -> expr .

    NEWLINE         reduce using rule 26 (expression -> expr .)
    $end            reduce using rule 26 (expression -> expr .)
    KAKHA           reduce using rule 26 (expression -> expr .)
    TICHO           reduce using rule 26 (expression -> expr .)
    DIYE            reduce using rule 26 (expression -> expr .)
    error           reduce using rule 26 (expression -> expr .)
    ATHAWA          reduce using rule 26 (expression -> expr .)
    BAJA            reduce using rule 26 (expression -> expr .)
    MAKA            reduce using rule 26 (expression -> expr .)
    BAISA           reduce using rule 26 (expression -> expr .)
    PATHAU          shift and go to state 110
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98
    LEKHA           reduce using rule 68 (variableExpr -> expr .)
    LEU             reduce using rule 68 (variableExpr -> expr .)
    COMMA           reduce using rule 68 (variableExpr -> expr .)


state 167

    (124) mlif -> YEDI expr error NEWLINE . program DIYE
    (125) mlif -> YEDI expr error NEWLINE . program optelse DIYE
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    DIYE            reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    ATHAWA          reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 186
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 168

    (123) slif -> YEDI expr error ATHAWA . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (121) empty -> .

    YEDI            shift and go to state 164
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    string                         shift and go to state 8
    filewriteln                    shift and go to state 38
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 71
    return                         shift and go to state 7
    slstmt                         shift and go to state 187
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 166
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 169

    (122) slif -> YEDI expr error slstmt .

    NEWLINE         reduce using rule 122 (slif -> YEDI expr error slstmt .)
    DIYE            reduce using rule 122 (slif -> YEDI expr error slstmt .)
    error           reduce using rule 122 (slif -> YEDI expr error slstmt .)
    TICHO           reduce using rule 122 (slif -> YEDI expr error slstmt .)
    ATHAWA          reduce using rule 122 (slif -> YEDI expr error slstmt .)
    $end            reduce using rule 122 (slif -> YEDI expr error slstmt .)
    KAKHA           reduce using rule 122 (slif -> YEDI expr error slstmt .)
    BAJA            reduce using rule 122 (slif -> YEDI expr error slstmt .)
    MAKA            reduce using rule 122 (slif -> YEDI expr error slstmt .)
    BAISA           reduce using rule 122 (slif -> YEDI expr error slstmt .)


state 170

    (55) function -> KAAM IDENTIFIER LPARA variableArgs . RPARA NEWLINE program MAKA
    (70) variableArgs -> variableArgs . COMMA IDENTIFIER

    RPARA           shift and go to state 188
    COMMA           shift and go to state 189


state 171

    (130) function -> KAAM IDENTIFIER LPARA error . RPARA NEWLINE program MAKA

    RPARA           shift and go to state 190


state 172

    (71) variableArgs -> IDENTIFIER .

    RPARA           reduce using rule 71 (variableArgs -> IDENTIFIER .)
    COMMA           reduce using rule 71 (variableArgs -> IDENTIFIER .)


state 173

    (72) variableArgs -> empty .

    RPARA           reduce using rule 72 (variableArgs -> empty .)
    COMMA           reduce using rule 72 (variableArgs -> empty .)


state 174

    (56) class -> KHAKA IDENTIFIER NEWLINE program . KAKHA
    (2) program -> program . NEWLINE stmt

    KAKHA           shift and go to state 191
    NEWLINE         shift and go to state 67


state 175

    (109) functioncall -> IDENTIFIER LPARA variableExpr RPARA .

    ASSIGNMENT      reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    AI              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    SI              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MI              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DI              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MA              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BATA            reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BANDAGARA       reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DEKHAU          reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LUKAU           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    HATAU           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BANAU           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    METAU           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DOT             reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    KO              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    PATHAU          reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHOTI           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    PLUS            reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MINUS           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    TIMES           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DIVIDE          reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MODULUS         reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    POWER           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    GT              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LT              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    GE              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LE              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    EQ              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    NE              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RA              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    WA              reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHHA            reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHHAINA         reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    TICHO           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    NEWLINE         reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LEKHA           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LEU             reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    COMMA           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RGPARA          reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DIYE            reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    error           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    ATHAWA          reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    $end            reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RPARA           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BHAE            reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    KAKHA           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BAJA            reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MAKA            reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BAISA           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    COLON           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DEKHI           reduce using rule 109 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)


state 176

    (54) repeatloop -> expr CHOTI NEWLINE program . TICHO
    (2) program -> program . NEWLINE stmt

    TICHO           shift and go to state 192
    NEWLINE         shift and go to state 67


state 177

    (53) whileloop -> JABA SAMMA expr NEWLINE . program BAJA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    BAJA            reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 193
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 178

    (51) forloop -> SABAI reference ASSIGNMENT expr . DEKHI expr NEWLINE program BAISA
    (52) forloop -> SABAI reference ASSIGNMENT expr . DEKHI expr COLON expr NEWLINE program BAISA
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    DEKHI           shift and go to state 194
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 179

    (106) aryexpr -> expr COLON expr .
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    RGPARA          reduce using rule 106 (aryexpr -> expr COLON expr .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 180

    (103) optindex -> optindex LGPARA aryexpr RGPARA .

    LGPARA          reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    ASSIGNMENT      reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    AI              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    SI              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    MI              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DI              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    MA              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    BATA            reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    BANDAGARA       reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DEKHAU          reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    LUKAU           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    HATAU           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    BANAU           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    METAU           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DOT             reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    KO              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    PATHAU          reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    CHOTI           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    PLUS            reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    MINUS           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    TIMES           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DIVIDE          reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    MODULUS         reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    POWER           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    GT              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    LT              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    GE              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    LE              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    EQ              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    NE              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    RA              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    WA              reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    CHHA            reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    CHHAINA         reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    NEWLINE         reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    $end            reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    LEKHA           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    LEU             reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    COMMA           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    RPARA           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    RGPARA          reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    BHAE            reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    error           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    KAKHA           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    TICHO           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DIYE            reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    ATHAWA          reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    BAJA            reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    MAKA            reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    BAISA           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    COLON           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DEKHI           reduce using rule 103 (optindex -> optindex LGPARA aryexpr RGPARA .)


state 181

    (66) graphicdraw -> reference MA string KORA variableExpr .
    (67) variableExpr -> variableExpr . COMMA expr

    DIYE            reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    NEWLINE         reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    ATHAWA          reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    error           reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    BAISA           reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    BAJA            reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    TICHO           reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    MAKA            reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    $end            reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    KAKHA           reduce using rule 66 (graphicdraw -> reference MA string KORA variableExpr .)
    COMMA           shift and go to state 90


state 182

    (58) filewrite -> reference MA variableExpr LEKHA SEMICOLON .

    NEWLINE         reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)
    $end            reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)
    KAKHA           reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)
    TICHO           reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)
    DIYE            reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)
    error           reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)
    ATHAWA          reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)
    BAJA            reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)
    MAKA            reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)
    BAISA           reduce using rule 58 (filewrite -> reference MA variableExpr LEKHA SEMICOLON .)


state 183

    (46) mlif -> YEDI expr BHAE NEWLINE program . DIYE
    (47) mlif -> YEDI expr BHAE NEWLINE program . optelse DIYE
    (128) mlif -> YEDI expr BHAE NEWLINE program . error
    (129) mlif -> YEDI expr BHAE NEWLINE program . optelse error
    (2) program -> program . NEWLINE stmt
    (48) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (49) optelse -> . ATHAWA expr BHAE NEWLINE program
    (50) optelse -> . ATHAWA NEWLINE program
    (126) optelse -> . ATHAWA expr error NEWLINE program optelse
    (127) optelse -> . ATHAWA expr error NEWLINE program

    DIYE            shift and go to state 195
    error           shift and go to state 197
    NEWLINE         shift and go to state 67
    ATHAWA          shift and go to state 196

    optelse                        shift and go to state 198

state 184

    (38) slif -> YEDI expr . BHAE slstmt ATHAWA slstmt
    (39) slif -> YEDI expr . BHAE slstmt
    (122) slif -> YEDI expr . error slstmt
    (123) slif -> YEDI expr . error ATHAWA slstmt
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    BHAE            shift and go to state 199
    error           shift and go to state 200
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 185

    (38) slif -> YEDI expr BHAE slstmt ATHAWA . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (121) empty -> .

    YEDI            shift and go to state 164
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    string                         shift and go to state 8
    filewriteln                    shift and go to state 38
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 71
    return                         shift and go to state 7
    slstmt                         shift and go to state 201
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 166
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 186

    (124) mlif -> YEDI expr error NEWLINE program . DIYE
    (125) mlif -> YEDI expr error NEWLINE program . optelse DIYE
    (2) program -> program . NEWLINE stmt
    (48) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (49) optelse -> . ATHAWA expr BHAE NEWLINE program
    (50) optelse -> . ATHAWA NEWLINE program
    (126) optelse -> . ATHAWA expr error NEWLINE program optelse
    (127) optelse -> . ATHAWA expr error NEWLINE program

    DIYE            shift and go to state 202
    NEWLINE         shift and go to state 67
    ATHAWA          shift and go to state 196

    optelse                        shift and go to state 203

state 187

    (123) slif -> YEDI expr error ATHAWA slstmt .

    NEWLINE         reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)
    DIYE            reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)
    error           reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)
    TICHO           reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)
    ATHAWA          reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)
    $end            reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)
    KAKHA           reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)
    BAJA            reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)
    MAKA            reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)
    BAISA           reduce using rule 123 (slif -> YEDI expr error ATHAWA slstmt .)


state 188

    (55) function -> KAAM IDENTIFIER LPARA variableArgs RPARA . NEWLINE program MAKA

    NEWLINE         shift and go to state 204


state 189

    (70) variableArgs -> variableArgs COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 205


state 190

    (130) function -> KAAM IDENTIFIER LPARA error RPARA . NEWLINE program MAKA

    NEWLINE         shift and go to state 206


state 191

    (56) class -> KHAKA IDENTIFIER NEWLINE program KAKHA .

    NEWLINE         reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    ATHAWA          reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    DIYE            reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    error           reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    BAISA           reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    BAJA            reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    $end            reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    KAKHA           reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    TICHO           reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    MAKA            reduce using rule 56 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)


state 192

    (54) repeatloop -> expr CHOTI NEWLINE program TICHO .

    BAISA           reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    NEWLINE         reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    DIYE            reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    error           reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    ATHAWA          reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    MAKA            reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    BAJA            reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    $end            reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    KAKHA           reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    TICHO           reduce using rule 54 (repeatloop -> expr CHOTI NEWLINE program TICHO .)


state 193

    (53) whileloop -> JABA SAMMA expr NEWLINE program . BAJA
    (2) program -> program . NEWLINE stmt

    BAJA            shift and go to state 207
    NEWLINE         shift and go to state 67


state 194

    (51) forloop -> SABAI reference ASSIGNMENT expr DEKHI . expr NEWLINE program BAISA
    (52) forloop -> SABAI reference ASSIGNMENT expr DEKHI . expr COLON expr NEWLINE program BAISA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    boolean                        shift and go to state 34
    expr                           shift and go to state 208
    float                          shift and go to state 19
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 195

    (46) mlif -> YEDI expr BHAE NEWLINE program DIYE .

    MAKA            reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    NEWLINE         reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    BAISA           reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    BAJA            reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    $end            reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    ATHAWA          reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    DIYE            reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    error           reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    KAKHA           reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    TICHO           reduce using rule 46 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)


state 196

    (48) optelse -> ATHAWA . expr BHAE NEWLINE program optelse
    (49) optelse -> ATHAWA . expr BHAE NEWLINE program
    (50) optelse -> ATHAWA . NEWLINE program
    (126) optelse -> ATHAWA . expr error NEWLINE program optelse
    (127) optelse -> ATHAWA . expr error NEWLINE program
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         shift and go to state 209
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    string                         shift and go to state 8
    reference                      shift and go to state 65
    boolean                        shift and go to state 34
    expr                           shift and go to state 210
    float                          shift and go to state 19
    identifier                     shift and go to state 15
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 197

    (128) mlif -> YEDI expr BHAE NEWLINE program error .

    MAKA            reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)
    NEWLINE         reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)
    BAISA           reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)
    BAJA            reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)
    $end            reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)
    ATHAWA          reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)
    DIYE            reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)
    error           reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)
    KAKHA           reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)
    TICHO           reduce using rule 128 (mlif -> YEDI expr BHAE NEWLINE program error .)


state 198

    (47) mlif -> YEDI expr BHAE NEWLINE program optelse . DIYE
    (129) mlif -> YEDI expr BHAE NEWLINE program optelse . error

    DIYE            shift and go to state 211
    error           shift and go to state 212


state 199

    (38) slif -> YEDI expr BHAE . slstmt ATHAWA slstmt
    (39) slif -> YEDI expr BHAE . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (121) empty -> .

    YEDI            shift and go to state 164
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    string                         shift and go to state 8
    filewriteln                    shift and go to state 38
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 71
    return                         shift and go to state 7
    slstmt                         shift and go to state 165
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 166
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 200

    (122) slif -> YEDI expr error . slstmt
    (123) slif -> YEDI expr error . ATHAWA slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (121) empty -> .

    ATHAWA          shift and go to state 168
    YEDI            shift and go to state 164
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    string                         shift and go to state 8
    filewriteln                    shift and go to state 38
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 71
    return                         shift and go to state 7
    slstmt                         shift and go to state 169
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 166
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 201

    (38) slif -> YEDI expr BHAE slstmt ATHAWA slstmt .

    NEWLINE         reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    DIYE            reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    error           reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    TICHO           reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    ATHAWA          reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    $end            reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    KAKHA           reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    BAJA            reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    MAKA            reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    BAISA           reduce using rule 38 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)


state 202

    (124) mlif -> YEDI expr error NEWLINE program DIYE .

    MAKA            reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)
    NEWLINE         reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)
    BAISA           reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)
    BAJA            reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)
    $end            reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)
    ATHAWA          reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)
    DIYE            reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)
    error           reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)
    KAKHA           reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)
    TICHO           reduce using rule 124 (mlif -> YEDI expr error NEWLINE program DIYE .)


state 203

    (125) mlif -> YEDI expr error NEWLINE program optelse . DIYE

    DIYE            shift and go to state 213


state 204

    (55) function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE . program MAKA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MAKA            reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    program                        shift and go to state 214
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 205

    (70) variableArgs -> variableArgs COMMA IDENTIFIER .

    RPARA           reduce using rule 70 (variableArgs -> variableArgs COMMA IDENTIFIER .)
    COMMA           reduce using rule 70 (variableArgs -> variableArgs COMMA IDENTIFIER .)


state 206

    (130) function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE . program MAKA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MAKA            reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 215
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 207

    (53) whileloop -> JABA SAMMA expr NEWLINE program BAJA .

    NEWLINE         reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    ATHAWA          reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    DIYE            reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    error           reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    MAKA            reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    BAISA           reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    $end            reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    BAJA            reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    KAKHA           reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    TICHO           reduce using rule 53 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)


state 208

    (51) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr . NEWLINE program BAISA
    (52) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr . COLON expr NEWLINE program BAISA
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    NEWLINE         shift and go to state 216
    COLON           shift and go to state 217
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 209

    (50) optelse -> ATHAWA NEWLINE . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 121 (empty -> .)
    DIYE            reduce using rule 121 (empty -> .)
    error           reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 218
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 210

    (48) optelse -> ATHAWA expr . BHAE NEWLINE program optelse
    (49) optelse -> ATHAWA expr . BHAE NEWLINE program
    (126) optelse -> ATHAWA expr . error NEWLINE program optelse
    (127) optelse -> ATHAWA expr . error NEWLINE program
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    BHAE            shift and go to state 219
    error           shift and go to state 220
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 211

    (47) mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .

    MAKA            reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    NEWLINE         reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    BAISA           reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    BAJA            reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    $end            reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    ATHAWA          reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    DIYE            reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    error           reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    KAKHA           reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    TICHO           reduce using rule 47 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)


state 212

    (129) mlif -> YEDI expr BHAE NEWLINE program optelse error .

    MAKA            reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    NEWLINE         reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    BAISA           reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    BAJA            reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    $end            reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    ATHAWA          reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    DIYE            reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    error           reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    KAKHA           reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    TICHO           reduce using rule 129 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)


state 213

    (125) mlif -> YEDI expr error NEWLINE program optelse DIYE .

    MAKA            reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    NEWLINE         reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    BAISA           reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    BAJA            reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    $end            reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    ATHAWA          reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    DIYE            reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    error           reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    KAKHA           reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    TICHO           reduce using rule 125 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)


state 214

    (55) function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program . MAKA
    (2) program -> program . NEWLINE stmt

    MAKA            shift and go to state 221
    NEWLINE         shift and go to state 67


state 215

    (130) function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program . MAKA
    (2) program -> program . NEWLINE stmt

    MAKA            shift and go to state 222
    NEWLINE         shift and go to state 67


state 216

    (51) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE . program BAISA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    BAISA           reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 223
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 217

    (52) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON . expr NEWLINE program BAISA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    MERO            shift and go to state 35
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 65
    boolean                        shift and go to state 34
    expr                           shift and go to state 224
    float                          shift and go to state 19
    functioncall                   shift and go to state 63
    integer                        shift and go to state 11
    imaginary                      shift and go to state 27
    null                           shift and go to state 53
    array                          shift and go to state 36

state 218

    (50) optelse -> ATHAWA NEWLINE program .
    (2) program -> program . NEWLINE stmt

    DIYE            reduce using rule 50 (optelse -> ATHAWA NEWLINE program .)
    error           reduce using rule 50 (optelse -> ATHAWA NEWLINE program .)
    NEWLINE         shift and go to state 67


state 219

    (48) optelse -> ATHAWA expr BHAE . NEWLINE program optelse
    (49) optelse -> ATHAWA expr BHAE . NEWLINE program

    NEWLINE         shift and go to state 225


state 220

    (126) optelse -> ATHAWA expr error . NEWLINE program optelse
    (127) optelse -> ATHAWA expr error . NEWLINE program

    NEWLINE         shift and go to state 226


state 221

    (55) function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .

    MAKA            reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    NEWLINE         reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    TICHO           reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    BAJA            reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    BAISA           reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    KAKHA           reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    $end            reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    DIYE            reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    error           reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    ATHAWA          reduce using rule 55 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)


state 222

    (130) function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .

    MAKA            reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    NEWLINE         reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    TICHO           reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    BAJA            reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    BAISA           reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    KAKHA           reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    $end            reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    DIYE            reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    error           reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    ATHAWA          reduce using rule 130 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)


state 223

    (51) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program . BAISA
    (2) program -> program . NEWLINE stmt

    BAISA           shift and go to state 227
    NEWLINE         shift and go to state 67


state 224

    (52) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr . NEWLINE program BAISA
    (73) expr -> expr . PLUS expr
    (74) expr -> expr . MINUS expr
    (75) expr -> expr . TIMES expr
    (76) expr -> expr . DIVIDE expr
    (77) expr -> expr . MODULUS expr
    (78) expr -> expr . POWER expr
    (111) expr -> expr . GT expr
    (112) expr -> expr . LT expr
    (113) expr -> expr . GE expr
    (114) expr -> expr . LE expr
    (115) expr -> expr . EQ expr
    (116) expr -> expr . NE expr
    (117) expr -> expr . RA expr
    (118) expr -> expr . WA expr
    (119) expr -> expr . CHHA
    (120) expr -> expr . CHHAINA

    NEWLINE         shift and go to state 228
    PLUS            shift and go to state 105
    MINUS           shift and go to state 99
    TIMES           shift and go to state 109
    DIVIDE          shift and go to state 108
    MODULUS         shift and go to state 102
    POWER           shift and go to state 101
    GT              shift and go to state 107
    LT              shift and go to state 104
    GE              shift and go to state 111
    LE              shift and go to state 100
    EQ              shift and go to state 113
    NE              shift and go to state 103
    RA              shift and go to state 106
    WA              shift and go to state 97
    CHHA            shift and go to state 114
    CHHAINA         shift and go to state 98


state 225

    (48) optelse -> ATHAWA expr BHAE NEWLINE . program optelse
    (49) optelse -> ATHAWA expr BHAE NEWLINE . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 121 (empty -> .)
    ATHAWA          reduce using rule 121 (empty -> .)
    DIYE            reduce using rule 121 (empty -> .)
    error           reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 229
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 226

    (126) optelse -> ATHAWA expr error NEWLINE . program optelse
    (127) optelse -> ATHAWA expr error NEWLINE . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 121 (empty -> .)
    ATHAWA          reduce using rule 121 (empty -> .)
    DIYE            reduce using rule 121 (empty -> .)
    error           reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 230
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 227

    (51) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .

    TICHO           reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    NEWLINE         reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    DIYE            reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    ATHAWA          reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    BAJA            reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    error           reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    MAKA            reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    $end            reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    KAKHA           reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    BAISA           reduce using rule 51 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)


state 228

    (52) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE . program BAISA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (121) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) slstmt -> . filewriteln
    (17) slstmt -> . filewrite
    (18) slstmt -> . fileread
    (19) slstmt -> . fileclose
    (20) slstmt -> . graphicshow
    (21) slstmt -> . graphichide
    (22) slstmt -> . graphicclose
    (23) slstmt -> . graphicupdate
    (24) slstmt -> . graphicclear
    (25) slstmt -> . graphicdraw
    (40) mlstmt -> . mlif
    (41) mlstmt -> . forloop
    (42) mlstmt -> . whileloop
    (43) mlstmt -> . repeatloop
    (44) mlstmt -> . function
    (45) mlstmt -> . class
    (26) expression -> . expr
    (27) assignment -> . reference ASSIGNMENT expr
    (28) print -> . variableExpr LEKHA SEMICOLON
    (29) print -> . variableExpr LEKHA
    (30) input -> . variableExpr LEU
    (38) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (39) slif -> . YEDI expr BHAE slstmt
    (122) slif -> . YEDI expr error slstmt
    (123) slif -> . YEDI expr error ATHAWA slstmt
    (31) incremental -> . reference AI expr
    (32) incremental -> . reference SI expr
    (33) incremental -> . reference MI expr
    (34) incremental -> . reference DI expr
    (35) return -> . expr PATHAU
    (36) continue -> . ARKO
    (37) break -> . BAHIRA
    (57) filewriteln -> . reference MA variableExpr LEKHA
    (58) filewrite -> . reference MA variableExpr LEKHA SEMICOLON
    (59) fileread -> . reference BATA reference LEU
    (60) fileclose -> . reference BANDAGARA
    (61) graphicshow -> . reference DEKHAU
    (62) graphichide -> . reference LUKAU
    (63) graphicclose -> . reference HATAU
    (64) graphicupdate -> . reference BANAU
    (65) graphicclear -> . reference METAU
    (66) graphicdraw -> . reference MA string KORA variableExpr
    (46) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (47) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (124) mlif -> . YEDI expr error NEWLINE program DIYE
    (125) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (128) mlif -> . YEDI expr BHAE NEWLINE program error
    (129) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (51) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (52) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (54) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (55) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (130) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (56) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (73) expr -> . expr PLUS expr
    (74) expr -> . expr MINUS expr
    (75) expr -> . expr TIMES expr
    (76) expr -> . expr DIVIDE expr
    (77) expr -> . expr MODULUS expr
    (78) expr -> . expr POWER expr
    (79) expr -> . LPARA expr RPARA
    (80) expr -> . integer
    (81) expr -> . float
    (82) expr -> . imaginary
    (83) expr -> . string
    (84) expr -> . null
    (85) expr -> . boolean
    (86) expr -> . reference
    (87) expr -> . array
    (110) expr -> . MINUS expr
    (111) expr -> . expr GT expr
    (112) expr -> . expr LT expr
    (113) expr -> . expr GE expr
    (114) expr -> . expr LE expr
    (115) expr -> . expr EQ expr
    (116) expr -> . expr NE expr
    (117) expr -> . expr RA expr
    (118) expr -> . expr WA expr
    (119) expr -> . expr CHHA
    (120) expr -> . expr CHHAINA
    (98) reference -> . identifier
    (99) reference -> . functioncall
    (100) reference -> . reference DOT reference
    (101) reference -> . reference KO reference
    (102) reference -> . identifier optindex
    (107) reference -> . MERO reference
    (67) variableExpr -> . variableExpr COMMA expr
    (68) variableExpr -> . expr
    (69) variableExpr -> . empty
    (88) integer -> . DECIMALINTEGER
    (89) integer -> . OCTALINTEGER
    (90) integer -> . HEXAINTEGER
    (91) float -> . FLOAT
    (92) imaginary -> . IMAGNUMBER
    (93) string -> . STRING
    (94) null -> . SUNYA
    (95) boolean -> . SACHO
    (96) boolean -> . JHUTO
    (97) array -> . LGPARA variableExpr RGPARA
    (108) identifier -> . IDENTIFIER
    (109) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    BAISA           reduce using rule 121 (empty -> .)
    NEWLINE         reduce using rule 121 (empty -> .)
    LEKHA           reduce using rule 121 (empty -> .)
    LEU             reduce using rule 121 (empty -> .)
    COMMA           reduce using rule 121 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 54
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 55
    JABA            shift and go to state 51
    KAAM            shift and go to state 39
    KHAKA           shift and go to state 40
    LPARA           shift and go to state 6
    MINUS           shift and go to state 1
    MERO            shift and go to state 35
    DECIMALINTEGER  shift and go to state 56
    OCTALINTEGER    shift and go to state 37
    HEXAINTEGER     shift and go to state 29
    FLOAT           shift and go to state 62
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 58
    SUNYA           shift and go to state 45
    SACHO           shift and go to state 33
    JHUTO           shift and go to state 31
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 41

    slif                           shift and go to state 48
    reference                      shift and go to state 17
    boolean                        shift and go to state 34
    graphicupdate                  shift and go to state 28
    float                          shift and go to state 19
    graphicclose                   shift and go to state 50
    incremental                    shift and go to state 52
    array                          shift and go to state 36
    null                           shift and go to state 53
    imaginary                      shift and go to state 27
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    filewriteln                    shift and go to state 38
    program                        shift and go to state 231
    print                          shift and go to state 22
    input                          shift and go to state 5
    empty                          shift and go to state 42
    function                       shift and go to state 43
    whileloop                      shift and go to state 23
    return                         shift and go to state 7
    slstmt                         shift and go to state 44
    graphicclear                   shift and go to state 24
    assignment                     shift and go to state 59
    filewrite                      shift and go to state 21
    stmt                           shift and go to state 25
    graphichide                    shift and go to state 26
    break                          shift and go to state 10
    mlstmt                         shift and go to state 20
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 60
    repeatloop                     shift and go to state 9
    graphicdraw                    shift and go to state 46
    fileread                       shift and go to state 61
    expr                           shift and go to state 47
    graphicshow                    shift and go to state 49
    variableExpr                   shift and go to state 30
    continue                       shift and go to state 14
    functioncall                   shift and go to state 63
    identifier                     shift and go to state 15
    expression                     shift and go to state 32
    fileclose                      shift and go to state 64

state 229

    (48) optelse -> ATHAWA expr BHAE NEWLINE program . optelse
    (49) optelse -> ATHAWA expr BHAE NEWLINE program .
    (2) program -> program . NEWLINE stmt
    (48) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (49) optelse -> . ATHAWA expr BHAE NEWLINE program
    (50) optelse -> . ATHAWA NEWLINE program
    (126) optelse -> . ATHAWA expr error NEWLINE program optelse
    (127) optelse -> . ATHAWA expr error NEWLINE program

    DIYE            reduce using rule 49 (optelse -> ATHAWA expr BHAE NEWLINE program .)
    error           reduce using rule 49 (optelse -> ATHAWA expr BHAE NEWLINE program .)
    NEWLINE         shift and go to state 67
    ATHAWA          shift and go to state 196

    optelse                        shift and go to state 232

state 230

    (126) optelse -> ATHAWA expr error NEWLINE program . optelse
    (127) optelse -> ATHAWA expr error NEWLINE program .
    (2) program -> program . NEWLINE stmt
    (48) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (49) optelse -> . ATHAWA expr BHAE NEWLINE program
    (50) optelse -> . ATHAWA NEWLINE program
    (126) optelse -> . ATHAWA expr error NEWLINE program optelse
    (127) optelse -> . ATHAWA expr error NEWLINE program

    DIYE            reduce using rule 127 (optelse -> ATHAWA expr error NEWLINE program .)
    error           reduce using rule 127 (optelse -> ATHAWA expr error NEWLINE program .)
    NEWLINE         shift and go to state 67
    ATHAWA          shift and go to state 196

    optelse                        shift and go to state 233

state 231

    (52) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program . BAISA
    (2) program -> program . NEWLINE stmt

    BAISA           shift and go to state 234
    NEWLINE         shift and go to state 67


state 232

    (48) optelse -> ATHAWA expr BHAE NEWLINE program optelse .

    DIYE            reduce using rule 48 (optelse -> ATHAWA expr BHAE NEWLINE program optelse .)
    error           reduce using rule 48 (optelse -> ATHAWA expr BHAE NEWLINE program optelse .)


state 233

    (126) optelse -> ATHAWA expr error NEWLINE program optelse .

    DIYE            reduce using rule 126 (optelse -> ATHAWA expr error NEWLINE program optelse .)
    error           reduce using rule 126 (optelse -> ATHAWA expr error NEWLINE program optelse .)


state 234

    (52) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .

    TICHO           reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    NEWLINE         reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    DIYE            reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    ATHAWA          reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    BAJA            reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    error           reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    MAKA            reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    $end            reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    KAKHA           reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    BAISA           reduce using rule 52 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ATHAWA in state 165 resolved as shift

Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    HATAU
    LUKAU
    KORA
    BOGUS
    BANDAGARA
    BANAU
    BATA
    QUESTION
    NABHAE
    METAU
    MA
    DEKHAU

Grammar

Rule 0     S' -> begin
Rule 1     begin -> program
Rule 2     program -> program NEWLINE stmt
Rule 3     program -> stmt
Rule 4     stmt -> empty
Rule 5     stmt -> slstmt
Rule 6     stmt -> mlstmt
Rule 7     slstmt -> expression
Rule 8     slstmt -> assignment
Rule 9     slstmt -> print
Rule 10    slstmt -> input
Rule 11    slstmt -> slif
Rule 12    slstmt -> incremental
Rule 13    slstmt -> return
Rule 14    slstmt -> continue
Rule 15    slstmt -> break
Rule 16    expression -> expr
Rule 17    assignment -> reference ASSIGNMENT expr
Rule 18    print -> variableExpr LEKHA SEMICOLON
Rule 19    print -> variableExpr LEKHA
Rule 20    input -> variableExpr LEU
Rule 21    incremental -> reference AI expr
Rule 22    incremental -> reference SI expr
Rule 23    incremental -> reference MI expr
Rule 24    incremental -> reference DI expr
Rule 25    return -> expr PATHAU
Rule 26    continue -> ARKO
Rule 27    break -> BAHIRA
Rule 28    slif -> YEDI expr BHAE slstmt ATHAWA slstmt
Rule 29    slif -> YEDI expr BHAE slstmt
Rule 30    mlstmt -> mlif
Rule 31    mlstmt -> forloop
Rule 32    mlstmt -> whileloop
Rule 33    mlstmt -> repeatloop
Rule 34    mlstmt -> function
Rule 35    mlstmt -> class
Rule 36    mlif -> YEDI expr BHAE NEWLINE program DIYE
Rule 37    mlif -> YEDI expr BHAE NEWLINE program optelse DIYE
Rule 38    optelse -> ATHAWA expr BHAE NEWLINE program optelse
Rule 39    optelse -> ATHAWA expr BHAE NEWLINE program
Rule 40    optelse -> ATHAWA NEWLINE program
Rule 41    forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
Rule 42    forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
Rule 43    whileloop -> JABA SAMMA expr NEWLINE program BAJA
Rule 44    repeatloop -> expr CHOTI NEWLINE program TICHO
Rule 45    function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
Rule 46    class -> KHAKA IDENTIFIER NEWLINE program KAKHA
Rule 47    variableExpr -> variableExpr COMMA expr
Rule 48    variableExpr -> expr
Rule 49    variableExpr -> empty
Rule 50    variableArgs -> IDENTIFIER COMMA variableArgs
Rule 51    variableArgs -> IDENTIFIER
Rule 52    variableArgs -> empty
Rule 53    expr -> expr PLUS expr
Rule 54    expr -> expr MINUS expr
Rule 55    expr -> expr TIMES expr
Rule 56    expr -> expr DIVIDE expr
Rule 57    expr -> expr MODULUS expr
Rule 58    expr -> expr POWER expr
Rule 59    expr -> LPARA expr RPARA
Rule 60    expr -> integer
Rule 61    expr -> float
Rule 62    expr -> imaginary
Rule 63    expr -> string
Rule 64    expr -> null
Rule 65    expr -> boolean
Rule 66    expr -> reference
Rule 67    expr -> array
Rule 68    integer -> DECIMALINTEGER
Rule 69    integer -> OCTALINTEGER
Rule 70    integer -> HEXAINTEGER
Rule 71    float -> FLOAT
Rule 72    imaginary -> IMAGNUMBER
Rule 73    string -> STRING
Rule 74    null -> SUNYA
Rule 75    boolean -> SACHO
Rule 76    boolean -> JHUTO
Rule 77    array -> LGPARA variableExpr RGPARA
Rule 78    reference -> identifier
Rule 79    reference -> functioncall
Rule 80    reference -> reference DOT reference
Rule 81    reference -> identifier optindex
Rule 82    optindex -> optindex LGPARA aryexpr RGPARA
Rule 83    optindex -> LGPARA aryexpr RGPARA
Rule 84    aryexpr -> expr
Rule 85    aryexpr -> expr COLON expr
Rule 86    identifier -> IDENTIFIER
Rule 87    functioncall -> IDENTIFIER LPARA variableExpr RPARA
Rule 88    expr -> MINUS expr
Rule 89    expr -> expr GT expr
Rule 90    expr -> expr LT expr
Rule 91    expr -> expr GE expr
Rule 92    expr -> expr LE expr
Rule 93    expr -> expr EQ expr
Rule 94    expr -> expr NE expr
Rule 95    expr -> expr RA expr
Rule 96    expr -> expr WA expr
Rule 97    expr -> expr CHHA
Rule 98    expr -> expr CHHAINA
Rule 99    empty -> <empty>
Rule 100   slif -> YEDI expr error slstmt
Rule 101   slif -> YEDI expr error ATHAWA slstmt
Rule 102   mlif -> YEDI expr error NEWLINE program DIYE
Rule 103   mlif -> YEDI expr error NEWLINE program optelse DIYE
Rule 104   optelse -> ATHAWA expr error NEWLINE program optelse
Rule 105   optelse -> ATHAWA expr error NEWLINE program
Rule 106   mlif -> YEDI expr BHAE NEWLINE program error
Rule 107   mlif -> YEDI expr BHAE NEWLINE program optelse error
Rule 108   function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA

Terminals, with rules where they appear

AI                   : 21
ARKO                 : 26
ASSIGNMENT           : 17 41 42
ATHAWA               : 28 38 39 40 101 104 105
BAHIRA               : 27
BAISA                : 41 42
BAJA                 : 43
BANAU                : 
BANDAGARA            : 
BATA                 : 
BHAE                 : 28 29 36 37 38 39 106 107
BOGUS                : 
CHHA                 : 97
CHHAINA              : 98
CHOTI                : 44
COLON                : 42 85
COMMA                : 47 50
DECIMALINTEGER       : 68
DEKHAU               : 
DEKHI                : 41 42
DI                   : 24
DIVIDE               : 56
DIYE                 : 36 37 102 103
DOT                  : 80
EQ                   : 93
FLOAT                : 71
GE                   : 91
GT                   : 89
HATAU                : 
HEXAINTEGER          : 70
IDENTIFIER           : 45 46 50 51 86 87 108
IMAGNUMBER           : 72
JABA                 : 43
JHUTO                : 76
KAAM                 : 45 108
KAKHA                : 46
KHAKA                : 46
KORA                 : 
LE                   : 92
LEKHA                : 18 19
LEU                  : 20
LGPARA               : 77 82 83
LPARA                : 45 59 87 108
LT                   : 90
LUKAU                : 
MA                   : 
MAKA                 : 45 108
METAU                : 
MI                   : 23
MINUS                : 54 88
MODULUS              : 57
NABHAE               : 
NE                   : 94
NEWLINE              : 2 36 37 38 39 40 41 42 43 44 45 46 102 103 104 105 106 107 108
OCTALINTEGER         : 69
PATHAU               : 25
PLUS                 : 53
POWER                : 58
QUESTION             : 
RA                   : 95
RGPARA               : 77 82 83
RPARA                : 45 59 87 108
SABAI                : 41 42
SACHO                : 75
SAMMA                : 43
SEMICOLON            : 18
SI                   : 22
STRING               : 73
SUNYA                : 74
TICHO                : 44
TIMES                : 55
WA                   : 96
YEDI                 : 28 29 36 37 100 101 102 103 106 107
error                : 100 101 102 103 104 105 106 107 108

Nonterminals, with rules where they appear

array                : 67
aryexpr              : 82 83
assignment           : 8
begin                : 0
boolean              : 65
break                : 15
class                : 35
continue             : 14
empty                : 4 49 52
expr                 : 16 17 21 22 23 24 25 28 29 36 37 38 39 41 41 42 42 42 43 44 47 48 53 53 54 54 55 55 56 56 57 57 58 58 59 84 85 85 88 89 89 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 98 100 101 102 103 104 105 106 107
expression           : 7
float                : 61
forloop              : 31
function             : 34
functioncall         : 79
identifier           : 78 81
imaginary            : 62
incremental          : 12
input                : 10
integer              : 60
mlif                 : 30
mlstmt               : 6
null                 : 64
optelse              : 37 38 103 104 107
optindex             : 81 82
print                : 9
program              : 1 2 36 37 38 39 40 41 42 43 44 45 46 102 103 104 105 106 107 108
reference            : 17 21 22 23 24 41 42 66 80 80
repeatloop           : 33
return               : 13
slif                 : 11
slstmt               : 5 28 28 29 100 101
stmt                 : 2 3
string               : 63
variableArgs         : 45 50
variableExpr         : 18 19 20 47 77 87
whileloop            : 32

Parsing method: LALR

state 0

    (0) S' -> . begin
    (1) begin -> . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 99 (empty -> .)
    $end            reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 4
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    begin                          shift and go to state 49
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 1

    (88) expr -> MINUS . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 55
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 2

    (27) break -> BAHIRA .

    NEWLINE         reduce using rule 27 (break -> BAHIRA .)
    $end            reduce using rule 27 (break -> BAHIRA .)
    KAKHA           reduce using rule 27 (break -> BAHIRA .)
    TICHO           reduce using rule 27 (break -> BAHIRA .)
    DIYE            reduce using rule 27 (break -> BAHIRA .)
    error           reduce using rule 27 (break -> BAHIRA .)
    ATHAWA          reduce using rule 27 (break -> BAHIRA .)
    BAJA            reduce using rule 27 (break -> BAHIRA .)
    MAKA            reduce using rule 27 (break -> BAHIRA .)
    BAISA           reduce using rule 27 (break -> BAHIRA .)


state 3

    (31) mlstmt -> forloop .

    BAJA            reduce using rule 31 (mlstmt -> forloop .)
    NEWLINE         reduce using rule 31 (mlstmt -> forloop .)
    MAKA            reduce using rule 31 (mlstmt -> forloop .)
    $end            reduce using rule 31 (mlstmt -> forloop .)
    DIYE            reduce using rule 31 (mlstmt -> forloop .)
    error           reduce using rule 31 (mlstmt -> forloop .)
    KAKHA           reduce using rule 31 (mlstmt -> forloop .)
    ATHAWA          reduce using rule 31 (mlstmt -> forloop .)
    BAISA           reduce using rule 31 (mlstmt -> forloop .)
    TICHO           reduce using rule 31 (mlstmt -> forloop .)


state 4

    (1) begin -> program .
    (2) program -> program . NEWLINE stmt

    $end            reduce using rule 1 (begin -> program .)
    NEWLINE         shift and go to state 56


state 5

    (10) slstmt -> input .

    BAISA           reduce using rule 10 (slstmt -> input .)
    NEWLINE         reduce using rule 10 (slstmt -> input .)
    DIYE            reduce using rule 10 (slstmt -> input .)
    error           reduce using rule 10 (slstmt -> input .)
    BAJA            reduce using rule 10 (slstmt -> input .)
    $end            reduce using rule 10 (slstmt -> input .)
    KAKHA           reduce using rule 10 (slstmt -> input .)
    TICHO           reduce using rule 10 (slstmt -> input .)
    ATHAWA          reduce using rule 10 (slstmt -> input .)
    MAKA            reduce using rule 10 (slstmt -> input .)


state 6

    (61) expr -> float .

    NEWLINE         reduce using rule 61 (expr -> float .)
    PLUS            reduce using rule 61 (expr -> float .)
    MINUS           reduce using rule 61 (expr -> float .)
    TIMES           reduce using rule 61 (expr -> float .)
    DIVIDE          reduce using rule 61 (expr -> float .)
    MODULUS         reduce using rule 61 (expr -> float .)
    POWER           reduce using rule 61 (expr -> float .)
    GT              reduce using rule 61 (expr -> float .)
    LT              reduce using rule 61 (expr -> float .)
    GE              reduce using rule 61 (expr -> float .)
    LE              reduce using rule 61 (expr -> float .)
    EQ              reduce using rule 61 (expr -> float .)
    NE              reduce using rule 61 (expr -> float .)
    RA              reduce using rule 61 (expr -> float .)
    WA              reduce using rule 61 (expr -> float .)
    CHHA            reduce using rule 61 (expr -> float .)
    CHHAINA         reduce using rule 61 (expr -> float .)
    PATHAU          reduce using rule 61 (expr -> float .)
    CHOTI           reduce using rule 61 (expr -> float .)
    MAKA            reduce using rule 61 (expr -> float .)
    LEKHA           reduce using rule 61 (expr -> float .)
    LEU             reduce using rule 61 (expr -> float .)
    COMMA           reduce using rule 61 (expr -> float .)
    $end            reduce using rule 61 (expr -> float .)
    KAKHA           reduce using rule 61 (expr -> float .)
    TICHO           reduce using rule 61 (expr -> float .)
    DIYE            reduce using rule 61 (expr -> float .)
    error           reduce using rule 61 (expr -> float .)
    ATHAWA          reduce using rule 61 (expr -> float .)
    BAJA            reduce using rule 61 (expr -> float .)
    BAISA           reduce using rule 61 (expr -> float .)
    RGPARA          reduce using rule 61 (expr -> float .)
    BHAE            reduce using rule 61 (expr -> float .)
    RPARA           reduce using rule 61 (expr -> float .)
    COLON           reduce using rule 61 (expr -> float .)
    DEKHI           reduce using rule 61 (expr -> float .)


state 7

    (13) slstmt -> return .

    BAISA           reduce using rule 13 (slstmt -> return .)
    NEWLINE         reduce using rule 13 (slstmt -> return .)
    DIYE            reduce using rule 13 (slstmt -> return .)
    error           reduce using rule 13 (slstmt -> return .)
    BAJA            reduce using rule 13 (slstmt -> return .)
    $end            reduce using rule 13 (slstmt -> return .)
    KAKHA           reduce using rule 13 (slstmt -> return .)
    TICHO           reduce using rule 13 (slstmt -> return .)
    ATHAWA          reduce using rule 13 (slstmt -> return .)
    MAKA            reduce using rule 13 (slstmt -> return .)


state 8

    (63) expr -> string .

    NEWLINE         reduce using rule 63 (expr -> string .)
    PLUS            reduce using rule 63 (expr -> string .)
    MINUS           reduce using rule 63 (expr -> string .)
    TIMES           reduce using rule 63 (expr -> string .)
    DIVIDE          reduce using rule 63 (expr -> string .)
    MODULUS         reduce using rule 63 (expr -> string .)
    POWER           reduce using rule 63 (expr -> string .)
    GT              reduce using rule 63 (expr -> string .)
    LT              reduce using rule 63 (expr -> string .)
    GE              reduce using rule 63 (expr -> string .)
    LE              reduce using rule 63 (expr -> string .)
    EQ              reduce using rule 63 (expr -> string .)
    NE              reduce using rule 63 (expr -> string .)
    RA              reduce using rule 63 (expr -> string .)
    WA              reduce using rule 63 (expr -> string .)
    CHHA            reduce using rule 63 (expr -> string .)
    CHHAINA         reduce using rule 63 (expr -> string .)
    PATHAU          reduce using rule 63 (expr -> string .)
    CHOTI           reduce using rule 63 (expr -> string .)
    MAKA            reduce using rule 63 (expr -> string .)
    LEKHA           reduce using rule 63 (expr -> string .)
    LEU             reduce using rule 63 (expr -> string .)
    COMMA           reduce using rule 63 (expr -> string .)
    $end            reduce using rule 63 (expr -> string .)
    KAKHA           reduce using rule 63 (expr -> string .)
    TICHO           reduce using rule 63 (expr -> string .)
    DIYE            reduce using rule 63 (expr -> string .)
    error           reduce using rule 63 (expr -> string .)
    ATHAWA          reduce using rule 63 (expr -> string .)
    BAJA            reduce using rule 63 (expr -> string .)
    BAISA           reduce using rule 63 (expr -> string .)
    RGPARA          reduce using rule 63 (expr -> string .)
    BHAE            reduce using rule 63 (expr -> string .)
    RPARA           reduce using rule 63 (expr -> string .)
    COLON           reduce using rule 63 (expr -> string .)
    DEKHI           reduce using rule 63 (expr -> string .)


state 9

    (33) mlstmt -> repeatloop .

    BAJA            reduce using rule 33 (mlstmt -> repeatloop .)
    NEWLINE         reduce using rule 33 (mlstmt -> repeatloop .)
    MAKA            reduce using rule 33 (mlstmt -> repeatloop .)
    $end            reduce using rule 33 (mlstmt -> repeatloop .)
    DIYE            reduce using rule 33 (mlstmt -> repeatloop .)
    error           reduce using rule 33 (mlstmt -> repeatloop .)
    KAKHA           reduce using rule 33 (mlstmt -> repeatloop .)
    ATHAWA          reduce using rule 33 (mlstmt -> repeatloop .)
    BAISA           reduce using rule 33 (mlstmt -> repeatloop .)
    TICHO           reduce using rule 33 (mlstmt -> repeatloop .)


state 10

    (15) slstmt -> break .

    BAISA           reduce using rule 15 (slstmt -> break .)
    NEWLINE         reduce using rule 15 (slstmt -> break .)
    DIYE            reduce using rule 15 (slstmt -> break .)
    error           reduce using rule 15 (slstmt -> break .)
    BAJA            reduce using rule 15 (slstmt -> break .)
    $end            reduce using rule 15 (slstmt -> break .)
    KAKHA           reduce using rule 15 (slstmt -> break .)
    TICHO           reduce using rule 15 (slstmt -> break .)
    ATHAWA          reduce using rule 15 (slstmt -> break .)
    MAKA            reduce using rule 15 (slstmt -> break .)


state 11

    (60) expr -> integer .

    NEWLINE         reduce using rule 60 (expr -> integer .)
    PLUS            reduce using rule 60 (expr -> integer .)
    MINUS           reduce using rule 60 (expr -> integer .)
    TIMES           reduce using rule 60 (expr -> integer .)
    DIVIDE          reduce using rule 60 (expr -> integer .)
    MODULUS         reduce using rule 60 (expr -> integer .)
    POWER           reduce using rule 60 (expr -> integer .)
    GT              reduce using rule 60 (expr -> integer .)
    LT              reduce using rule 60 (expr -> integer .)
    GE              reduce using rule 60 (expr -> integer .)
    LE              reduce using rule 60 (expr -> integer .)
    EQ              reduce using rule 60 (expr -> integer .)
    NE              reduce using rule 60 (expr -> integer .)
    RA              reduce using rule 60 (expr -> integer .)
    WA              reduce using rule 60 (expr -> integer .)
    CHHA            reduce using rule 60 (expr -> integer .)
    CHHAINA         reduce using rule 60 (expr -> integer .)
    PATHAU          reduce using rule 60 (expr -> integer .)
    CHOTI           reduce using rule 60 (expr -> integer .)
    MAKA            reduce using rule 60 (expr -> integer .)
    LEKHA           reduce using rule 60 (expr -> integer .)
    LEU             reduce using rule 60 (expr -> integer .)
    COMMA           reduce using rule 60 (expr -> integer .)
    $end            reduce using rule 60 (expr -> integer .)
    KAKHA           reduce using rule 60 (expr -> integer .)
    TICHO           reduce using rule 60 (expr -> integer .)
    DIYE            reduce using rule 60 (expr -> integer .)
    error           reduce using rule 60 (expr -> integer .)
    ATHAWA          reduce using rule 60 (expr -> integer .)
    BAJA            reduce using rule 60 (expr -> integer .)
    BAISA           reduce using rule 60 (expr -> integer .)
    RGPARA          reduce using rule 60 (expr -> integer .)
    BHAE            reduce using rule 60 (expr -> integer .)
    RPARA           reduce using rule 60 (expr -> integer .)
    COLON           reduce using rule 60 (expr -> integer .)
    DEKHI           reduce using rule 60 (expr -> integer .)


state 12

    (30) mlstmt -> mlif .

    BAJA            reduce using rule 30 (mlstmt -> mlif .)
    NEWLINE         reduce using rule 30 (mlstmt -> mlif .)
    MAKA            reduce using rule 30 (mlstmt -> mlif .)
    $end            reduce using rule 30 (mlstmt -> mlif .)
    DIYE            reduce using rule 30 (mlstmt -> mlif .)
    error           reduce using rule 30 (mlstmt -> mlif .)
    KAKHA           reduce using rule 30 (mlstmt -> mlif .)
    ATHAWA          reduce using rule 30 (mlstmt -> mlif .)
    BAISA           reduce using rule 30 (mlstmt -> mlif .)
    TICHO           reduce using rule 30 (mlstmt -> mlif .)


state 13

    (72) imaginary -> IMAGNUMBER .

    PATHAU          reduce using rule 72 (imaginary -> IMAGNUMBER .)
    CHOTI           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    PLUS            reduce using rule 72 (imaginary -> IMAGNUMBER .)
    MINUS           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    TIMES           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    DIVIDE          reduce using rule 72 (imaginary -> IMAGNUMBER .)
    MODULUS         reduce using rule 72 (imaginary -> IMAGNUMBER .)
    POWER           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    GT              reduce using rule 72 (imaginary -> IMAGNUMBER .)
    LT              reduce using rule 72 (imaginary -> IMAGNUMBER .)
    GE              reduce using rule 72 (imaginary -> IMAGNUMBER .)
    LE              reduce using rule 72 (imaginary -> IMAGNUMBER .)
    EQ              reduce using rule 72 (imaginary -> IMAGNUMBER .)
    NE              reduce using rule 72 (imaginary -> IMAGNUMBER .)
    RA              reduce using rule 72 (imaginary -> IMAGNUMBER .)
    WA              reduce using rule 72 (imaginary -> IMAGNUMBER .)
    CHHA            reduce using rule 72 (imaginary -> IMAGNUMBER .)
    CHHAINA         reduce using rule 72 (imaginary -> IMAGNUMBER .)
    NEWLINE         reduce using rule 72 (imaginary -> IMAGNUMBER .)
    ATHAWA          reduce using rule 72 (imaginary -> IMAGNUMBER .)
    DIYE            reduce using rule 72 (imaginary -> IMAGNUMBER .)
    error           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    LEKHA           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    LEU             reduce using rule 72 (imaginary -> IMAGNUMBER .)
    COMMA           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    $end            reduce using rule 72 (imaginary -> IMAGNUMBER .)
    KAKHA           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    TICHO           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    BAJA            reduce using rule 72 (imaginary -> IMAGNUMBER .)
    MAKA            reduce using rule 72 (imaginary -> IMAGNUMBER .)
    BAISA           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    RGPARA          reduce using rule 72 (imaginary -> IMAGNUMBER .)
    BHAE            reduce using rule 72 (imaginary -> IMAGNUMBER .)
    RPARA           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    COLON           reduce using rule 72 (imaginary -> IMAGNUMBER .)
    DEKHI           reduce using rule 72 (imaginary -> IMAGNUMBER .)


state 14

    (14) slstmt -> continue .

    BAISA           reduce using rule 14 (slstmt -> continue .)
    NEWLINE         reduce using rule 14 (slstmt -> continue .)
    DIYE            reduce using rule 14 (slstmt -> continue .)
    error           reduce using rule 14 (slstmt -> continue .)
    BAJA            reduce using rule 14 (slstmt -> continue .)
    $end            reduce using rule 14 (slstmt -> continue .)
    KAKHA           reduce using rule 14 (slstmt -> continue .)
    TICHO           reduce using rule 14 (slstmt -> continue .)
    ATHAWA          reduce using rule 14 (slstmt -> continue .)
    MAKA            reduce using rule 14 (slstmt -> continue .)


state 15

    (78) reference -> identifier .
    (81) reference -> identifier . optindex
    (82) optindex -> . optindex LGPARA aryexpr RGPARA
    (83) optindex -> . LGPARA aryexpr RGPARA

    DOT             reduce using rule 78 (reference -> identifier .)
    PLUS            reduce using rule 78 (reference -> identifier .)
    MINUS           reduce using rule 78 (reference -> identifier .)
    TIMES           reduce using rule 78 (reference -> identifier .)
    DIVIDE          reduce using rule 78 (reference -> identifier .)
    MODULUS         reduce using rule 78 (reference -> identifier .)
    POWER           reduce using rule 78 (reference -> identifier .)
    GT              reduce using rule 78 (reference -> identifier .)
    LT              reduce using rule 78 (reference -> identifier .)
    GE              reduce using rule 78 (reference -> identifier .)
    LE              reduce using rule 78 (reference -> identifier .)
    EQ              reduce using rule 78 (reference -> identifier .)
    NE              reduce using rule 78 (reference -> identifier .)
    RA              reduce using rule 78 (reference -> identifier .)
    WA              reduce using rule 78 (reference -> identifier .)
    CHHA            reduce using rule 78 (reference -> identifier .)
    CHHAINA         reduce using rule 78 (reference -> identifier .)
    PATHAU          reduce using rule 78 (reference -> identifier .)
    CHOTI           reduce using rule 78 (reference -> identifier .)
    NEWLINE         reduce using rule 78 (reference -> identifier .)
    $end            reduce using rule 78 (reference -> identifier .)
    LEKHA           reduce using rule 78 (reference -> identifier .)
    LEU             reduce using rule 78 (reference -> identifier .)
    COMMA           reduce using rule 78 (reference -> identifier .)
    RGPARA          reduce using rule 78 (reference -> identifier .)
    BHAE            reduce using rule 78 (reference -> identifier .)
    error           reduce using rule 78 (reference -> identifier .)
    RPARA           reduce using rule 78 (reference -> identifier .)
    KAKHA           reduce using rule 78 (reference -> identifier .)
    TICHO           reduce using rule 78 (reference -> identifier .)
    DIYE            reduce using rule 78 (reference -> identifier .)
    ATHAWA          reduce using rule 78 (reference -> identifier .)
    BAJA            reduce using rule 78 (reference -> identifier .)
    MAKA            reduce using rule 78 (reference -> identifier .)
    BAISA           reduce using rule 78 (reference -> identifier .)
    COLON           reduce using rule 78 (reference -> identifier .)
    DEKHI           reduce using rule 78 (reference -> identifier .)
    ASSIGNMENT      reduce using rule 78 (reference -> identifier .)
    AI              reduce using rule 78 (reference -> identifier .)
    SI              reduce using rule 78 (reference -> identifier .)
    MI              reduce using rule 78 (reference -> identifier .)
    DI              reduce using rule 78 (reference -> identifier .)
    LGPARA          shift and go to state 57

    optindex                       shift and go to state 58

state 16

    (77) array -> LGPARA . variableExpr RGPARA
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (99) empty -> .
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    RGPARA          reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 60
    float                          shift and go to state 6
    variableExpr                   shift and go to state 61
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32
    empty                          shift and go to state 59

state 17

    (17) assignment -> reference . ASSIGNMENT expr
    (21) incremental -> reference . AI expr
    (22) incremental -> reference . SI expr
    (23) incremental -> reference . MI expr
    (24) incremental -> reference . DI expr
    (66) expr -> reference .
    (80) reference -> reference . DOT reference

    ASSIGNMENT      shift and go to state 64
    AI              shift and go to state 63
    SI              shift and go to state 66
    MI              shift and go to state 65
    DI              shift and go to state 62
    PATHAU          reduce using rule 66 (expr -> reference .)
    CHOTI           reduce using rule 66 (expr -> reference .)
    PLUS            reduce using rule 66 (expr -> reference .)
    MINUS           reduce using rule 66 (expr -> reference .)
    TIMES           reduce using rule 66 (expr -> reference .)
    DIVIDE          reduce using rule 66 (expr -> reference .)
    MODULUS         reduce using rule 66 (expr -> reference .)
    POWER           reduce using rule 66 (expr -> reference .)
    GT              reduce using rule 66 (expr -> reference .)
    LT              reduce using rule 66 (expr -> reference .)
    GE              reduce using rule 66 (expr -> reference .)
    LE              reduce using rule 66 (expr -> reference .)
    EQ              reduce using rule 66 (expr -> reference .)
    NE              reduce using rule 66 (expr -> reference .)
    RA              reduce using rule 66 (expr -> reference .)
    WA              reduce using rule 66 (expr -> reference .)
    CHHA            reduce using rule 66 (expr -> reference .)
    CHHAINA         reduce using rule 66 (expr -> reference .)
    MAKA            reduce using rule 66 (expr -> reference .)
    NEWLINE         reduce using rule 66 (expr -> reference .)
    LEKHA           reduce using rule 66 (expr -> reference .)
    LEU             reduce using rule 66 (expr -> reference .)
    COMMA           reduce using rule 66 (expr -> reference .)
    $end            reduce using rule 66 (expr -> reference .)
    KAKHA           reduce using rule 66 (expr -> reference .)
    TICHO           reduce using rule 66 (expr -> reference .)
    DIYE            reduce using rule 66 (expr -> reference .)
    error           reduce using rule 66 (expr -> reference .)
    ATHAWA          reduce using rule 66 (expr -> reference .)
    BAJA            reduce using rule 66 (expr -> reference .)
    BAISA           reduce using rule 66 (expr -> reference .)
    DOT             shift and go to state 67


state 18

    (28) slif -> YEDI . expr BHAE slstmt ATHAWA slstmt
    (29) slif -> YEDI . expr BHAE slstmt
    (100) slif -> YEDI . expr error slstmt
    (101) slif -> YEDI . expr error ATHAWA slstmt
    (36) mlif -> YEDI . expr BHAE NEWLINE program DIYE
    (37) mlif -> YEDI . expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> YEDI . expr error NEWLINE program DIYE
    (103) mlif -> YEDI . expr error NEWLINE program optelse DIYE
    (106) mlif -> YEDI . expr BHAE NEWLINE program error
    (107) mlif -> YEDI . expr BHAE NEWLINE program optelse error
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    reference                      shift and go to state 54
    boolean                        shift and go to state 31
    expr                           shift and go to state 68
    float                          shift and go to state 6
    identifier                     shift and go to state 15
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32
    string                         shift and go to state 8

state 19

    (6) stmt -> mlstmt .

    MAKA            reduce using rule 6 (stmt -> mlstmt .)
    NEWLINE         reduce using rule 6 (stmt -> mlstmt .)
    BAISA           reduce using rule 6 (stmt -> mlstmt .)
    DIYE            reduce using rule 6 (stmt -> mlstmt .)
    ATHAWA          reduce using rule 6 (stmt -> mlstmt .)
    BAJA            reduce using rule 6 (stmt -> mlstmt .)
    error           reduce using rule 6 (stmt -> mlstmt .)
    KAKHA           reduce using rule 6 (stmt -> mlstmt .)
    TICHO           reduce using rule 6 (stmt -> mlstmt .)
    $end            reduce using rule 6 (stmt -> mlstmt .)


state 20

    (43) whileloop -> JABA . SAMMA expr NEWLINE program BAJA

    SAMMA           shift and go to state 69


state 21

    (9) slstmt -> print .

    BAISA           reduce using rule 9 (slstmt -> print .)
    NEWLINE         reduce using rule 9 (slstmt -> print .)
    DIYE            reduce using rule 9 (slstmt -> print .)
    error           reduce using rule 9 (slstmt -> print .)
    BAJA            reduce using rule 9 (slstmt -> print .)
    $end            reduce using rule 9 (slstmt -> print .)
    KAKHA           reduce using rule 9 (slstmt -> print .)
    TICHO           reduce using rule 9 (slstmt -> print .)
    ATHAWA          reduce using rule 9 (slstmt -> print .)
    MAKA            reduce using rule 9 (slstmt -> print .)


state 22

    (32) mlstmt -> whileloop .

    BAJA            reduce using rule 32 (mlstmt -> whileloop .)
    NEWLINE         reduce using rule 32 (mlstmt -> whileloop .)
    MAKA            reduce using rule 32 (mlstmt -> whileloop .)
    $end            reduce using rule 32 (mlstmt -> whileloop .)
    DIYE            reduce using rule 32 (mlstmt -> whileloop .)
    error           reduce using rule 32 (mlstmt -> whileloop .)
    KAKHA           reduce using rule 32 (mlstmt -> whileloop .)
    ATHAWA          reduce using rule 32 (mlstmt -> whileloop .)
    BAISA           reduce using rule 32 (mlstmt -> whileloop .)
    TICHO           reduce using rule 32 (mlstmt -> whileloop .)


state 23

    (3) program -> stmt .

    BAISA           reduce using rule 3 (program -> stmt .)
    NEWLINE         reduce using rule 3 (program -> stmt .)
    DIYE            reduce using rule 3 (program -> stmt .)
    ATHAWA          reduce using rule 3 (program -> stmt .)
    MAKA            reduce using rule 3 (program -> stmt .)
    error           reduce using rule 3 (program -> stmt .)
    KAKHA           reduce using rule 3 (program -> stmt .)
    $end            reduce using rule 3 (program -> stmt .)
    BAJA            reduce using rule 3 (program -> stmt .)
    TICHO           reduce using rule 3 (program -> stmt .)


state 24

    (62) expr -> imaginary .

    NEWLINE         reduce using rule 62 (expr -> imaginary .)
    PLUS            reduce using rule 62 (expr -> imaginary .)
    MINUS           reduce using rule 62 (expr -> imaginary .)
    TIMES           reduce using rule 62 (expr -> imaginary .)
    DIVIDE          reduce using rule 62 (expr -> imaginary .)
    MODULUS         reduce using rule 62 (expr -> imaginary .)
    POWER           reduce using rule 62 (expr -> imaginary .)
    GT              reduce using rule 62 (expr -> imaginary .)
    LT              reduce using rule 62 (expr -> imaginary .)
    GE              reduce using rule 62 (expr -> imaginary .)
    LE              reduce using rule 62 (expr -> imaginary .)
    EQ              reduce using rule 62 (expr -> imaginary .)
    NE              reduce using rule 62 (expr -> imaginary .)
    RA              reduce using rule 62 (expr -> imaginary .)
    WA              reduce using rule 62 (expr -> imaginary .)
    CHHA            reduce using rule 62 (expr -> imaginary .)
    CHHAINA         reduce using rule 62 (expr -> imaginary .)
    PATHAU          reduce using rule 62 (expr -> imaginary .)
    CHOTI           reduce using rule 62 (expr -> imaginary .)
    MAKA            reduce using rule 62 (expr -> imaginary .)
    LEKHA           reduce using rule 62 (expr -> imaginary .)
    LEU             reduce using rule 62 (expr -> imaginary .)
    COMMA           reduce using rule 62 (expr -> imaginary .)
    $end            reduce using rule 62 (expr -> imaginary .)
    KAKHA           reduce using rule 62 (expr -> imaginary .)
    TICHO           reduce using rule 62 (expr -> imaginary .)
    DIYE            reduce using rule 62 (expr -> imaginary .)
    error           reduce using rule 62 (expr -> imaginary .)
    ATHAWA          reduce using rule 62 (expr -> imaginary .)
    BAJA            reduce using rule 62 (expr -> imaginary .)
    BAISA           reduce using rule 62 (expr -> imaginary .)
    RGPARA          reduce using rule 62 (expr -> imaginary .)
    BHAE            reduce using rule 62 (expr -> imaginary .)
    RPARA           reduce using rule 62 (expr -> imaginary .)
    COLON           reduce using rule 62 (expr -> imaginary .)
    DEKHI           reduce using rule 62 (expr -> imaginary .)


state 25

    (70) integer -> HEXAINTEGER .

    PATHAU          reduce using rule 70 (integer -> HEXAINTEGER .)
    PLUS            reduce using rule 70 (integer -> HEXAINTEGER .)
    MINUS           reduce using rule 70 (integer -> HEXAINTEGER .)
    TIMES           reduce using rule 70 (integer -> HEXAINTEGER .)
    DIVIDE          reduce using rule 70 (integer -> HEXAINTEGER .)
    MODULUS         reduce using rule 70 (integer -> HEXAINTEGER .)
    POWER           reduce using rule 70 (integer -> HEXAINTEGER .)
    GT              reduce using rule 70 (integer -> HEXAINTEGER .)
    LT              reduce using rule 70 (integer -> HEXAINTEGER .)
    GE              reduce using rule 70 (integer -> HEXAINTEGER .)
    LE              reduce using rule 70 (integer -> HEXAINTEGER .)
    EQ              reduce using rule 70 (integer -> HEXAINTEGER .)
    NE              reduce using rule 70 (integer -> HEXAINTEGER .)
    RA              reduce using rule 70 (integer -> HEXAINTEGER .)
    WA              reduce using rule 70 (integer -> HEXAINTEGER .)
    CHHA            reduce using rule 70 (integer -> HEXAINTEGER .)
    CHHAINA         reduce using rule 70 (integer -> HEXAINTEGER .)
    NEWLINE         reduce using rule 70 (integer -> HEXAINTEGER .)
    $end            reduce using rule 70 (integer -> HEXAINTEGER .)
    KAKHA           reduce using rule 70 (integer -> HEXAINTEGER .)
    TICHO           reduce using rule 70 (integer -> HEXAINTEGER .)
    DIYE            reduce using rule 70 (integer -> HEXAINTEGER .)
    error           reduce using rule 70 (integer -> HEXAINTEGER .)
    ATHAWA          reduce using rule 70 (integer -> HEXAINTEGER .)
    BAJA            reduce using rule 70 (integer -> HEXAINTEGER .)
    MAKA            reduce using rule 70 (integer -> HEXAINTEGER .)
    BAISA           reduce using rule 70 (integer -> HEXAINTEGER .)
    LEKHA           reduce using rule 70 (integer -> HEXAINTEGER .)
    LEU             reduce using rule 70 (integer -> HEXAINTEGER .)
    COMMA           reduce using rule 70 (integer -> HEXAINTEGER .)
    BHAE            reduce using rule 70 (integer -> HEXAINTEGER .)
    CHOTI           reduce using rule 70 (integer -> HEXAINTEGER .)
    RGPARA          reduce using rule 70 (integer -> HEXAINTEGER .)
    RPARA           reduce using rule 70 (integer -> HEXAINTEGER .)
    COLON           reduce using rule 70 (integer -> HEXAINTEGER .)
    DEKHI           reduce using rule 70 (integer -> HEXAINTEGER .)


state 26

    (18) print -> variableExpr . LEKHA SEMICOLON
    (19) print -> variableExpr . LEKHA
    (20) input -> variableExpr . LEU
    (47) variableExpr -> variableExpr . COMMA expr

    LEKHA           shift and go to state 72
    LEU             shift and go to state 71
    COMMA           shift and go to state 70


state 27

    (76) boolean -> JHUTO .

    PATHAU          reduce using rule 76 (boolean -> JHUTO .)
    CHOTI           reduce using rule 76 (boolean -> JHUTO .)
    PLUS            reduce using rule 76 (boolean -> JHUTO .)
    MINUS           reduce using rule 76 (boolean -> JHUTO .)
    TIMES           reduce using rule 76 (boolean -> JHUTO .)
    DIVIDE          reduce using rule 76 (boolean -> JHUTO .)
    MODULUS         reduce using rule 76 (boolean -> JHUTO .)
    POWER           reduce using rule 76 (boolean -> JHUTO .)
    GT              reduce using rule 76 (boolean -> JHUTO .)
    LT              reduce using rule 76 (boolean -> JHUTO .)
    GE              reduce using rule 76 (boolean -> JHUTO .)
    LE              reduce using rule 76 (boolean -> JHUTO .)
    EQ              reduce using rule 76 (boolean -> JHUTO .)
    NE              reduce using rule 76 (boolean -> JHUTO .)
    RA              reduce using rule 76 (boolean -> JHUTO .)
    WA              reduce using rule 76 (boolean -> JHUTO .)
    CHHA            reduce using rule 76 (boolean -> JHUTO .)
    CHHAINA         reduce using rule 76 (boolean -> JHUTO .)
    BAJA            reduce using rule 76 (boolean -> JHUTO .)
    NEWLINE         reduce using rule 76 (boolean -> JHUTO .)
    LEKHA           reduce using rule 76 (boolean -> JHUTO .)
    LEU             reduce using rule 76 (boolean -> JHUTO .)
    COMMA           reduce using rule 76 (boolean -> JHUTO .)
    DEKHI           reduce using rule 76 (boolean -> JHUTO .)
    $end            reduce using rule 76 (boolean -> JHUTO .)
    RGPARA          reduce using rule 76 (boolean -> JHUTO .)
    BHAE            reduce using rule 76 (boolean -> JHUTO .)
    error           reduce using rule 76 (boolean -> JHUTO .)
    RPARA           reduce using rule 76 (boolean -> JHUTO .)
    KAKHA           reduce using rule 76 (boolean -> JHUTO .)
    TICHO           reduce using rule 76 (boolean -> JHUTO .)
    DIYE            reduce using rule 76 (boolean -> JHUTO .)
    ATHAWA          reduce using rule 76 (boolean -> JHUTO .)
    MAKA            reduce using rule 76 (boolean -> JHUTO .)
    BAISA           reduce using rule 76 (boolean -> JHUTO .)
    COLON           reduce using rule 76 (boolean -> JHUTO .)


state 28

    (7) slstmt -> expression .

    BAISA           reduce using rule 7 (slstmt -> expression .)
    NEWLINE         reduce using rule 7 (slstmt -> expression .)
    DIYE            reduce using rule 7 (slstmt -> expression .)
    error           reduce using rule 7 (slstmt -> expression .)
    BAJA            reduce using rule 7 (slstmt -> expression .)
    $end            reduce using rule 7 (slstmt -> expression .)
    KAKHA           reduce using rule 7 (slstmt -> expression .)
    TICHO           reduce using rule 7 (slstmt -> expression .)
    ATHAWA          reduce using rule 7 (slstmt -> expression .)
    MAKA            reduce using rule 7 (slstmt -> expression .)


state 29

    (59) expr -> LPARA . expr RPARA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 73
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 30

    (75) boolean -> SACHO .

    PATHAU          reduce using rule 75 (boolean -> SACHO .)
    CHOTI           reduce using rule 75 (boolean -> SACHO .)
    PLUS            reduce using rule 75 (boolean -> SACHO .)
    MINUS           reduce using rule 75 (boolean -> SACHO .)
    TIMES           reduce using rule 75 (boolean -> SACHO .)
    DIVIDE          reduce using rule 75 (boolean -> SACHO .)
    MODULUS         reduce using rule 75 (boolean -> SACHO .)
    POWER           reduce using rule 75 (boolean -> SACHO .)
    GT              reduce using rule 75 (boolean -> SACHO .)
    LT              reduce using rule 75 (boolean -> SACHO .)
    GE              reduce using rule 75 (boolean -> SACHO .)
    LE              reduce using rule 75 (boolean -> SACHO .)
    EQ              reduce using rule 75 (boolean -> SACHO .)
    NE              reduce using rule 75 (boolean -> SACHO .)
    RA              reduce using rule 75 (boolean -> SACHO .)
    WA              reduce using rule 75 (boolean -> SACHO .)
    CHHA            reduce using rule 75 (boolean -> SACHO .)
    CHHAINA         reduce using rule 75 (boolean -> SACHO .)
    BAJA            reduce using rule 75 (boolean -> SACHO .)
    NEWLINE         reduce using rule 75 (boolean -> SACHO .)
    LEKHA           reduce using rule 75 (boolean -> SACHO .)
    LEU             reduce using rule 75 (boolean -> SACHO .)
    COMMA           reduce using rule 75 (boolean -> SACHO .)
    DEKHI           reduce using rule 75 (boolean -> SACHO .)
    $end            reduce using rule 75 (boolean -> SACHO .)
    RGPARA          reduce using rule 75 (boolean -> SACHO .)
    BHAE            reduce using rule 75 (boolean -> SACHO .)
    error           reduce using rule 75 (boolean -> SACHO .)
    RPARA           reduce using rule 75 (boolean -> SACHO .)
    KAKHA           reduce using rule 75 (boolean -> SACHO .)
    TICHO           reduce using rule 75 (boolean -> SACHO .)
    DIYE            reduce using rule 75 (boolean -> SACHO .)
    ATHAWA          reduce using rule 75 (boolean -> SACHO .)
    MAKA            reduce using rule 75 (boolean -> SACHO .)
    BAISA           reduce using rule 75 (boolean -> SACHO .)
    COLON           reduce using rule 75 (boolean -> SACHO .)


state 31

    (65) expr -> boolean .

    NEWLINE         reduce using rule 65 (expr -> boolean .)
    PLUS            reduce using rule 65 (expr -> boolean .)
    MINUS           reduce using rule 65 (expr -> boolean .)
    TIMES           reduce using rule 65 (expr -> boolean .)
    DIVIDE          reduce using rule 65 (expr -> boolean .)
    MODULUS         reduce using rule 65 (expr -> boolean .)
    POWER           reduce using rule 65 (expr -> boolean .)
    GT              reduce using rule 65 (expr -> boolean .)
    LT              reduce using rule 65 (expr -> boolean .)
    GE              reduce using rule 65 (expr -> boolean .)
    LE              reduce using rule 65 (expr -> boolean .)
    EQ              reduce using rule 65 (expr -> boolean .)
    NE              reduce using rule 65 (expr -> boolean .)
    RA              reduce using rule 65 (expr -> boolean .)
    WA              reduce using rule 65 (expr -> boolean .)
    CHHA            reduce using rule 65 (expr -> boolean .)
    CHHAINA         reduce using rule 65 (expr -> boolean .)
    PATHAU          reduce using rule 65 (expr -> boolean .)
    CHOTI           reduce using rule 65 (expr -> boolean .)
    MAKA            reduce using rule 65 (expr -> boolean .)
    LEKHA           reduce using rule 65 (expr -> boolean .)
    LEU             reduce using rule 65 (expr -> boolean .)
    COMMA           reduce using rule 65 (expr -> boolean .)
    $end            reduce using rule 65 (expr -> boolean .)
    KAKHA           reduce using rule 65 (expr -> boolean .)
    TICHO           reduce using rule 65 (expr -> boolean .)
    DIYE            reduce using rule 65 (expr -> boolean .)
    error           reduce using rule 65 (expr -> boolean .)
    ATHAWA          reduce using rule 65 (expr -> boolean .)
    BAJA            reduce using rule 65 (expr -> boolean .)
    BAISA           reduce using rule 65 (expr -> boolean .)
    RGPARA          reduce using rule 65 (expr -> boolean .)
    BHAE            reduce using rule 65 (expr -> boolean .)
    RPARA           reduce using rule 65 (expr -> boolean .)
    COLON           reduce using rule 65 (expr -> boolean .)
    DEKHI           reduce using rule 65 (expr -> boolean .)


state 32

    (67) expr -> array .

    NEWLINE         reduce using rule 67 (expr -> array .)
    PLUS            reduce using rule 67 (expr -> array .)
    MINUS           reduce using rule 67 (expr -> array .)
    TIMES           reduce using rule 67 (expr -> array .)
    DIVIDE          reduce using rule 67 (expr -> array .)
    MODULUS         reduce using rule 67 (expr -> array .)
    POWER           reduce using rule 67 (expr -> array .)
    GT              reduce using rule 67 (expr -> array .)
    LT              reduce using rule 67 (expr -> array .)
    GE              reduce using rule 67 (expr -> array .)
    LE              reduce using rule 67 (expr -> array .)
    EQ              reduce using rule 67 (expr -> array .)
    NE              reduce using rule 67 (expr -> array .)
    RA              reduce using rule 67 (expr -> array .)
    WA              reduce using rule 67 (expr -> array .)
    CHHA            reduce using rule 67 (expr -> array .)
    CHHAINA         reduce using rule 67 (expr -> array .)
    PATHAU          reduce using rule 67 (expr -> array .)
    CHOTI           reduce using rule 67 (expr -> array .)
    MAKA            reduce using rule 67 (expr -> array .)
    LEKHA           reduce using rule 67 (expr -> array .)
    LEU             reduce using rule 67 (expr -> array .)
    COMMA           reduce using rule 67 (expr -> array .)
    $end            reduce using rule 67 (expr -> array .)
    KAKHA           reduce using rule 67 (expr -> array .)
    TICHO           reduce using rule 67 (expr -> array .)
    DIYE            reduce using rule 67 (expr -> array .)
    error           reduce using rule 67 (expr -> array .)
    ATHAWA          reduce using rule 67 (expr -> array .)
    BAJA            reduce using rule 67 (expr -> array .)
    BAISA           reduce using rule 67 (expr -> array .)
    RGPARA          reduce using rule 67 (expr -> array .)
    BHAE            reduce using rule 67 (expr -> array .)
    RPARA           reduce using rule 67 (expr -> array .)
    COLON           reduce using rule 67 (expr -> array .)
    DEKHI           reduce using rule 67 (expr -> array .)


state 33

    (69) integer -> OCTALINTEGER .

    PATHAU          reduce using rule 69 (integer -> OCTALINTEGER .)
    PLUS            reduce using rule 69 (integer -> OCTALINTEGER .)
    MINUS           reduce using rule 69 (integer -> OCTALINTEGER .)
    TIMES           reduce using rule 69 (integer -> OCTALINTEGER .)
    DIVIDE          reduce using rule 69 (integer -> OCTALINTEGER .)
    MODULUS         reduce using rule 69 (integer -> OCTALINTEGER .)
    POWER           reduce using rule 69 (integer -> OCTALINTEGER .)
    GT              reduce using rule 69 (integer -> OCTALINTEGER .)
    LT              reduce using rule 69 (integer -> OCTALINTEGER .)
    GE              reduce using rule 69 (integer -> OCTALINTEGER .)
    LE              reduce using rule 69 (integer -> OCTALINTEGER .)
    EQ              reduce using rule 69 (integer -> OCTALINTEGER .)
    NE              reduce using rule 69 (integer -> OCTALINTEGER .)
    RA              reduce using rule 69 (integer -> OCTALINTEGER .)
    WA              reduce using rule 69 (integer -> OCTALINTEGER .)
    CHHA            reduce using rule 69 (integer -> OCTALINTEGER .)
    CHHAINA         reduce using rule 69 (integer -> OCTALINTEGER .)
    NEWLINE         reduce using rule 69 (integer -> OCTALINTEGER .)
    $end            reduce using rule 69 (integer -> OCTALINTEGER .)
    KAKHA           reduce using rule 69 (integer -> OCTALINTEGER .)
    TICHO           reduce using rule 69 (integer -> OCTALINTEGER .)
    DIYE            reduce using rule 69 (integer -> OCTALINTEGER .)
    error           reduce using rule 69 (integer -> OCTALINTEGER .)
    ATHAWA          reduce using rule 69 (integer -> OCTALINTEGER .)
    BAJA            reduce using rule 69 (integer -> OCTALINTEGER .)
    MAKA            reduce using rule 69 (integer -> OCTALINTEGER .)
    BAISA           reduce using rule 69 (integer -> OCTALINTEGER .)
    LEKHA           reduce using rule 69 (integer -> OCTALINTEGER .)
    LEU             reduce using rule 69 (integer -> OCTALINTEGER .)
    COMMA           reduce using rule 69 (integer -> OCTALINTEGER .)
    BHAE            reduce using rule 69 (integer -> OCTALINTEGER .)
    CHOTI           reduce using rule 69 (integer -> OCTALINTEGER .)
    RGPARA          reduce using rule 69 (integer -> OCTALINTEGER .)
    RPARA           reduce using rule 69 (integer -> OCTALINTEGER .)
    COLON           reduce using rule 69 (integer -> OCTALINTEGER .)
    DEKHI           reduce using rule 69 (integer -> OCTALINTEGER .)


state 34

    (45) function -> KAAM . IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> KAAM . IDENTIFIER LPARA error RPARA NEWLINE program MAKA

    IDENTIFIER      shift and go to state 74


state 35

    (46) class -> KHAKA . IDENTIFIER NEWLINE program KAKHA

    IDENTIFIER      shift and go to state 75


state 36

    (35) mlstmt -> class .

    BAJA            reduce using rule 35 (mlstmt -> class .)
    NEWLINE         reduce using rule 35 (mlstmt -> class .)
    MAKA            reduce using rule 35 (mlstmt -> class .)
    $end            reduce using rule 35 (mlstmt -> class .)
    DIYE            reduce using rule 35 (mlstmt -> class .)
    error           reduce using rule 35 (mlstmt -> class .)
    KAKHA           reduce using rule 35 (mlstmt -> class .)
    ATHAWA          reduce using rule 35 (mlstmt -> class .)
    BAISA           reduce using rule 35 (mlstmt -> class .)
    TICHO           reduce using rule 35 (mlstmt -> class .)


state 37

    (86) identifier -> IDENTIFIER .
    (87) functioncall -> IDENTIFIER . LPARA variableExpr RPARA

    LGPARA          reduce using rule 86 (identifier -> IDENTIFIER .)
    DOT             reduce using rule 86 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 86 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 86 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 86 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 86 (identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 86 (identifier -> IDENTIFIER .)
    POWER           reduce using rule 86 (identifier -> IDENTIFIER .)
    GT              reduce using rule 86 (identifier -> IDENTIFIER .)
    LT              reduce using rule 86 (identifier -> IDENTIFIER .)
    GE              reduce using rule 86 (identifier -> IDENTIFIER .)
    LE              reduce using rule 86 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 86 (identifier -> IDENTIFIER .)
    NE              reduce using rule 86 (identifier -> IDENTIFIER .)
    RA              reduce using rule 86 (identifier -> IDENTIFIER .)
    WA              reduce using rule 86 (identifier -> IDENTIFIER .)
    CHHA            reduce using rule 86 (identifier -> IDENTIFIER .)
    CHHAINA         reduce using rule 86 (identifier -> IDENTIFIER .)
    NEWLINE         reduce using rule 86 (identifier -> IDENTIFIER .)
    $end            reduce using rule 86 (identifier -> IDENTIFIER .)
    KAKHA           reduce using rule 86 (identifier -> IDENTIFIER .)
    TICHO           reduce using rule 86 (identifier -> IDENTIFIER .)
    DIYE            reduce using rule 86 (identifier -> IDENTIFIER .)
    error           reduce using rule 86 (identifier -> IDENTIFIER .)
    ATHAWA          reduce using rule 86 (identifier -> IDENTIFIER .)
    BAJA            reduce using rule 86 (identifier -> IDENTIFIER .)
    MAKA            reduce using rule 86 (identifier -> IDENTIFIER .)
    BAISA           reduce using rule 86 (identifier -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 86 (identifier -> IDENTIFIER .)
    AI              reduce using rule 86 (identifier -> IDENTIFIER .)
    SI              reduce using rule 86 (identifier -> IDENTIFIER .)
    MI              reduce using rule 86 (identifier -> IDENTIFIER .)
    DI              reduce using rule 86 (identifier -> IDENTIFIER .)
    PATHAU          reduce using rule 86 (identifier -> IDENTIFIER .)
    LEKHA           reduce using rule 86 (identifier -> IDENTIFIER .)
    LEU             reduce using rule 86 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 86 (identifier -> IDENTIFIER .)
    CHOTI           reduce using rule 86 (identifier -> IDENTIFIER .)
    RGPARA          reduce using rule 86 (identifier -> IDENTIFIER .)
    BHAE            reduce using rule 86 (identifier -> IDENTIFIER .)
    RPARA           reduce using rule 86 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 86 (identifier -> IDENTIFIER .)
    DEKHI           reduce using rule 86 (identifier -> IDENTIFIER .)
    LPARA           shift and go to state 76


state 38

    (4) stmt -> empty .
    (49) variableExpr -> empty .

    MAKA            reduce using rule 4 (stmt -> empty .)
    NEWLINE         reduce using rule 4 (stmt -> empty .)
    BAISA           reduce using rule 4 (stmt -> empty .)
    DIYE            reduce using rule 4 (stmt -> empty .)
    ATHAWA          reduce using rule 4 (stmt -> empty .)
    BAJA            reduce using rule 4 (stmt -> empty .)
    error           reduce using rule 4 (stmt -> empty .)
    KAKHA           reduce using rule 4 (stmt -> empty .)
    TICHO           reduce using rule 4 (stmt -> empty .)
    $end            reduce using rule 4 (stmt -> empty .)
    LEKHA           reduce using rule 49 (variableExpr -> empty .)
    LEU             reduce using rule 49 (variableExpr -> empty .)
    COMMA           reduce using rule 49 (variableExpr -> empty .)


state 39

    (34) mlstmt -> function .

    BAJA            reduce using rule 34 (mlstmt -> function .)
    NEWLINE         reduce using rule 34 (mlstmt -> function .)
    MAKA            reduce using rule 34 (mlstmt -> function .)
    $end            reduce using rule 34 (mlstmt -> function .)
    DIYE            reduce using rule 34 (mlstmt -> function .)
    error           reduce using rule 34 (mlstmt -> function .)
    KAKHA           reduce using rule 34 (mlstmt -> function .)
    ATHAWA          reduce using rule 34 (mlstmt -> function .)
    BAISA           reduce using rule 34 (mlstmt -> function .)
    TICHO           reduce using rule 34 (mlstmt -> function .)


state 40

    (5) stmt -> slstmt .

    MAKA            reduce using rule 5 (stmt -> slstmt .)
    NEWLINE         reduce using rule 5 (stmt -> slstmt .)
    BAISA           reduce using rule 5 (stmt -> slstmt .)
    DIYE            reduce using rule 5 (stmt -> slstmt .)
    ATHAWA          reduce using rule 5 (stmt -> slstmt .)
    BAJA            reduce using rule 5 (stmt -> slstmt .)
    error           reduce using rule 5 (stmt -> slstmt .)
    KAKHA           reduce using rule 5 (stmt -> slstmt .)
    TICHO           reduce using rule 5 (stmt -> slstmt .)
    $end            reduce using rule 5 (stmt -> slstmt .)


state 41

    (74) null -> SUNYA .

    PATHAU          reduce using rule 74 (null -> SUNYA .)
    CHOTI           reduce using rule 74 (null -> SUNYA .)
    PLUS            reduce using rule 74 (null -> SUNYA .)
    MINUS           reduce using rule 74 (null -> SUNYA .)
    TIMES           reduce using rule 74 (null -> SUNYA .)
    DIVIDE          reduce using rule 74 (null -> SUNYA .)
    MODULUS         reduce using rule 74 (null -> SUNYA .)
    POWER           reduce using rule 74 (null -> SUNYA .)
    GT              reduce using rule 74 (null -> SUNYA .)
    LT              reduce using rule 74 (null -> SUNYA .)
    GE              reduce using rule 74 (null -> SUNYA .)
    LE              reduce using rule 74 (null -> SUNYA .)
    EQ              reduce using rule 74 (null -> SUNYA .)
    NE              reduce using rule 74 (null -> SUNYA .)
    RA              reduce using rule 74 (null -> SUNYA .)
    WA              reduce using rule 74 (null -> SUNYA .)
    CHHA            reduce using rule 74 (null -> SUNYA .)
    CHHAINA         reduce using rule 74 (null -> SUNYA .)
    NEWLINE         reduce using rule 74 (null -> SUNYA .)
    $end            reduce using rule 74 (null -> SUNYA .)
    LEKHA           reduce using rule 74 (null -> SUNYA .)
    LEU             reduce using rule 74 (null -> SUNYA .)
    COMMA           reduce using rule 74 (null -> SUNYA .)
    BHAE            reduce using rule 74 (null -> SUNYA .)
    error           reduce using rule 74 (null -> SUNYA .)
    COLON           reduce using rule 74 (null -> SUNYA .)
    RGPARA          reduce using rule 74 (null -> SUNYA .)
    ATHAWA          reduce using rule 74 (null -> SUNYA .)
    KAKHA           reduce using rule 74 (null -> SUNYA .)
    TICHO           reduce using rule 74 (null -> SUNYA .)
    DIYE            reduce using rule 74 (null -> SUNYA .)
    BAJA            reduce using rule 74 (null -> SUNYA .)
    MAKA            reduce using rule 74 (null -> SUNYA .)
    BAISA           reduce using rule 74 (null -> SUNYA .)
    RPARA           reduce using rule 74 (null -> SUNYA .)
    DEKHI           reduce using rule 74 (null -> SUNYA .)


state 42

    (16) expression -> expr .
    (25) return -> expr . PATHAU
    (44) repeatloop -> expr . CHOTI NEWLINE program TICHO
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA
    (48) variableExpr -> expr .

    NEWLINE         reduce using rule 16 (expression -> expr .)
    $end            reduce using rule 16 (expression -> expr .)
    DIYE            reduce using rule 16 (expression -> expr .)
    ATHAWA          reduce using rule 16 (expression -> expr .)
    TICHO           reduce using rule 16 (expression -> expr .)
    error           reduce using rule 16 (expression -> expr .)
    BAISA           reduce using rule 16 (expression -> expr .)
    KAKHA           reduce using rule 16 (expression -> expr .)
    MAKA            reduce using rule 16 (expression -> expr .)
    BAJA            reduce using rule 16 (expression -> expr .)
    PATHAU          shift and go to state 90
    CHOTI           shift and go to state 92
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78
    LEKHA           reduce using rule 48 (variableExpr -> expr .)
    LEU             reduce using rule 48 (variableExpr -> expr .)
    COMMA           reduce using rule 48 (variableExpr -> expr .)


state 43

    (11) slstmt -> slif .

    BAISA           reduce using rule 11 (slstmt -> slif .)
    NEWLINE         reduce using rule 11 (slstmt -> slif .)
    DIYE            reduce using rule 11 (slstmt -> slif .)
    error           reduce using rule 11 (slstmt -> slif .)
    BAJA            reduce using rule 11 (slstmt -> slif .)
    $end            reduce using rule 11 (slstmt -> slif .)
    KAKHA           reduce using rule 11 (slstmt -> slif .)
    TICHO           reduce using rule 11 (slstmt -> slif .)
    ATHAWA          reduce using rule 11 (slstmt -> slif .)
    MAKA            reduce using rule 11 (slstmt -> slif .)


state 44

    (12) slstmt -> incremental .

    BAISA           reduce using rule 12 (slstmt -> incremental .)
    NEWLINE         reduce using rule 12 (slstmt -> incremental .)
    DIYE            reduce using rule 12 (slstmt -> incremental .)
    error           reduce using rule 12 (slstmt -> incremental .)
    BAJA            reduce using rule 12 (slstmt -> incremental .)
    $end            reduce using rule 12 (slstmt -> incremental .)
    KAKHA           reduce using rule 12 (slstmt -> incremental .)
    TICHO           reduce using rule 12 (slstmt -> incremental .)
    ATHAWA          reduce using rule 12 (slstmt -> incremental .)
    MAKA            reduce using rule 12 (slstmt -> incremental .)


state 45

    (64) expr -> null .

    NEWLINE         reduce using rule 64 (expr -> null .)
    PLUS            reduce using rule 64 (expr -> null .)
    MINUS           reduce using rule 64 (expr -> null .)
    TIMES           reduce using rule 64 (expr -> null .)
    DIVIDE          reduce using rule 64 (expr -> null .)
    MODULUS         reduce using rule 64 (expr -> null .)
    POWER           reduce using rule 64 (expr -> null .)
    GT              reduce using rule 64 (expr -> null .)
    LT              reduce using rule 64 (expr -> null .)
    GE              reduce using rule 64 (expr -> null .)
    LE              reduce using rule 64 (expr -> null .)
    EQ              reduce using rule 64 (expr -> null .)
    NE              reduce using rule 64 (expr -> null .)
    RA              reduce using rule 64 (expr -> null .)
    WA              reduce using rule 64 (expr -> null .)
    CHHA            reduce using rule 64 (expr -> null .)
    CHHAINA         reduce using rule 64 (expr -> null .)
    PATHAU          reduce using rule 64 (expr -> null .)
    CHOTI           reduce using rule 64 (expr -> null .)
    MAKA            reduce using rule 64 (expr -> null .)
    LEKHA           reduce using rule 64 (expr -> null .)
    LEU             reduce using rule 64 (expr -> null .)
    COMMA           reduce using rule 64 (expr -> null .)
    $end            reduce using rule 64 (expr -> null .)
    KAKHA           reduce using rule 64 (expr -> null .)
    TICHO           reduce using rule 64 (expr -> null .)
    DIYE            reduce using rule 64 (expr -> null .)
    error           reduce using rule 64 (expr -> null .)
    ATHAWA          reduce using rule 64 (expr -> null .)
    BAJA            reduce using rule 64 (expr -> null .)
    BAISA           reduce using rule 64 (expr -> null .)
    RGPARA          reduce using rule 64 (expr -> null .)
    BHAE            reduce using rule 64 (expr -> null .)
    RPARA           reduce using rule 64 (expr -> null .)
    COLON           reduce using rule 64 (expr -> null .)
    DEKHI           reduce using rule 64 (expr -> null .)


state 46

    (26) continue -> ARKO .

    MAKA            reduce using rule 26 (continue -> ARKO .)
    NEWLINE         reduce using rule 26 (continue -> ARKO .)
    $end            reduce using rule 26 (continue -> ARKO .)
    KAKHA           reduce using rule 26 (continue -> ARKO .)
    TICHO           reduce using rule 26 (continue -> ARKO .)
    DIYE            reduce using rule 26 (continue -> ARKO .)
    error           reduce using rule 26 (continue -> ARKO .)
    ATHAWA          reduce using rule 26 (continue -> ARKO .)
    BAJA            reduce using rule 26 (continue -> ARKO .)
    BAISA           reduce using rule 26 (continue -> ARKO .)


state 47

    (41) forloop -> SABAI . reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> SABAI . reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    IDENTIFIER      shift and go to state 37

    reference                      shift and go to state 95
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15

state 48

    (68) integer -> DECIMALINTEGER .

    PATHAU          reduce using rule 68 (integer -> DECIMALINTEGER .)
    PLUS            reduce using rule 68 (integer -> DECIMALINTEGER .)
    MINUS           reduce using rule 68 (integer -> DECIMALINTEGER .)
    TIMES           reduce using rule 68 (integer -> DECIMALINTEGER .)
    DIVIDE          reduce using rule 68 (integer -> DECIMALINTEGER .)
    MODULUS         reduce using rule 68 (integer -> DECIMALINTEGER .)
    POWER           reduce using rule 68 (integer -> DECIMALINTEGER .)
    GT              reduce using rule 68 (integer -> DECIMALINTEGER .)
    LT              reduce using rule 68 (integer -> DECIMALINTEGER .)
    GE              reduce using rule 68 (integer -> DECIMALINTEGER .)
    LE              reduce using rule 68 (integer -> DECIMALINTEGER .)
    EQ              reduce using rule 68 (integer -> DECIMALINTEGER .)
    NE              reduce using rule 68 (integer -> DECIMALINTEGER .)
    RA              reduce using rule 68 (integer -> DECIMALINTEGER .)
    WA              reduce using rule 68 (integer -> DECIMALINTEGER .)
    CHHA            reduce using rule 68 (integer -> DECIMALINTEGER .)
    CHHAINA         reduce using rule 68 (integer -> DECIMALINTEGER .)
    NEWLINE         reduce using rule 68 (integer -> DECIMALINTEGER .)
    $end            reduce using rule 68 (integer -> DECIMALINTEGER .)
    KAKHA           reduce using rule 68 (integer -> DECIMALINTEGER .)
    TICHO           reduce using rule 68 (integer -> DECIMALINTEGER .)
    DIYE            reduce using rule 68 (integer -> DECIMALINTEGER .)
    error           reduce using rule 68 (integer -> DECIMALINTEGER .)
    ATHAWA          reduce using rule 68 (integer -> DECIMALINTEGER .)
    BAJA            reduce using rule 68 (integer -> DECIMALINTEGER .)
    MAKA            reduce using rule 68 (integer -> DECIMALINTEGER .)
    BAISA           reduce using rule 68 (integer -> DECIMALINTEGER .)
    LEKHA           reduce using rule 68 (integer -> DECIMALINTEGER .)
    LEU             reduce using rule 68 (integer -> DECIMALINTEGER .)
    COMMA           reduce using rule 68 (integer -> DECIMALINTEGER .)
    BHAE            reduce using rule 68 (integer -> DECIMALINTEGER .)
    CHOTI           reduce using rule 68 (integer -> DECIMALINTEGER .)
    RGPARA          reduce using rule 68 (integer -> DECIMALINTEGER .)
    RPARA           reduce using rule 68 (integer -> DECIMALINTEGER .)
    COLON           reduce using rule 68 (integer -> DECIMALINTEGER .)
    DEKHI           reduce using rule 68 (integer -> DECIMALINTEGER .)


state 49

    (0) S' -> begin .



state 50

    (73) string -> STRING .

    NEWLINE         reduce using rule 73 (string -> STRING .)
    COLON           reduce using rule 73 (string -> STRING .)
    PLUS            reduce using rule 73 (string -> STRING .)
    MINUS           reduce using rule 73 (string -> STRING .)
    TIMES           reduce using rule 73 (string -> STRING .)
    DIVIDE          reduce using rule 73 (string -> STRING .)
    MODULUS         reduce using rule 73 (string -> STRING .)
    POWER           reduce using rule 73 (string -> STRING .)
    GT              reduce using rule 73 (string -> STRING .)
    LT              reduce using rule 73 (string -> STRING .)
    GE              reduce using rule 73 (string -> STRING .)
    LE              reduce using rule 73 (string -> STRING .)
    EQ              reduce using rule 73 (string -> STRING .)
    NE              reduce using rule 73 (string -> STRING .)
    RA              reduce using rule 73 (string -> STRING .)
    WA              reduce using rule 73 (string -> STRING .)
    CHHA            reduce using rule 73 (string -> STRING .)
    CHHAINA         reduce using rule 73 (string -> STRING .)
    PATHAU          reduce using rule 73 (string -> STRING .)
    $end            reduce using rule 73 (string -> STRING .)
    KAKHA           reduce using rule 73 (string -> STRING .)
    TICHO           reduce using rule 73 (string -> STRING .)
    DIYE            reduce using rule 73 (string -> STRING .)
    error           reduce using rule 73 (string -> STRING .)
    ATHAWA          reduce using rule 73 (string -> STRING .)
    BAJA            reduce using rule 73 (string -> STRING .)
    MAKA            reduce using rule 73 (string -> STRING .)
    BAISA           reduce using rule 73 (string -> STRING .)
    LEKHA           reduce using rule 73 (string -> STRING .)
    LEU             reduce using rule 73 (string -> STRING .)
    COMMA           reduce using rule 73 (string -> STRING .)
    CHOTI           reduce using rule 73 (string -> STRING .)
    RGPARA          reduce using rule 73 (string -> STRING .)
    BHAE            reduce using rule 73 (string -> STRING .)
    RPARA           reduce using rule 73 (string -> STRING .)
    DEKHI           reduce using rule 73 (string -> STRING .)


state 51

    (8) slstmt -> assignment .

    BAISA           reduce using rule 8 (slstmt -> assignment .)
    NEWLINE         reduce using rule 8 (slstmt -> assignment .)
    DIYE            reduce using rule 8 (slstmt -> assignment .)
    error           reduce using rule 8 (slstmt -> assignment .)
    BAJA            reduce using rule 8 (slstmt -> assignment .)
    $end            reduce using rule 8 (slstmt -> assignment .)
    KAKHA           reduce using rule 8 (slstmt -> assignment .)
    TICHO           reduce using rule 8 (slstmt -> assignment .)
    ATHAWA          reduce using rule 8 (slstmt -> assignment .)
    MAKA            reduce using rule 8 (slstmt -> assignment .)


state 52

    (71) float -> FLOAT .

    PATHAU          reduce using rule 71 (float -> FLOAT .)
    PLUS            reduce using rule 71 (float -> FLOAT .)
    MINUS           reduce using rule 71 (float -> FLOAT .)
    TIMES           reduce using rule 71 (float -> FLOAT .)
    DIVIDE          reduce using rule 71 (float -> FLOAT .)
    MODULUS         reduce using rule 71 (float -> FLOAT .)
    POWER           reduce using rule 71 (float -> FLOAT .)
    GT              reduce using rule 71 (float -> FLOAT .)
    LT              reduce using rule 71 (float -> FLOAT .)
    GE              reduce using rule 71 (float -> FLOAT .)
    LE              reduce using rule 71 (float -> FLOAT .)
    EQ              reduce using rule 71 (float -> FLOAT .)
    NE              reduce using rule 71 (float -> FLOAT .)
    RA              reduce using rule 71 (float -> FLOAT .)
    WA              reduce using rule 71 (float -> FLOAT .)
    CHHA            reduce using rule 71 (float -> FLOAT .)
    CHHAINA         reduce using rule 71 (float -> FLOAT .)
    NEWLINE         reduce using rule 71 (float -> FLOAT .)
    $end            reduce using rule 71 (float -> FLOAT .)
    KAKHA           reduce using rule 71 (float -> FLOAT .)
    TICHO           reduce using rule 71 (float -> FLOAT .)
    DIYE            reduce using rule 71 (float -> FLOAT .)
    error           reduce using rule 71 (float -> FLOAT .)
    ATHAWA          reduce using rule 71 (float -> FLOAT .)
    BAJA            reduce using rule 71 (float -> FLOAT .)
    MAKA            reduce using rule 71 (float -> FLOAT .)
    BAISA           reduce using rule 71 (float -> FLOAT .)
    LEKHA           reduce using rule 71 (float -> FLOAT .)
    LEU             reduce using rule 71 (float -> FLOAT .)
    COMMA           reduce using rule 71 (float -> FLOAT .)
    CHOTI           reduce using rule 71 (float -> FLOAT .)
    RGPARA          reduce using rule 71 (float -> FLOAT .)
    BHAE            reduce using rule 71 (float -> FLOAT .)
    RPARA           reduce using rule 71 (float -> FLOAT .)
    COLON           reduce using rule 71 (float -> FLOAT .)
    DEKHI           reduce using rule 71 (float -> FLOAT .)


state 53

    (79) reference -> functioncall .

    DOT             reduce using rule 79 (reference -> functioncall .)
    PLUS            reduce using rule 79 (reference -> functioncall .)
    MINUS           reduce using rule 79 (reference -> functioncall .)
    TIMES           reduce using rule 79 (reference -> functioncall .)
    DIVIDE          reduce using rule 79 (reference -> functioncall .)
    MODULUS         reduce using rule 79 (reference -> functioncall .)
    POWER           reduce using rule 79 (reference -> functioncall .)
    GT              reduce using rule 79 (reference -> functioncall .)
    LT              reduce using rule 79 (reference -> functioncall .)
    GE              reduce using rule 79 (reference -> functioncall .)
    LE              reduce using rule 79 (reference -> functioncall .)
    EQ              reduce using rule 79 (reference -> functioncall .)
    NE              reduce using rule 79 (reference -> functioncall .)
    RA              reduce using rule 79 (reference -> functioncall .)
    WA              reduce using rule 79 (reference -> functioncall .)
    CHHA            reduce using rule 79 (reference -> functioncall .)
    CHHAINA         reduce using rule 79 (reference -> functioncall .)
    PATHAU          reduce using rule 79 (reference -> functioncall .)
    CHOTI           reduce using rule 79 (reference -> functioncall .)
    NEWLINE         reduce using rule 79 (reference -> functioncall .)
    $end            reduce using rule 79 (reference -> functioncall .)
    LEKHA           reduce using rule 79 (reference -> functioncall .)
    LEU             reduce using rule 79 (reference -> functioncall .)
    COMMA           reduce using rule 79 (reference -> functioncall .)
    RGPARA          reduce using rule 79 (reference -> functioncall .)
    BHAE            reduce using rule 79 (reference -> functioncall .)
    error           reduce using rule 79 (reference -> functioncall .)
    RPARA           reduce using rule 79 (reference -> functioncall .)
    KAKHA           reduce using rule 79 (reference -> functioncall .)
    TICHO           reduce using rule 79 (reference -> functioncall .)
    DIYE            reduce using rule 79 (reference -> functioncall .)
    ATHAWA          reduce using rule 79 (reference -> functioncall .)
    BAJA            reduce using rule 79 (reference -> functioncall .)
    MAKA            reduce using rule 79 (reference -> functioncall .)
    BAISA           reduce using rule 79 (reference -> functioncall .)
    COLON           reduce using rule 79 (reference -> functioncall .)
    DEKHI           reduce using rule 79 (reference -> functioncall .)
    ASSIGNMENT      reduce using rule 79 (reference -> functioncall .)
    AI              reduce using rule 79 (reference -> functioncall .)
    SI              reduce using rule 79 (reference -> functioncall .)
    MI              reduce using rule 79 (reference -> functioncall .)
    DI              reduce using rule 79 (reference -> functioncall .)


state 54

    (66) expr -> reference .
    (80) reference -> reference . DOT reference

    NEWLINE         reduce using rule 66 (expr -> reference .)
    PLUS            reduce using rule 66 (expr -> reference .)
    MINUS           reduce using rule 66 (expr -> reference .)
    TIMES           reduce using rule 66 (expr -> reference .)
    DIVIDE          reduce using rule 66 (expr -> reference .)
    MODULUS         reduce using rule 66 (expr -> reference .)
    POWER           reduce using rule 66 (expr -> reference .)
    GT              reduce using rule 66 (expr -> reference .)
    LT              reduce using rule 66 (expr -> reference .)
    GE              reduce using rule 66 (expr -> reference .)
    LE              reduce using rule 66 (expr -> reference .)
    EQ              reduce using rule 66 (expr -> reference .)
    NE              reduce using rule 66 (expr -> reference .)
    RA              reduce using rule 66 (expr -> reference .)
    WA              reduce using rule 66 (expr -> reference .)
    CHHA            reduce using rule 66 (expr -> reference .)
    CHHAINA         reduce using rule 66 (expr -> reference .)
    PATHAU          reduce using rule 66 (expr -> reference .)
    CHOTI           reduce using rule 66 (expr -> reference .)
    $end            reduce using rule 66 (expr -> reference .)
    LEKHA           reduce using rule 66 (expr -> reference .)
    LEU             reduce using rule 66 (expr -> reference .)
    COMMA           reduce using rule 66 (expr -> reference .)
    RGPARA          reduce using rule 66 (expr -> reference .)
    BHAE            reduce using rule 66 (expr -> reference .)
    error           reduce using rule 66 (expr -> reference .)
    RPARA           reduce using rule 66 (expr -> reference .)
    KAKHA           reduce using rule 66 (expr -> reference .)
    TICHO           reduce using rule 66 (expr -> reference .)
    DIYE            reduce using rule 66 (expr -> reference .)
    ATHAWA          reduce using rule 66 (expr -> reference .)
    BAJA            reduce using rule 66 (expr -> reference .)
    MAKA            reduce using rule 66 (expr -> reference .)
    BAISA           reduce using rule 66 (expr -> reference .)
    COLON           reduce using rule 66 (expr -> reference .)
    DEKHI           reduce using rule 66 (expr -> reference .)
    DOT             shift and go to state 67


state 55

    (88) expr -> MINUS expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 88 (expr -> MINUS expr .)
    PLUS            reduce using rule 88 (expr -> MINUS expr .)
    MINUS           reduce using rule 88 (expr -> MINUS expr .)
    TIMES           reduce using rule 88 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 88 (expr -> MINUS expr .)
    MODULUS         reduce using rule 88 (expr -> MINUS expr .)
    POWER           reduce using rule 88 (expr -> MINUS expr .)
    GT              reduce using rule 88 (expr -> MINUS expr .)
    LT              reduce using rule 88 (expr -> MINUS expr .)
    GE              reduce using rule 88 (expr -> MINUS expr .)
    LE              reduce using rule 88 (expr -> MINUS expr .)
    EQ              reduce using rule 88 (expr -> MINUS expr .)
    NE              reduce using rule 88 (expr -> MINUS expr .)
    RA              reduce using rule 88 (expr -> MINUS expr .)
    WA              reduce using rule 88 (expr -> MINUS expr .)
    CHHA            reduce using rule 88 (expr -> MINUS expr .)
    CHHAINA         reduce using rule 88 (expr -> MINUS expr .)
    PATHAU          reduce using rule 88 (expr -> MINUS expr .)
    CHOTI           reduce using rule 88 (expr -> MINUS expr .)
    MAKA            reduce using rule 88 (expr -> MINUS expr .)
    LEKHA           reduce using rule 88 (expr -> MINUS expr .)
    LEU             reduce using rule 88 (expr -> MINUS expr .)
    COMMA           reduce using rule 88 (expr -> MINUS expr .)
    $end            reduce using rule 88 (expr -> MINUS expr .)
    KAKHA           reduce using rule 88 (expr -> MINUS expr .)
    TICHO           reduce using rule 88 (expr -> MINUS expr .)
    DIYE            reduce using rule 88 (expr -> MINUS expr .)
    error           reduce using rule 88 (expr -> MINUS expr .)
    ATHAWA          reduce using rule 88 (expr -> MINUS expr .)
    BAJA            reduce using rule 88 (expr -> MINUS expr .)
    BAISA           reduce using rule 88 (expr -> MINUS expr .)
    RGPARA          reduce using rule 88 (expr -> MINUS expr .)
    BHAE            reduce using rule 88 (expr -> MINUS expr .)
    RPARA           reduce using rule 88 (expr -> MINUS expr .)
    COLON           reduce using rule 88 (expr -> MINUS expr .)
    DEKHI           reduce using rule 88 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! MODULUS         [ shift and go to state 82 ]
  ! POWER           [ shift and go to state 81 ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 56

    (2) program -> program NEWLINE . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 99 (empty -> .)
    $end            reduce using rule 99 (empty -> .)
    KAKHA           reduce using rule 99 (empty -> .)
    TICHO           reduce using rule 99 (empty -> .)
    DIYE            reduce using rule 99 (empty -> .)
    error           reduce using rule 99 (empty -> .)
    ATHAWA          reduce using rule 99 (empty -> .)
    BAJA            reduce using rule 99 (empty -> .)
    MAKA            reduce using rule 99 (empty -> .)
    BAISA           reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 96
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 57

    (83) optindex -> LGPARA . aryexpr RGPARA
    (84) aryexpr -> . expr
    (85) aryexpr -> . expr COLON expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 97
    float                          shift and go to state 6
    functioncall                   shift and go to state 53
    boolean                        shift and go to state 31
    aryexpr                        shift and go to state 98
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 58

    (81) reference -> identifier optindex .
    (82) optindex -> optindex . LGPARA aryexpr RGPARA

    DOT             reduce using rule 81 (reference -> identifier optindex .)
    PLUS            reduce using rule 81 (reference -> identifier optindex .)
    MINUS           reduce using rule 81 (reference -> identifier optindex .)
    TIMES           reduce using rule 81 (reference -> identifier optindex .)
    DIVIDE          reduce using rule 81 (reference -> identifier optindex .)
    MODULUS         reduce using rule 81 (reference -> identifier optindex .)
    POWER           reduce using rule 81 (reference -> identifier optindex .)
    GT              reduce using rule 81 (reference -> identifier optindex .)
    LT              reduce using rule 81 (reference -> identifier optindex .)
    GE              reduce using rule 81 (reference -> identifier optindex .)
    LE              reduce using rule 81 (reference -> identifier optindex .)
    EQ              reduce using rule 81 (reference -> identifier optindex .)
    NE              reduce using rule 81 (reference -> identifier optindex .)
    RA              reduce using rule 81 (reference -> identifier optindex .)
    WA              reduce using rule 81 (reference -> identifier optindex .)
    CHHA            reduce using rule 81 (reference -> identifier optindex .)
    CHHAINA         reduce using rule 81 (reference -> identifier optindex .)
    PATHAU          reduce using rule 81 (reference -> identifier optindex .)
    CHOTI           reduce using rule 81 (reference -> identifier optindex .)
    NEWLINE         reduce using rule 81 (reference -> identifier optindex .)
    $end            reduce using rule 81 (reference -> identifier optindex .)
    LEKHA           reduce using rule 81 (reference -> identifier optindex .)
    LEU             reduce using rule 81 (reference -> identifier optindex .)
    COMMA           reduce using rule 81 (reference -> identifier optindex .)
    RGPARA          reduce using rule 81 (reference -> identifier optindex .)
    BHAE            reduce using rule 81 (reference -> identifier optindex .)
    error           reduce using rule 81 (reference -> identifier optindex .)
    RPARA           reduce using rule 81 (reference -> identifier optindex .)
    KAKHA           reduce using rule 81 (reference -> identifier optindex .)
    TICHO           reduce using rule 81 (reference -> identifier optindex .)
    DIYE            reduce using rule 81 (reference -> identifier optindex .)
    ATHAWA          reduce using rule 81 (reference -> identifier optindex .)
    BAJA            reduce using rule 81 (reference -> identifier optindex .)
    MAKA            reduce using rule 81 (reference -> identifier optindex .)
    BAISA           reduce using rule 81 (reference -> identifier optindex .)
    COLON           reduce using rule 81 (reference -> identifier optindex .)
    DEKHI           reduce using rule 81 (reference -> identifier optindex .)
    ASSIGNMENT      reduce using rule 81 (reference -> identifier optindex .)
    AI              reduce using rule 81 (reference -> identifier optindex .)
    SI              reduce using rule 81 (reference -> identifier optindex .)
    MI              reduce using rule 81 (reference -> identifier optindex .)
    DI              reduce using rule 81 (reference -> identifier optindex .)
    LGPARA          shift and go to state 99


state 59

    (49) variableExpr -> empty .

    LEKHA           reduce using rule 49 (variableExpr -> empty .)
    LEU             reduce using rule 49 (variableExpr -> empty .)
    COMMA           reduce using rule 49 (variableExpr -> empty .)
    RGPARA          reduce using rule 49 (variableExpr -> empty .)
    RPARA           reduce using rule 49 (variableExpr -> empty .)


state 60

    (48) variableExpr -> expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    RGPARA          reduce using rule 48 (variableExpr -> expr .)
    COMMA           reduce using rule 48 (variableExpr -> expr .)
    RPARA           reduce using rule 48 (variableExpr -> expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 61

    (77) array -> LGPARA variableExpr . RGPARA
    (47) variableExpr -> variableExpr . COMMA expr

    RGPARA          shift and go to state 100
    COMMA           shift and go to state 70


state 62

    (24) incremental -> reference DI . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 101
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 63

    (21) incremental -> reference AI . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 102
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 64

    (17) assignment -> reference ASSIGNMENT . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 103
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 65

    (23) incremental -> reference MI . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 104
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 66

    (22) incremental -> reference SI . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 105
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 67

    (80) reference -> reference DOT . reference
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    functioncall                   shift and go to state 53
    reference                      shift and go to state 106

state 68

    (28) slif -> YEDI expr . BHAE slstmt ATHAWA slstmt
    (29) slif -> YEDI expr . BHAE slstmt
    (100) slif -> YEDI expr . error slstmt
    (101) slif -> YEDI expr . error ATHAWA slstmt
    (36) mlif -> YEDI expr . BHAE NEWLINE program DIYE
    (37) mlif -> YEDI expr . BHAE NEWLINE program optelse DIYE
    (102) mlif -> YEDI expr . error NEWLINE program DIYE
    (103) mlif -> YEDI expr . error NEWLINE program optelse DIYE
    (106) mlif -> YEDI expr . BHAE NEWLINE program error
    (107) mlif -> YEDI expr . BHAE NEWLINE program optelse error
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    BHAE            shift and go to state 107
    error           shift and go to state 108
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 69

    (43) whileloop -> JABA SAMMA . expr NEWLINE program BAJA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    boolean                        shift and go to state 31
    expr                           shift and go to state 109
    float                          shift and go to state 6
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 70

    (47) variableExpr -> variableExpr COMMA . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 110
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 71

    (20) input -> variableExpr LEU .

    NEWLINE         reduce using rule 20 (input -> variableExpr LEU .)
    $end            reduce using rule 20 (input -> variableExpr LEU .)
    KAKHA           reduce using rule 20 (input -> variableExpr LEU .)
    TICHO           reduce using rule 20 (input -> variableExpr LEU .)
    DIYE            reduce using rule 20 (input -> variableExpr LEU .)
    error           reduce using rule 20 (input -> variableExpr LEU .)
    ATHAWA          reduce using rule 20 (input -> variableExpr LEU .)
    BAJA            reduce using rule 20 (input -> variableExpr LEU .)
    MAKA            reduce using rule 20 (input -> variableExpr LEU .)
    BAISA           reduce using rule 20 (input -> variableExpr LEU .)


state 72

    (18) print -> variableExpr LEKHA . SEMICOLON
    (19) print -> variableExpr LEKHA .

    SEMICOLON       shift and go to state 111
    NEWLINE         reduce using rule 19 (print -> variableExpr LEKHA .)
    DIYE            reduce using rule 19 (print -> variableExpr LEKHA .)
    error           reduce using rule 19 (print -> variableExpr LEKHA .)
    $end            reduce using rule 19 (print -> variableExpr LEKHA .)
    KAKHA           reduce using rule 19 (print -> variableExpr LEKHA .)
    TICHO           reduce using rule 19 (print -> variableExpr LEKHA .)
    ATHAWA          reduce using rule 19 (print -> variableExpr LEKHA .)
    BAJA            reduce using rule 19 (print -> variableExpr LEKHA .)
    MAKA            reduce using rule 19 (print -> variableExpr LEKHA .)
    BAISA           reduce using rule 19 (print -> variableExpr LEKHA .)


state 73

    (59) expr -> LPARA expr . RPARA
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    RPARA           shift and go to state 112
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 74

    (45) function -> KAAM IDENTIFIER . LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> KAAM IDENTIFIER . LPARA error RPARA NEWLINE program MAKA

    LPARA           shift and go to state 113


state 75

    (46) class -> KHAKA IDENTIFIER . NEWLINE program KAKHA

    NEWLINE         shift and go to state 114


state 76

    (87) functioncall -> IDENTIFIER LPARA . variableExpr RPARA
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (99) empty -> .
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    RPARA           reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 60
    float                          shift and go to state 6
    variableExpr                   shift and go to state 115
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32
    empty                          shift and go to state 59

state 77

    (96) expr -> expr WA . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 116
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 78

    (98) expr -> expr CHHAINA .

    NEWLINE         reduce using rule 98 (expr -> expr CHHAINA .)
    PLUS            reduce using rule 98 (expr -> expr CHHAINA .)
    MINUS           reduce using rule 98 (expr -> expr CHHAINA .)
    TIMES           reduce using rule 98 (expr -> expr CHHAINA .)
    DIVIDE          reduce using rule 98 (expr -> expr CHHAINA .)
    MODULUS         reduce using rule 98 (expr -> expr CHHAINA .)
    POWER           reduce using rule 98 (expr -> expr CHHAINA .)
    GT              reduce using rule 98 (expr -> expr CHHAINA .)
    LT              reduce using rule 98 (expr -> expr CHHAINA .)
    GE              reduce using rule 98 (expr -> expr CHHAINA .)
    LE              reduce using rule 98 (expr -> expr CHHAINA .)
    EQ              reduce using rule 98 (expr -> expr CHHAINA .)
    NE              reduce using rule 98 (expr -> expr CHHAINA .)
    RA              reduce using rule 98 (expr -> expr CHHAINA .)
    WA              reduce using rule 98 (expr -> expr CHHAINA .)
    CHHA            reduce using rule 98 (expr -> expr CHHAINA .)
    CHHAINA         reduce using rule 98 (expr -> expr CHHAINA .)
    PATHAU          reduce using rule 98 (expr -> expr CHHAINA .)
    CHOTI           reduce using rule 98 (expr -> expr CHHAINA .)
    MAKA            reduce using rule 98 (expr -> expr CHHAINA .)
    LEKHA           reduce using rule 98 (expr -> expr CHHAINA .)
    LEU             reduce using rule 98 (expr -> expr CHHAINA .)
    COMMA           reduce using rule 98 (expr -> expr CHHAINA .)
    $end            reduce using rule 98 (expr -> expr CHHAINA .)
    KAKHA           reduce using rule 98 (expr -> expr CHHAINA .)
    TICHO           reduce using rule 98 (expr -> expr CHHAINA .)
    DIYE            reduce using rule 98 (expr -> expr CHHAINA .)
    error           reduce using rule 98 (expr -> expr CHHAINA .)
    ATHAWA          reduce using rule 98 (expr -> expr CHHAINA .)
    BAJA            reduce using rule 98 (expr -> expr CHHAINA .)
    BAISA           reduce using rule 98 (expr -> expr CHHAINA .)
    RGPARA          reduce using rule 98 (expr -> expr CHHAINA .)
    BHAE            reduce using rule 98 (expr -> expr CHHAINA .)
    RPARA           reduce using rule 98 (expr -> expr CHHAINA .)
    COLON           reduce using rule 98 (expr -> expr CHHAINA .)
    DEKHI           reduce using rule 98 (expr -> expr CHHAINA .)


state 79

    (54) expr -> expr MINUS . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 117
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 80

    (92) expr -> expr LE . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 118
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 81

    (58) expr -> expr POWER . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 119
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 82

    (57) expr -> expr MODULUS . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 120
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 83

    (94) expr -> expr NE . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 121
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 84

    (90) expr -> expr LT . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 122
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 85

    (53) expr -> expr PLUS . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 123
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 86

    (95) expr -> expr RA . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 124
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 87

    (89) expr -> expr GT . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 125
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 88

    (56) expr -> expr DIVIDE . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 126
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 89

    (55) expr -> expr TIMES . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 127
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 90

    (25) return -> expr PATHAU .

    NEWLINE         reduce using rule 25 (return -> expr PATHAU .)
    ATHAWA          reduce using rule 25 (return -> expr PATHAU .)
    DIYE            reduce using rule 25 (return -> expr PATHAU .)
    error           reduce using rule 25 (return -> expr PATHAU .)
    TICHO           reduce using rule 25 (return -> expr PATHAU .)
    $end            reduce using rule 25 (return -> expr PATHAU .)
    KAKHA           reduce using rule 25 (return -> expr PATHAU .)
    BAJA            reduce using rule 25 (return -> expr PATHAU .)
    MAKA            reduce using rule 25 (return -> expr PATHAU .)
    BAISA           reduce using rule 25 (return -> expr PATHAU .)


state 91

    (91) expr -> expr GE . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 128
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 92

    (44) repeatloop -> expr CHOTI . NEWLINE program TICHO

    NEWLINE         shift and go to state 129


state 93

    (93) expr -> expr EQ . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 130
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 94

    (97) expr -> expr CHHA .

    NEWLINE         reduce using rule 97 (expr -> expr CHHA .)
    PLUS            reduce using rule 97 (expr -> expr CHHA .)
    MINUS           reduce using rule 97 (expr -> expr CHHA .)
    TIMES           reduce using rule 97 (expr -> expr CHHA .)
    DIVIDE          reduce using rule 97 (expr -> expr CHHA .)
    MODULUS         reduce using rule 97 (expr -> expr CHHA .)
    POWER           reduce using rule 97 (expr -> expr CHHA .)
    GT              reduce using rule 97 (expr -> expr CHHA .)
    LT              reduce using rule 97 (expr -> expr CHHA .)
    GE              reduce using rule 97 (expr -> expr CHHA .)
    LE              reduce using rule 97 (expr -> expr CHHA .)
    EQ              reduce using rule 97 (expr -> expr CHHA .)
    NE              reduce using rule 97 (expr -> expr CHHA .)
    RA              reduce using rule 97 (expr -> expr CHHA .)
    WA              reduce using rule 97 (expr -> expr CHHA .)
    CHHA            reduce using rule 97 (expr -> expr CHHA .)
    CHHAINA         reduce using rule 97 (expr -> expr CHHA .)
    PATHAU          reduce using rule 97 (expr -> expr CHHA .)
    CHOTI           reduce using rule 97 (expr -> expr CHHA .)
    MAKA            reduce using rule 97 (expr -> expr CHHA .)
    LEKHA           reduce using rule 97 (expr -> expr CHHA .)
    LEU             reduce using rule 97 (expr -> expr CHHA .)
    COMMA           reduce using rule 97 (expr -> expr CHHA .)
    $end            reduce using rule 97 (expr -> expr CHHA .)
    KAKHA           reduce using rule 97 (expr -> expr CHHA .)
    TICHO           reduce using rule 97 (expr -> expr CHHA .)
    DIYE            reduce using rule 97 (expr -> expr CHHA .)
    error           reduce using rule 97 (expr -> expr CHHA .)
    ATHAWA          reduce using rule 97 (expr -> expr CHHA .)
    BAJA            reduce using rule 97 (expr -> expr CHHA .)
    BAISA           reduce using rule 97 (expr -> expr CHHA .)
    RGPARA          reduce using rule 97 (expr -> expr CHHA .)
    BHAE            reduce using rule 97 (expr -> expr CHHA .)
    RPARA           reduce using rule 97 (expr -> expr CHHA .)
    COLON           reduce using rule 97 (expr -> expr CHHA .)
    DEKHI           reduce using rule 97 (expr -> expr CHHA .)


state 95

    (41) forloop -> SABAI reference . ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> SABAI reference . ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (80) reference -> reference . DOT reference

    ASSIGNMENT      shift and go to state 131
    DOT             shift and go to state 67


state 96

    (2) program -> program NEWLINE stmt .

    BAISA           reduce using rule 2 (program -> program NEWLINE stmt .)
    NEWLINE         reduce using rule 2 (program -> program NEWLINE stmt .)
    DIYE            reduce using rule 2 (program -> program NEWLINE stmt .)
    ATHAWA          reduce using rule 2 (program -> program NEWLINE stmt .)
    MAKA            reduce using rule 2 (program -> program NEWLINE stmt .)
    error           reduce using rule 2 (program -> program NEWLINE stmt .)
    KAKHA           reduce using rule 2 (program -> program NEWLINE stmt .)
    $end            reduce using rule 2 (program -> program NEWLINE stmt .)
    BAJA            reduce using rule 2 (program -> program NEWLINE stmt .)
    TICHO           reduce using rule 2 (program -> program NEWLINE stmt .)


state 97

    (84) aryexpr -> expr .
    (85) aryexpr -> expr . COLON expr
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    RGPARA          reduce using rule 84 (aryexpr -> expr .)
    COLON           shift and go to state 132
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 98

    (83) optindex -> LGPARA aryexpr . RGPARA

    RGPARA          shift and go to state 133


state 99

    (82) optindex -> optindex LGPARA . aryexpr RGPARA
    (84) aryexpr -> . expr
    (85) aryexpr -> . expr COLON expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 97
    array                          shift and go to state 32
    float                          shift and go to state 6
    functioncall                   shift and go to state 53
    boolean                        shift and go to state 31
    aryexpr                        shift and go to state 134
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45

state 100

    (77) array -> LGPARA variableExpr RGPARA .

    PLUS            reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    MINUS           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    TIMES           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    DIVIDE          reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    MODULUS         reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    POWER           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    GT              reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    LT              reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    GE              reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    LE              reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    EQ              reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    NE              reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    RA              reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    WA              reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    CHHA            reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    CHHAINA         reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    NEWLINE         reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    $end            reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    KAKHA           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    TICHO           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    DIYE            reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    error           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    ATHAWA          reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    BAJA            reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    MAKA            reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    BAISA           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    PATHAU          reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    LEKHA           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    LEU             reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    COMMA           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    CHOTI           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    RGPARA          reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    BHAE            reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    RPARA           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    COLON           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)
    DEKHI           reduce using rule 77 (array -> LGPARA variableExpr RGPARA .)


state 101

    (24) incremental -> reference DI expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    BAISA           reduce using rule 24 (incremental -> reference DI expr .)
    NEWLINE         reduce using rule 24 (incremental -> reference DI expr .)
    $end            reduce using rule 24 (incremental -> reference DI expr .)
    KAKHA           reduce using rule 24 (incremental -> reference DI expr .)
    TICHO           reduce using rule 24 (incremental -> reference DI expr .)
    DIYE            reduce using rule 24 (incremental -> reference DI expr .)
    error           reduce using rule 24 (incremental -> reference DI expr .)
    ATHAWA          reduce using rule 24 (incremental -> reference DI expr .)
    BAJA            reduce using rule 24 (incremental -> reference DI expr .)
    MAKA            reduce using rule 24 (incremental -> reference DI expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 102

    (21) incremental -> reference AI expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    BAISA           reduce using rule 21 (incremental -> reference AI expr .)
    NEWLINE         reduce using rule 21 (incremental -> reference AI expr .)
    $end            reduce using rule 21 (incremental -> reference AI expr .)
    KAKHA           reduce using rule 21 (incremental -> reference AI expr .)
    TICHO           reduce using rule 21 (incremental -> reference AI expr .)
    DIYE            reduce using rule 21 (incremental -> reference AI expr .)
    error           reduce using rule 21 (incremental -> reference AI expr .)
    ATHAWA          reduce using rule 21 (incremental -> reference AI expr .)
    BAJA            reduce using rule 21 (incremental -> reference AI expr .)
    MAKA            reduce using rule 21 (incremental -> reference AI expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 103

    (17) assignment -> reference ASSIGNMENT expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    DIYE            reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    NEWLINE         reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    ATHAWA          reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    BAJA            reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    MAKA            reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    $end            reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    KAKHA           reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    TICHO           reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    error           reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    BAISA           reduce using rule 17 (assignment -> reference ASSIGNMENT expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 104

    (23) incremental -> reference MI expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    BAISA           reduce using rule 23 (incremental -> reference MI expr .)
    NEWLINE         reduce using rule 23 (incremental -> reference MI expr .)
    $end            reduce using rule 23 (incremental -> reference MI expr .)
    KAKHA           reduce using rule 23 (incremental -> reference MI expr .)
    TICHO           reduce using rule 23 (incremental -> reference MI expr .)
    DIYE            reduce using rule 23 (incremental -> reference MI expr .)
    error           reduce using rule 23 (incremental -> reference MI expr .)
    ATHAWA          reduce using rule 23 (incremental -> reference MI expr .)
    BAJA            reduce using rule 23 (incremental -> reference MI expr .)
    MAKA            reduce using rule 23 (incremental -> reference MI expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 105

    (22) incremental -> reference SI expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    BAISA           reduce using rule 22 (incremental -> reference SI expr .)
    NEWLINE         reduce using rule 22 (incremental -> reference SI expr .)
    $end            reduce using rule 22 (incremental -> reference SI expr .)
    KAKHA           reduce using rule 22 (incremental -> reference SI expr .)
    TICHO           reduce using rule 22 (incremental -> reference SI expr .)
    DIYE            reduce using rule 22 (incremental -> reference SI expr .)
    error           reduce using rule 22 (incremental -> reference SI expr .)
    ATHAWA          reduce using rule 22 (incremental -> reference SI expr .)
    BAJA            reduce using rule 22 (incremental -> reference SI expr .)
    MAKA            reduce using rule 22 (incremental -> reference SI expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 106

    (80) reference -> reference DOT reference .
    (80) reference -> reference . DOT reference

    DOT             reduce using rule 80 (reference -> reference DOT reference .)
    PLUS            reduce using rule 80 (reference -> reference DOT reference .)
    MINUS           reduce using rule 80 (reference -> reference DOT reference .)
    TIMES           reduce using rule 80 (reference -> reference DOT reference .)
    DIVIDE          reduce using rule 80 (reference -> reference DOT reference .)
    MODULUS         reduce using rule 80 (reference -> reference DOT reference .)
    POWER           reduce using rule 80 (reference -> reference DOT reference .)
    GT              reduce using rule 80 (reference -> reference DOT reference .)
    LT              reduce using rule 80 (reference -> reference DOT reference .)
    GE              reduce using rule 80 (reference -> reference DOT reference .)
    LE              reduce using rule 80 (reference -> reference DOT reference .)
    EQ              reduce using rule 80 (reference -> reference DOT reference .)
    NE              reduce using rule 80 (reference -> reference DOT reference .)
    RA              reduce using rule 80 (reference -> reference DOT reference .)
    WA              reduce using rule 80 (reference -> reference DOT reference .)
    CHHA            reduce using rule 80 (reference -> reference DOT reference .)
    CHHAINA         reduce using rule 80 (reference -> reference DOT reference .)
    PATHAU          reduce using rule 80 (reference -> reference DOT reference .)
    CHOTI           reduce using rule 80 (reference -> reference DOT reference .)
    NEWLINE         reduce using rule 80 (reference -> reference DOT reference .)
    $end            reduce using rule 80 (reference -> reference DOT reference .)
    LEKHA           reduce using rule 80 (reference -> reference DOT reference .)
    LEU             reduce using rule 80 (reference -> reference DOT reference .)
    COMMA           reduce using rule 80 (reference -> reference DOT reference .)
    RGPARA          reduce using rule 80 (reference -> reference DOT reference .)
    BHAE            reduce using rule 80 (reference -> reference DOT reference .)
    error           reduce using rule 80 (reference -> reference DOT reference .)
    RPARA           reduce using rule 80 (reference -> reference DOT reference .)
    KAKHA           reduce using rule 80 (reference -> reference DOT reference .)
    TICHO           reduce using rule 80 (reference -> reference DOT reference .)
    DIYE            reduce using rule 80 (reference -> reference DOT reference .)
    ATHAWA          reduce using rule 80 (reference -> reference DOT reference .)
    BAJA            reduce using rule 80 (reference -> reference DOT reference .)
    MAKA            reduce using rule 80 (reference -> reference DOT reference .)
    BAISA           reduce using rule 80 (reference -> reference DOT reference .)
    COLON           reduce using rule 80 (reference -> reference DOT reference .)
    DEKHI           reduce using rule 80 (reference -> reference DOT reference .)
    ASSIGNMENT      reduce using rule 80 (reference -> reference DOT reference .)
    AI              reduce using rule 80 (reference -> reference DOT reference .)
    SI              reduce using rule 80 (reference -> reference DOT reference .)
    MI              reduce using rule 80 (reference -> reference DOT reference .)
    DI              reduce using rule 80 (reference -> reference DOT reference .)

  ! DOT             [ shift and go to state 67 ]


state 107

    (28) slif -> YEDI expr BHAE . slstmt ATHAWA slstmt
    (29) slif -> YEDI expr BHAE . slstmt
    (36) mlif -> YEDI expr BHAE . NEWLINE program DIYE
    (37) mlif -> YEDI expr BHAE . NEWLINE program optelse DIYE
    (106) mlif -> YEDI expr BHAE . NEWLINE program error
    (107) mlif -> YEDI expr BHAE . NEWLINE program optelse error
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (99) empty -> .

    NEWLINE         shift and go to state 136
    YEDI            shift and go to state 135
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    string                         shift and go to state 8
    continue                       shift and go to state 14
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 59
    return                         shift and go to state 7
    slstmt                         shift and go to state 137
    assignment                     shift and go to state 51
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    expr                           shift and go to state 138
    variableExpr                   shift and go to state 26
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 108

    (100) slif -> YEDI expr error . slstmt
    (101) slif -> YEDI expr error . ATHAWA slstmt
    (102) mlif -> YEDI expr error . NEWLINE program DIYE
    (103) mlif -> YEDI expr error . NEWLINE program optelse DIYE
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (99) empty -> .

    ATHAWA          shift and go to state 141
    NEWLINE         shift and go to state 139
    YEDI            shift and go to state 135
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    string                         shift and go to state 8
    continue                       shift and go to state 14
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 59
    return                         shift and go to state 7
    slstmt                         shift and go to state 140
    assignment                     shift and go to state 51
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    expr                           shift and go to state 138
    variableExpr                   shift and go to state 26
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 109

    (43) whileloop -> JABA SAMMA expr . NEWLINE program BAJA
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         shift and go to state 142
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 110

    (47) variableExpr -> variableExpr COMMA expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    LEKHA           reduce using rule 47 (variableExpr -> variableExpr COMMA expr .)
    LEU             reduce using rule 47 (variableExpr -> variableExpr COMMA expr .)
    COMMA           reduce using rule 47 (variableExpr -> variableExpr COMMA expr .)
    RGPARA          reduce using rule 47 (variableExpr -> variableExpr COMMA expr .)
    RPARA           reduce using rule 47 (variableExpr -> variableExpr COMMA expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 111

    (18) print -> variableExpr LEKHA SEMICOLON .

    NEWLINE         reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)
    DIYE            reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)
    error           reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)
    $end            reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)
    KAKHA           reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)
    TICHO           reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)
    ATHAWA          reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)
    BAJA            reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)
    MAKA            reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)
    BAISA           reduce using rule 18 (print -> variableExpr LEKHA SEMICOLON .)


state 112

    (59) expr -> LPARA expr RPARA .

    NEWLINE         reduce using rule 59 (expr -> LPARA expr RPARA .)
    PLUS            reduce using rule 59 (expr -> LPARA expr RPARA .)
    MINUS           reduce using rule 59 (expr -> LPARA expr RPARA .)
    TIMES           reduce using rule 59 (expr -> LPARA expr RPARA .)
    DIVIDE          reduce using rule 59 (expr -> LPARA expr RPARA .)
    MODULUS         reduce using rule 59 (expr -> LPARA expr RPARA .)
    POWER           reduce using rule 59 (expr -> LPARA expr RPARA .)
    GT              reduce using rule 59 (expr -> LPARA expr RPARA .)
    LT              reduce using rule 59 (expr -> LPARA expr RPARA .)
    GE              reduce using rule 59 (expr -> LPARA expr RPARA .)
    LE              reduce using rule 59 (expr -> LPARA expr RPARA .)
    EQ              reduce using rule 59 (expr -> LPARA expr RPARA .)
    NE              reduce using rule 59 (expr -> LPARA expr RPARA .)
    RA              reduce using rule 59 (expr -> LPARA expr RPARA .)
    WA              reduce using rule 59 (expr -> LPARA expr RPARA .)
    CHHA            reduce using rule 59 (expr -> LPARA expr RPARA .)
    CHHAINA         reduce using rule 59 (expr -> LPARA expr RPARA .)
    PATHAU          reduce using rule 59 (expr -> LPARA expr RPARA .)
    CHOTI           reduce using rule 59 (expr -> LPARA expr RPARA .)
    MAKA            reduce using rule 59 (expr -> LPARA expr RPARA .)
    LEKHA           reduce using rule 59 (expr -> LPARA expr RPARA .)
    LEU             reduce using rule 59 (expr -> LPARA expr RPARA .)
    COMMA           reduce using rule 59 (expr -> LPARA expr RPARA .)
    $end            reduce using rule 59 (expr -> LPARA expr RPARA .)
    KAKHA           reduce using rule 59 (expr -> LPARA expr RPARA .)
    TICHO           reduce using rule 59 (expr -> LPARA expr RPARA .)
    DIYE            reduce using rule 59 (expr -> LPARA expr RPARA .)
    error           reduce using rule 59 (expr -> LPARA expr RPARA .)
    ATHAWA          reduce using rule 59 (expr -> LPARA expr RPARA .)
    BAJA            reduce using rule 59 (expr -> LPARA expr RPARA .)
    BAISA           reduce using rule 59 (expr -> LPARA expr RPARA .)
    RGPARA          reduce using rule 59 (expr -> LPARA expr RPARA .)
    BHAE            reduce using rule 59 (expr -> LPARA expr RPARA .)
    RPARA           reduce using rule 59 (expr -> LPARA expr RPARA .)
    COLON           reduce using rule 59 (expr -> LPARA expr RPARA .)
    DEKHI           reduce using rule 59 (expr -> LPARA expr RPARA .)


state 113

    (45) function -> KAAM IDENTIFIER LPARA . variableArgs RPARA NEWLINE program MAKA
    (108) function -> KAAM IDENTIFIER LPARA . error RPARA NEWLINE program MAKA
    (50) variableArgs -> . IDENTIFIER COMMA variableArgs
    (51) variableArgs -> . IDENTIFIER
    (52) variableArgs -> . empty
    (99) empty -> .

    error           shift and go to state 144
    IDENTIFIER      shift and go to state 145
    RPARA           reduce using rule 99 (empty -> .)

    variableArgs                   shift and go to state 143
    empty                          shift and go to state 146

state 114

    (46) class -> KHAKA IDENTIFIER NEWLINE . program KAKHA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    KAKHA           reduce using rule 99 (empty -> .)
    NEWLINE         reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 147
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 115

    (87) functioncall -> IDENTIFIER LPARA variableExpr . RPARA
    (47) variableExpr -> variableExpr . COMMA expr

    RPARA           shift and go to state 148
    COMMA           shift and go to state 70


state 116

    (96) expr -> expr WA expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 96 (expr -> expr WA expr .)
    RA              reduce using rule 96 (expr -> expr WA expr .)
    WA              reduce using rule 96 (expr -> expr WA expr .)
    CHHA            reduce using rule 96 (expr -> expr WA expr .)
    CHHAINA         reduce using rule 96 (expr -> expr WA expr .)
    PATHAU          reduce using rule 96 (expr -> expr WA expr .)
    CHOTI           reduce using rule 96 (expr -> expr WA expr .)
    MAKA            reduce using rule 96 (expr -> expr WA expr .)
    LEKHA           reduce using rule 96 (expr -> expr WA expr .)
    LEU             reduce using rule 96 (expr -> expr WA expr .)
    COMMA           reduce using rule 96 (expr -> expr WA expr .)
    $end            reduce using rule 96 (expr -> expr WA expr .)
    KAKHA           reduce using rule 96 (expr -> expr WA expr .)
    TICHO           reduce using rule 96 (expr -> expr WA expr .)
    DIYE            reduce using rule 96 (expr -> expr WA expr .)
    error           reduce using rule 96 (expr -> expr WA expr .)
    ATHAWA          reduce using rule 96 (expr -> expr WA expr .)
    BAJA            reduce using rule 96 (expr -> expr WA expr .)
    BAISA           reduce using rule 96 (expr -> expr WA expr .)
    RGPARA          reduce using rule 96 (expr -> expr WA expr .)
    BHAE            reduce using rule 96 (expr -> expr WA expr .)
    RPARA           reduce using rule 96 (expr -> expr WA expr .)
    COLON           reduce using rule 96 (expr -> expr WA expr .)
    DEKHI           reduce using rule 96 (expr -> expr WA expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83

  ! PLUS            [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! MINUS           [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! TIMES           [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! DIVIDE          [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! MODULUS         [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! POWER           [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! GT              [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! LT              [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! GE              [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! LE              [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! EQ              [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! NE              [ reduce using rule 96 (expr -> expr WA expr .) ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 117

    (54) expr -> expr MINUS expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 54 (expr -> expr MINUS expr .)
    PLUS            reduce using rule 54 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 54 (expr -> expr MINUS expr .)
    GT              reduce using rule 54 (expr -> expr MINUS expr .)
    LT              reduce using rule 54 (expr -> expr MINUS expr .)
    GE              reduce using rule 54 (expr -> expr MINUS expr .)
    LE              reduce using rule 54 (expr -> expr MINUS expr .)
    EQ              reduce using rule 54 (expr -> expr MINUS expr .)
    NE              reduce using rule 54 (expr -> expr MINUS expr .)
    RA              reduce using rule 54 (expr -> expr MINUS expr .)
    WA              reduce using rule 54 (expr -> expr MINUS expr .)
    CHHA            reduce using rule 54 (expr -> expr MINUS expr .)
    CHHAINA         reduce using rule 54 (expr -> expr MINUS expr .)
    PATHAU          reduce using rule 54 (expr -> expr MINUS expr .)
    CHOTI           reduce using rule 54 (expr -> expr MINUS expr .)
    MAKA            reduce using rule 54 (expr -> expr MINUS expr .)
    LEKHA           reduce using rule 54 (expr -> expr MINUS expr .)
    LEU             reduce using rule 54 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 54 (expr -> expr MINUS expr .)
    $end            reduce using rule 54 (expr -> expr MINUS expr .)
    KAKHA           reduce using rule 54 (expr -> expr MINUS expr .)
    TICHO           reduce using rule 54 (expr -> expr MINUS expr .)
    DIYE            reduce using rule 54 (expr -> expr MINUS expr .)
    error           reduce using rule 54 (expr -> expr MINUS expr .)
    ATHAWA          reduce using rule 54 (expr -> expr MINUS expr .)
    BAJA            reduce using rule 54 (expr -> expr MINUS expr .)
    BAISA           reduce using rule 54 (expr -> expr MINUS expr .)
    RGPARA          reduce using rule 54 (expr -> expr MINUS expr .)
    BHAE            reduce using rule 54 (expr -> expr MINUS expr .)
    RPARA           reduce using rule 54 (expr -> expr MINUS expr .)
    COLON           reduce using rule 54 (expr -> expr MINUS expr .)
    DEKHI           reduce using rule 54 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81

  ! TIMES           [ reduce using rule 54 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 54 (expr -> expr MINUS expr .) ]
  ! MODULUS         [ reduce using rule 54 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 54 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 79 ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 118

    (92) expr -> expr LE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 92 (expr -> expr LE expr .)
    GT              reduce using rule 92 (expr -> expr LE expr .)
    LT              reduce using rule 92 (expr -> expr LE expr .)
    GE              reduce using rule 92 (expr -> expr LE expr .)
    LE              reduce using rule 92 (expr -> expr LE expr .)
    EQ              reduce using rule 92 (expr -> expr LE expr .)
    NE              reduce using rule 92 (expr -> expr LE expr .)
    RA              reduce using rule 92 (expr -> expr LE expr .)
    WA              reduce using rule 92 (expr -> expr LE expr .)
    CHHA            reduce using rule 92 (expr -> expr LE expr .)
    CHHAINA         reduce using rule 92 (expr -> expr LE expr .)
    PATHAU          reduce using rule 92 (expr -> expr LE expr .)
    CHOTI           reduce using rule 92 (expr -> expr LE expr .)
    MAKA            reduce using rule 92 (expr -> expr LE expr .)
    LEKHA           reduce using rule 92 (expr -> expr LE expr .)
    LEU             reduce using rule 92 (expr -> expr LE expr .)
    COMMA           reduce using rule 92 (expr -> expr LE expr .)
    $end            reduce using rule 92 (expr -> expr LE expr .)
    KAKHA           reduce using rule 92 (expr -> expr LE expr .)
    TICHO           reduce using rule 92 (expr -> expr LE expr .)
    DIYE            reduce using rule 92 (expr -> expr LE expr .)
    error           reduce using rule 92 (expr -> expr LE expr .)
    ATHAWA          reduce using rule 92 (expr -> expr LE expr .)
    BAJA            reduce using rule 92 (expr -> expr LE expr .)
    BAISA           reduce using rule 92 (expr -> expr LE expr .)
    RGPARA          reduce using rule 92 (expr -> expr LE expr .)
    BHAE            reduce using rule 92 (expr -> expr LE expr .)
    RPARA           reduce using rule 92 (expr -> expr LE expr .)
    COLON           reduce using rule 92 (expr -> expr LE expr .)
    DEKHI           reduce using rule 92 (expr -> expr LE expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81

  ! PLUS            [ reduce using rule 92 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 92 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 92 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 92 (expr -> expr LE expr .) ]
  ! MODULUS         [ reduce using rule 92 (expr -> expr LE expr .) ]
  ! POWER           [ reduce using rule 92 (expr -> expr LE expr .) ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 119

    (58) expr -> expr POWER expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 58 (expr -> expr POWER expr .)
    PLUS            reduce using rule 58 (expr -> expr POWER expr .)
    MINUS           reduce using rule 58 (expr -> expr POWER expr .)
    TIMES           reduce using rule 58 (expr -> expr POWER expr .)
    DIVIDE          reduce using rule 58 (expr -> expr POWER expr .)
    MODULUS         reduce using rule 58 (expr -> expr POWER expr .)
    POWER           reduce using rule 58 (expr -> expr POWER expr .)
    GT              reduce using rule 58 (expr -> expr POWER expr .)
    LT              reduce using rule 58 (expr -> expr POWER expr .)
    GE              reduce using rule 58 (expr -> expr POWER expr .)
    LE              reduce using rule 58 (expr -> expr POWER expr .)
    EQ              reduce using rule 58 (expr -> expr POWER expr .)
    NE              reduce using rule 58 (expr -> expr POWER expr .)
    RA              reduce using rule 58 (expr -> expr POWER expr .)
    WA              reduce using rule 58 (expr -> expr POWER expr .)
    CHHA            reduce using rule 58 (expr -> expr POWER expr .)
    CHHAINA         reduce using rule 58 (expr -> expr POWER expr .)
    PATHAU          reduce using rule 58 (expr -> expr POWER expr .)
    CHOTI           reduce using rule 58 (expr -> expr POWER expr .)
    MAKA            reduce using rule 58 (expr -> expr POWER expr .)
    LEKHA           reduce using rule 58 (expr -> expr POWER expr .)
    LEU             reduce using rule 58 (expr -> expr POWER expr .)
    COMMA           reduce using rule 58 (expr -> expr POWER expr .)
    $end            reduce using rule 58 (expr -> expr POWER expr .)
    KAKHA           reduce using rule 58 (expr -> expr POWER expr .)
    TICHO           reduce using rule 58 (expr -> expr POWER expr .)
    DIYE            reduce using rule 58 (expr -> expr POWER expr .)
    error           reduce using rule 58 (expr -> expr POWER expr .)
    ATHAWA          reduce using rule 58 (expr -> expr POWER expr .)
    BAJA            reduce using rule 58 (expr -> expr POWER expr .)
    BAISA           reduce using rule 58 (expr -> expr POWER expr .)
    RGPARA          reduce using rule 58 (expr -> expr POWER expr .)
    BHAE            reduce using rule 58 (expr -> expr POWER expr .)
    RPARA           reduce using rule 58 (expr -> expr POWER expr .)
    COLON           reduce using rule 58 (expr -> expr POWER expr .)
    DEKHI           reduce using rule 58 (expr -> expr POWER expr .)

  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! MODULUS         [ shift and go to state 82 ]
  ! POWER           [ shift and go to state 81 ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 120

    (57) expr -> expr MODULUS expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 57 (expr -> expr MODULUS expr .)
    PLUS            reduce using rule 57 (expr -> expr MODULUS expr .)
    MINUS           reduce using rule 57 (expr -> expr MODULUS expr .)
    TIMES           reduce using rule 57 (expr -> expr MODULUS expr .)
    DIVIDE          reduce using rule 57 (expr -> expr MODULUS expr .)
    MODULUS         reduce using rule 57 (expr -> expr MODULUS expr .)
    POWER           reduce using rule 57 (expr -> expr MODULUS expr .)
    GT              reduce using rule 57 (expr -> expr MODULUS expr .)
    LT              reduce using rule 57 (expr -> expr MODULUS expr .)
    GE              reduce using rule 57 (expr -> expr MODULUS expr .)
    LE              reduce using rule 57 (expr -> expr MODULUS expr .)
    EQ              reduce using rule 57 (expr -> expr MODULUS expr .)
    NE              reduce using rule 57 (expr -> expr MODULUS expr .)
    RA              reduce using rule 57 (expr -> expr MODULUS expr .)
    WA              reduce using rule 57 (expr -> expr MODULUS expr .)
    CHHA            reduce using rule 57 (expr -> expr MODULUS expr .)
    CHHAINA         reduce using rule 57 (expr -> expr MODULUS expr .)
    PATHAU          reduce using rule 57 (expr -> expr MODULUS expr .)
    CHOTI           reduce using rule 57 (expr -> expr MODULUS expr .)
    MAKA            reduce using rule 57 (expr -> expr MODULUS expr .)
    LEKHA           reduce using rule 57 (expr -> expr MODULUS expr .)
    LEU             reduce using rule 57 (expr -> expr MODULUS expr .)
    COMMA           reduce using rule 57 (expr -> expr MODULUS expr .)
    $end            reduce using rule 57 (expr -> expr MODULUS expr .)
    KAKHA           reduce using rule 57 (expr -> expr MODULUS expr .)
    TICHO           reduce using rule 57 (expr -> expr MODULUS expr .)
    DIYE            reduce using rule 57 (expr -> expr MODULUS expr .)
    error           reduce using rule 57 (expr -> expr MODULUS expr .)
    ATHAWA          reduce using rule 57 (expr -> expr MODULUS expr .)
    BAJA            reduce using rule 57 (expr -> expr MODULUS expr .)
    BAISA           reduce using rule 57 (expr -> expr MODULUS expr .)
    RGPARA          reduce using rule 57 (expr -> expr MODULUS expr .)
    BHAE            reduce using rule 57 (expr -> expr MODULUS expr .)
    RPARA           reduce using rule 57 (expr -> expr MODULUS expr .)
    COLON           reduce using rule 57 (expr -> expr MODULUS expr .)
    DEKHI           reduce using rule 57 (expr -> expr MODULUS expr .)

  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! MODULUS         [ shift and go to state 82 ]
  ! POWER           [ shift and go to state 81 ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 121

    (94) expr -> expr NE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 94 (expr -> expr NE expr .)
    EQ              reduce using rule 94 (expr -> expr NE expr .)
    NE              reduce using rule 94 (expr -> expr NE expr .)
    RA              reduce using rule 94 (expr -> expr NE expr .)
    WA              reduce using rule 94 (expr -> expr NE expr .)
    CHHA            reduce using rule 94 (expr -> expr NE expr .)
    CHHAINA         reduce using rule 94 (expr -> expr NE expr .)
    PATHAU          reduce using rule 94 (expr -> expr NE expr .)
    CHOTI           reduce using rule 94 (expr -> expr NE expr .)
    MAKA            reduce using rule 94 (expr -> expr NE expr .)
    LEKHA           reduce using rule 94 (expr -> expr NE expr .)
    LEU             reduce using rule 94 (expr -> expr NE expr .)
    COMMA           reduce using rule 94 (expr -> expr NE expr .)
    $end            reduce using rule 94 (expr -> expr NE expr .)
    KAKHA           reduce using rule 94 (expr -> expr NE expr .)
    TICHO           reduce using rule 94 (expr -> expr NE expr .)
    DIYE            reduce using rule 94 (expr -> expr NE expr .)
    error           reduce using rule 94 (expr -> expr NE expr .)
    ATHAWA          reduce using rule 94 (expr -> expr NE expr .)
    BAJA            reduce using rule 94 (expr -> expr NE expr .)
    BAISA           reduce using rule 94 (expr -> expr NE expr .)
    RGPARA          reduce using rule 94 (expr -> expr NE expr .)
    BHAE            reduce using rule 94 (expr -> expr NE expr .)
    RPARA           reduce using rule 94 (expr -> expr NE expr .)
    COLON           reduce using rule 94 (expr -> expr NE expr .)
    DEKHI           reduce using rule 94 (expr -> expr NE expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80

  ! PLUS            [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! MODULUS         [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! POWER           [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 94 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 122

    (90) expr -> expr LT expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 90 (expr -> expr LT expr .)
    GT              reduce using rule 90 (expr -> expr LT expr .)
    LT              reduce using rule 90 (expr -> expr LT expr .)
    GE              reduce using rule 90 (expr -> expr LT expr .)
    LE              reduce using rule 90 (expr -> expr LT expr .)
    EQ              reduce using rule 90 (expr -> expr LT expr .)
    NE              reduce using rule 90 (expr -> expr LT expr .)
    RA              reduce using rule 90 (expr -> expr LT expr .)
    WA              reduce using rule 90 (expr -> expr LT expr .)
    CHHA            reduce using rule 90 (expr -> expr LT expr .)
    CHHAINA         reduce using rule 90 (expr -> expr LT expr .)
    PATHAU          reduce using rule 90 (expr -> expr LT expr .)
    CHOTI           reduce using rule 90 (expr -> expr LT expr .)
    MAKA            reduce using rule 90 (expr -> expr LT expr .)
    LEKHA           reduce using rule 90 (expr -> expr LT expr .)
    LEU             reduce using rule 90 (expr -> expr LT expr .)
    COMMA           reduce using rule 90 (expr -> expr LT expr .)
    $end            reduce using rule 90 (expr -> expr LT expr .)
    KAKHA           reduce using rule 90 (expr -> expr LT expr .)
    TICHO           reduce using rule 90 (expr -> expr LT expr .)
    DIYE            reduce using rule 90 (expr -> expr LT expr .)
    error           reduce using rule 90 (expr -> expr LT expr .)
    ATHAWA          reduce using rule 90 (expr -> expr LT expr .)
    BAJA            reduce using rule 90 (expr -> expr LT expr .)
    BAISA           reduce using rule 90 (expr -> expr LT expr .)
    RGPARA          reduce using rule 90 (expr -> expr LT expr .)
    BHAE            reduce using rule 90 (expr -> expr LT expr .)
    RPARA           reduce using rule 90 (expr -> expr LT expr .)
    COLON           reduce using rule 90 (expr -> expr LT expr .)
    DEKHI           reduce using rule 90 (expr -> expr LT expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81

  ! PLUS            [ reduce using rule 90 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 90 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 90 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 90 (expr -> expr LT expr .) ]
  ! MODULUS         [ reduce using rule 90 (expr -> expr LT expr .) ]
  ! POWER           [ reduce using rule 90 (expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 123

    (53) expr -> expr PLUS expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 53 (expr -> expr PLUS expr .)
    PLUS            reduce using rule 53 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 53 (expr -> expr PLUS expr .)
    GT              reduce using rule 53 (expr -> expr PLUS expr .)
    LT              reduce using rule 53 (expr -> expr PLUS expr .)
    GE              reduce using rule 53 (expr -> expr PLUS expr .)
    LE              reduce using rule 53 (expr -> expr PLUS expr .)
    EQ              reduce using rule 53 (expr -> expr PLUS expr .)
    NE              reduce using rule 53 (expr -> expr PLUS expr .)
    RA              reduce using rule 53 (expr -> expr PLUS expr .)
    WA              reduce using rule 53 (expr -> expr PLUS expr .)
    CHHA            reduce using rule 53 (expr -> expr PLUS expr .)
    CHHAINA         reduce using rule 53 (expr -> expr PLUS expr .)
    PATHAU          reduce using rule 53 (expr -> expr PLUS expr .)
    CHOTI           reduce using rule 53 (expr -> expr PLUS expr .)
    MAKA            reduce using rule 53 (expr -> expr PLUS expr .)
    LEKHA           reduce using rule 53 (expr -> expr PLUS expr .)
    LEU             reduce using rule 53 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 53 (expr -> expr PLUS expr .)
    $end            reduce using rule 53 (expr -> expr PLUS expr .)
    KAKHA           reduce using rule 53 (expr -> expr PLUS expr .)
    TICHO           reduce using rule 53 (expr -> expr PLUS expr .)
    DIYE            reduce using rule 53 (expr -> expr PLUS expr .)
    error           reduce using rule 53 (expr -> expr PLUS expr .)
    ATHAWA          reduce using rule 53 (expr -> expr PLUS expr .)
    BAJA            reduce using rule 53 (expr -> expr PLUS expr .)
    BAISA           reduce using rule 53 (expr -> expr PLUS expr .)
    RGPARA          reduce using rule 53 (expr -> expr PLUS expr .)
    BHAE            reduce using rule 53 (expr -> expr PLUS expr .)
    RPARA           reduce using rule 53 (expr -> expr PLUS expr .)
    COLON           reduce using rule 53 (expr -> expr PLUS expr .)
    DEKHI           reduce using rule 53 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81

  ! TIMES           [ reduce using rule 53 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 53 (expr -> expr PLUS expr .) ]
  ! MODULUS         [ reduce using rule 53 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 53 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 79 ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 124

    (95) expr -> expr RA expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 95 (expr -> expr RA expr .)
    RA              reduce using rule 95 (expr -> expr RA expr .)
    WA              reduce using rule 95 (expr -> expr RA expr .)
    CHHA            reduce using rule 95 (expr -> expr RA expr .)
    CHHAINA         reduce using rule 95 (expr -> expr RA expr .)
    PATHAU          reduce using rule 95 (expr -> expr RA expr .)
    CHOTI           reduce using rule 95 (expr -> expr RA expr .)
    MAKA            reduce using rule 95 (expr -> expr RA expr .)
    LEKHA           reduce using rule 95 (expr -> expr RA expr .)
    LEU             reduce using rule 95 (expr -> expr RA expr .)
    COMMA           reduce using rule 95 (expr -> expr RA expr .)
    $end            reduce using rule 95 (expr -> expr RA expr .)
    KAKHA           reduce using rule 95 (expr -> expr RA expr .)
    TICHO           reduce using rule 95 (expr -> expr RA expr .)
    DIYE            reduce using rule 95 (expr -> expr RA expr .)
    error           reduce using rule 95 (expr -> expr RA expr .)
    ATHAWA          reduce using rule 95 (expr -> expr RA expr .)
    BAJA            reduce using rule 95 (expr -> expr RA expr .)
    BAISA           reduce using rule 95 (expr -> expr RA expr .)
    RGPARA          reduce using rule 95 (expr -> expr RA expr .)
    BHAE            reduce using rule 95 (expr -> expr RA expr .)
    RPARA           reduce using rule 95 (expr -> expr RA expr .)
    COLON           reduce using rule 95 (expr -> expr RA expr .)
    DEKHI           reduce using rule 95 (expr -> expr RA expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83

  ! PLUS            [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! MINUS           [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! TIMES           [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! DIVIDE          [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! MODULUS         [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! POWER           [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! GT              [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! LT              [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! GE              [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! LE              [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! EQ              [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! NE              [ reduce using rule 95 (expr -> expr RA expr .) ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 125

    (89) expr -> expr GT expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 89 (expr -> expr GT expr .)
    GT              reduce using rule 89 (expr -> expr GT expr .)
    LT              reduce using rule 89 (expr -> expr GT expr .)
    GE              reduce using rule 89 (expr -> expr GT expr .)
    LE              reduce using rule 89 (expr -> expr GT expr .)
    EQ              reduce using rule 89 (expr -> expr GT expr .)
    NE              reduce using rule 89 (expr -> expr GT expr .)
    RA              reduce using rule 89 (expr -> expr GT expr .)
    WA              reduce using rule 89 (expr -> expr GT expr .)
    CHHA            reduce using rule 89 (expr -> expr GT expr .)
    CHHAINA         reduce using rule 89 (expr -> expr GT expr .)
    PATHAU          reduce using rule 89 (expr -> expr GT expr .)
    CHOTI           reduce using rule 89 (expr -> expr GT expr .)
    MAKA            reduce using rule 89 (expr -> expr GT expr .)
    LEKHA           reduce using rule 89 (expr -> expr GT expr .)
    LEU             reduce using rule 89 (expr -> expr GT expr .)
    COMMA           reduce using rule 89 (expr -> expr GT expr .)
    $end            reduce using rule 89 (expr -> expr GT expr .)
    KAKHA           reduce using rule 89 (expr -> expr GT expr .)
    TICHO           reduce using rule 89 (expr -> expr GT expr .)
    DIYE            reduce using rule 89 (expr -> expr GT expr .)
    error           reduce using rule 89 (expr -> expr GT expr .)
    ATHAWA          reduce using rule 89 (expr -> expr GT expr .)
    BAJA            reduce using rule 89 (expr -> expr GT expr .)
    BAISA           reduce using rule 89 (expr -> expr GT expr .)
    RGPARA          reduce using rule 89 (expr -> expr GT expr .)
    BHAE            reduce using rule 89 (expr -> expr GT expr .)
    RPARA           reduce using rule 89 (expr -> expr GT expr .)
    COLON           reduce using rule 89 (expr -> expr GT expr .)
    DEKHI           reduce using rule 89 (expr -> expr GT expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81

  ! PLUS            [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! MODULUS         [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! POWER           [ reduce using rule 89 (expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 126

    (56) expr -> expr DIVIDE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 56 (expr -> expr DIVIDE expr .)
    PLUS            reduce using rule 56 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 56 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 56 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 56 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 56 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 56 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 56 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 56 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 56 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 56 (expr -> expr DIVIDE expr .)
    RA              reduce using rule 56 (expr -> expr DIVIDE expr .)
    WA              reduce using rule 56 (expr -> expr DIVIDE expr .)
    CHHA            reduce using rule 56 (expr -> expr DIVIDE expr .)
    CHHAINA         reduce using rule 56 (expr -> expr DIVIDE expr .)
    PATHAU          reduce using rule 56 (expr -> expr DIVIDE expr .)
    CHOTI           reduce using rule 56 (expr -> expr DIVIDE expr .)
    MAKA            reduce using rule 56 (expr -> expr DIVIDE expr .)
    LEKHA           reduce using rule 56 (expr -> expr DIVIDE expr .)
    LEU             reduce using rule 56 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 56 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 56 (expr -> expr DIVIDE expr .)
    KAKHA           reduce using rule 56 (expr -> expr DIVIDE expr .)
    TICHO           reduce using rule 56 (expr -> expr DIVIDE expr .)
    DIYE            reduce using rule 56 (expr -> expr DIVIDE expr .)
    error           reduce using rule 56 (expr -> expr DIVIDE expr .)
    ATHAWA          reduce using rule 56 (expr -> expr DIVIDE expr .)
    BAJA            reduce using rule 56 (expr -> expr DIVIDE expr .)
    BAISA           reduce using rule 56 (expr -> expr DIVIDE expr .)
    RGPARA          reduce using rule 56 (expr -> expr DIVIDE expr .)
    BHAE            reduce using rule 56 (expr -> expr DIVIDE expr .)
    RPARA           reduce using rule 56 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 56 (expr -> expr DIVIDE expr .)
    DEKHI           reduce using rule 56 (expr -> expr DIVIDE expr .)
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81

  ! MODULUS         [ reduce using rule 56 (expr -> expr DIVIDE expr .) ]
  ! POWER           [ reduce using rule 56 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 127

    (55) expr -> expr TIMES expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 55 (expr -> expr TIMES expr .)
    PLUS            reduce using rule 55 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 55 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 55 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 55 (expr -> expr TIMES expr .)
    GT              reduce using rule 55 (expr -> expr TIMES expr .)
    LT              reduce using rule 55 (expr -> expr TIMES expr .)
    GE              reduce using rule 55 (expr -> expr TIMES expr .)
    LE              reduce using rule 55 (expr -> expr TIMES expr .)
    EQ              reduce using rule 55 (expr -> expr TIMES expr .)
    NE              reduce using rule 55 (expr -> expr TIMES expr .)
    RA              reduce using rule 55 (expr -> expr TIMES expr .)
    WA              reduce using rule 55 (expr -> expr TIMES expr .)
    CHHA            reduce using rule 55 (expr -> expr TIMES expr .)
    CHHAINA         reduce using rule 55 (expr -> expr TIMES expr .)
    PATHAU          reduce using rule 55 (expr -> expr TIMES expr .)
    CHOTI           reduce using rule 55 (expr -> expr TIMES expr .)
    MAKA            reduce using rule 55 (expr -> expr TIMES expr .)
    LEKHA           reduce using rule 55 (expr -> expr TIMES expr .)
    LEU             reduce using rule 55 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 55 (expr -> expr TIMES expr .)
    $end            reduce using rule 55 (expr -> expr TIMES expr .)
    KAKHA           reduce using rule 55 (expr -> expr TIMES expr .)
    TICHO           reduce using rule 55 (expr -> expr TIMES expr .)
    DIYE            reduce using rule 55 (expr -> expr TIMES expr .)
    error           reduce using rule 55 (expr -> expr TIMES expr .)
    ATHAWA          reduce using rule 55 (expr -> expr TIMES expr .)
    BAJA            reduce using rule 55 (expr -> expr TIMES expr .)
    BAISA           reduce using rule 55 (expr -> expr TIMES expr .)
    RGPARA          reduce using rule 55 (expr -> expr TIMES expr .)
    BHAE            reduce using rule 55 (expr -> expr TIMES expr .)
    RPARA           reduce using rule 55 (expr -> expr TIMES expr .)
    COLON           reduce using rule 55 (expr -> expr TIMES expr .)
    DEKHI           reduce using rule 55 (expr -> expr TIMES expr .)
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81

  ! MODULUS         [ reduce using rule 55 (expr -> expr TIMES expr .) ]
  ! POWER           [ reduce using rule 55 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 85 ]
  ! MINUS           [ shift and go to state 79 ]
  ! TIMES           [ shift and go to state 89 ]
  ! DIVIDE          [ shift and go to state 88 ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 128

    (91) expr -> expr GE expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 91 (expr -> expr GE expr .)
    GT              reduce using rule 91 (expr -> expr GE expr .)
    LT              reduce using rule 91 (expr -> expr GE expr .)
    GE              reduce using rule 91 (expr -> expr GE expr .)
    LE              reduce using rule 91 (expr -> expr GE expr .)
    EQ              reduce using rule 91 (expr -> expr GE expr .)
    NE              reduce using rule 91 (expr -> expr GE expr .)
    RA              reduce using rule 91 (expr -> expr GE expr .)
    WA              reduce using rule 91 (expr -> expr GE expr .)
    CHHA            reduce using rule 91 (expr -> expr GE expr .)
    CHHAINA         reduce using rule 91 (expr -> expr GE expr .)
    PATHAU          reduce using rule 91 (expr -> expr GE expr .)
    CHOTI           reduce using rule 91 (expr -> expr GE expr .)
    MAKA            reduce using rule 91 (expr -> expr GE expr .)
    LEKHA           reduce using rule 91 (expr -> expr GE expr .)
    LEU             reduce using rule 91 (expr -> expr GE expr .)
    COMMA           reduce using rule 91 (expr -> expr GE expr .)
    $end            reduce using rule 91 (expr -> expr GE expr .)
    KAKHA           reduce using rule 91 (expr -> expr GE expr .)
    TICHO           reduce using rule 91 (expr -> expr GE expr .)
    DIYE            reduce using rule 91 (expr -> expr GE expr .)
    error           reduce using rule 91 (expr -> expr GE expr .)
    ATHAWA          reduce using rule 91 (expr -> expr GE expr .)
    BAJA            reduce using rule 91 (expr -> expr GE expr .)
    BAISA           reduce using rule 91 (expr -> expr GE expr .)
    RGPARA          reduce using rule 91 (expr -> expr GE expr .)
    BHAE            reduce using rule 91 (expr -> expr GE expr .)
    RPARA           reduce using rule 91 (expr -> expr GE expr .)
    COLON           reduce using rule 91 (expr -> expr GE expr .)
    DEKHI           reduce using rule 91 (expr -> expr GE expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81

  ! PLUS            [ reduce using rule 91 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 91 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 91 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 91 (expr -> expr GE expr .) ]
  ! MODULUS         [ reduce using rule 91 (expr -> expr GE expr .) ]
  ! POWER           [ reduce using rule 91 (expr -> expr GE expr .) ]
  ! GT              [ shift and go to state 87 ]
  ! LT              [ shift and go to state 84 ]
  ! GE              [ shift and go to state 91 ]
  ! LE              [ shift and go to state 80 ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 129

    (44) repeatloop -> expr CHOTI NEWLINE . program TICHO
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    TICHO           reduce using rule 99 (empty -> .)
    NEWLINE         reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 149
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 130

    (93) expr -> expr EQ expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 93 (expr -> expr EQ expr .)
    EQ              reduce using rule 93 (expr -> expr EQ expr .)
    NE              reduce using rule 93 (expr -> expr EQ expr .)
    RA              reduce using rule 93 (expr -> expr EQ expr .)
    WA              reduce using rule 93 (expr -> expr EQ expr .)
    CHHA            reduce using rule 93 (expr -> expr EQ expr .)
    CHHAINA         reduce using rule 93 (expr -> expr EQ expr .)
    PATHAU          reduce using rule 93 (expr -> expr EQ expr .)
    CHOTI           reduce using rule 93 (expr -> expr EQ expr .)
    MAKA            reduce using rule 93 (expr -> expr EQ expr .)
    LEKHA           reduce using rule 93 (expr -> expr EQ expr .)
    LEU             reduce using rule 93 (expr -> expr EQ expr .)
    COMMA           reduce using rule 93 (expr -> expr EQ expr .)
    $end            reduce using rule 93 (expr -> expr EQ expr .)
    KAKHA           reduce using rule 93 (expr -> expr EQ expr .)
    TICHO           reduce using rule 93 (expr -> expr EQ expr .)
    DIYE            reduce using rule 93 (expr -> expr EQ expr .)
    error           reduce using rule 93 (expr -> expr EQ expr .)
    ATHAWA          reduce using rule 93 (expr -> expr EQ expr .)
    BAJA            reduce using rule 93 (expr -> expr EQ expr .)
    BAISA           reduce using rule 93 (expr -> expr EQ expr .)
    RGPARA          reduce using rule 93 (expr -> expr EQ expr .)
    BHAE            reduce using rule 93 (expr -> expr EQ expr .)
    RPARA           reduce using rule 93 (expr -> expr EQ expr .)
    COLON           reduce using rule 93 (expr -> expr EQ expr .)
    DEKHI           reduce using rule 93 (expr -> expr EQ expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80

  ! PLUS            [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! MODULUS         [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! POWER           [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 93 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 93 ]
  ! NE              [ shift and go to state 83 ]
  ! RA              [ shift and go to state 86 ]
  ! WA              [ shift and go to state 77 ]
  ! CHHA            [ shift and go to state 94 ]
  ! CHHAINA         [ shift and go to state 78 ]


state 131

    (41) forloop -> SABAI reference ASSIGNMENT . expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> SABAI reference ASSIGNMENT . expr DEKHI expr COLON expr NEWLINE program BAISA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    boolean                        shift and go to state 31
    expr                           shift and go to state 150
    float                          shift and go to state 6
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 132

    (85) aryexpr -> expr COLON . expr
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    expr                           shift and go to state 151
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 133

    (83) optindex -> LGPARA aryexpr RGPARA .

    LGPARA          reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    ASSIGNMENT      reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    AI              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    SI              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    MI              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    DI              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    DOT             reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    PATHAU          reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    CHOTI           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    PLUS            reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    MINUS           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    TIMES           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    DIVIDE          reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    MODULUS         reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    POWER           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    GT              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    LT              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    GE              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    LE              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    EQ              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    NE              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    RA              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    WA              reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    CHHA            reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    CHHAINA         reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    NEWLINE         reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    $end            reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    LEKHA           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    LEU             reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    COMMA           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    RGPARA          reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    BHAE            reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    error           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    RPARA           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    KAKHA           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    TICHO           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    DIYE            reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    ATHAWA          reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    BAJA            reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    MAKA            reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    BAISA           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    COLON           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)
    DEKHI           reduce using rule 83 (optindex -> LGPARA aryexpr RGPARA .)


state 134

    (82) optindex -> optindex LGPARA aryexpr . RGPARA

    RGPARA          shift and go to state 152


state 135

    (28) slif -> YEDI . expr BHAE slstmt ATHAWA slstmt
    (29) slif -> YEDI . expr BHAE slstmt
    (100) slif -> YEDI . expr error slstmt
    (101) slif -> YEDI . expr error ATHAWA slstmt
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    reference                      shift and go to state 54
    expr                           shift and go to state 153
    float                          shift and go to state 6
    boolean                        shift and go to state 31
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32
    string                         shift and go to state 8

state 136

    (36) mlif -> YEDI expr BHAE NEWLINE . program DIYE
    (37) mlif -> YEDI expr BHAE NEWLINE . program optelse DIYE
    (106) mlif -> YEDI expr BHAE NEWLINE . program error
    (107) mlif -> YEDI expr BHAE NEWLINE . program optelse error
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    DIYE            reduce using rule 99 (empty -> .)
    error           reduce using rule 99 (empty -> .)
    NEWLINE         reduce using rule 99 (empty -> .)
    ATHAWA          reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 154
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 137

    (28) slif -> YEDI expr BHAE slstmt . ATHAWA slstmt
    (29) slif -> YEDI expr BHAE slstmt .

  ! shift/reduce conflict for ATHAWA resolved as shift
    ATHAWA          shift and go to state 155
    MAKA            reduce using rule 29 (slif -> YEDI expr BHAE slstmt .)
    NEWLINE         reduce using rule 29 (slif -> YEDI expr BHAE slstmt .)
    $end            reduce using rule 29 (slif -> YEDI expr BHAE slstmt .)
    KAKHA           reduce using rule 29 (slif -> YEDI expr BHAE slstmt .)
    TICHO           reduce using rule 29 (slif -> YEDI expr BHAE slstmt .)
    DIYE            reduce using rule 29 (slif -> YEDI expr BHAE slstmt .)
    error           reduce using rule 29 (slif -> YEDI expr BHAE slstmt .)
    BAJA            reduce using rule 29 (slif -> YEDI expr BHAE slstmt .)
    BAISA           reduce using rule 29 (slif -> YEDI expr BHAE slstmt .)

  ! ATHAWA          [ reduce using rule 29 (slif -> YEDI expr BHAE slstmt .) ]


state 138

    (16) expression -> expr .
    (25) return -> expr . PATHAU
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA
    (48) variableExpr -> expr .

    NEWLINE         reduce using rule 16 (expression -> expr .)
    $end            reduce using rule 16 (expression -> expr .)
    KAKHA           reduce using rule 16 (expression -> expr .)
    TICHO           reduce using rule 16 (expression -> expr .)
    DIYE            reduce using rule 16 (expression -> expr .)
    error           reduce using rule 16 (expression -> expr .)
    ATHAWA          reduce using rule 16 (expression -> expr .)
    BAJA            reduce using rule 16 (expression -> expr .)
    MAKA            reduce using rule 16 (expression -> expr .)
    BAISA           reduce using rule 16 (expression -> expr .)
    PATHAU          shift and go to state 90
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78
    LEKHA           reduce using rule 48 (variableExpr -> expr .)
    LEU             reduce using rule 48 (variableExpr -> expr .)
    COMMA           reduce using rule 48 (variableExpr -> expr .)


state 139

    (102) mlif -> YEDI expr error NEWLINE . program DIYE
    (103) mlif -> YEDI expr error NEWLINE . program optelse DIYE
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    DIYE            reduce using rule 99 (empty -> .)
    NEWLINE         reduce using rule 99 (empty -> .)
    ATHAWA          reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 156
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 140

    (100) slif -> YEDI expr error slstmt .

    MAKA            reduce using rule 100 (slif -> YEDI expr error slstmt .)
    NEWLINE         reduce using rule 100 (slif -> YEDI expr error slstmt .)
    $end            reduce using rule 100 (slif -> YEDI expr error slstmt .)
    KAKHA           reduce using rule 100 (slif -> YEDI expr error slstmt .)
    TICHO           reduce using rule 100 (slif -> YEDI expr error slstmt .)
    DIYE            reduce using rule 100 (slif -> YEDI expr error slstmt .)
    error           reduce using rule 100 (slif -> YEDI expr error slstmt .)
    ATHAWA          reduce using rule 100 (slif -> YEDI expr error slstmt .)
    BAJA            reduce using rule 100 (slif -> YEDI expr error slstmt .)
    BAISA           reduce using rule 100 (slif -> YEDI expr error slstmt .)


state 141

    (101) slif -> YEDI expr error ATHAWA . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (99) empty -> .

    YEDI            shift and go to state 135
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    boolean                        shift and go to state 31
    array                          shift and go to state 32
    null                           shift and go to state 45
    string                         shift and go to state 8
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 59
    return                         shift and go to state 7
    slstmt                         shift and go to state 157
    assignment                     shift and go to state 51
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    expr                           shift and go to state 138
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 142

    (43) whileloop -> JABA SAMMA expr NEWLINE . program BAJA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    BAJA            reduce using rule 99 (empty -> .)
    NEWLINE         reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 158
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 143

    (45) function -> KAAM IDENTIFIER LPARA variableArgs . RPARA NEWLINE program MAKA

    RPARA           shift and go to state 159


state 144

    (108) function -> KAAM IDENTIFIER LPARA error . RPARA NEWLINE program MAKA

    RPARA           shift and go to state 160


state 145

    (50) variableArgs -> IDENTIFIER . COMMA variableArgs
    (51) variableArgs -> IDENTIFIER .

    COMMA           shift and go to state 161
    RPARA           reduce using rule 51 (variableArgs -> IDENTIFIER .)


state 146

    (52) variableArgs -> empty .

    RPARA           reduce using rule 52 (variableArgs -> empty .)


state 147

    (46) class -> KHAKA IDENTIFIER NEWLINE program . KAKHA
    (2) program -> program . NEWLINE stmt

    KAKHA           shift and go to state 162
    NEWLINE         shift and go to state 56


state 148

    (87) functioncall -> IDENTIFIER LPARA variableExpr RPARA .

    DOT             reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    PLUS            reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MINUS           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    TIMES           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DIVIDE          reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MODULUS         reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    POWER           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    GT              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LT              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    GE              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LE              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    EQ              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    NE              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RA              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    WA              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHHA            reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHHAINA         reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    PATHAU          reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHOTI           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    NEWLINE         reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    $end            reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LEKHA           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LEU             reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    COMMA           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RGPARA          reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BHAE            reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    error           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RPARA           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    KAKHA           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    TICHO           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DIYE            reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    ATHAWA          reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BAJA            reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MAKA            reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BAISA           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    COLON           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DEKHI           reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    ASSIGNMENT      reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    AI              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    SI              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MI              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DI              reduce using rule 87 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)


state 149

    (44) repeatloop -> expr CHOTI NEWLINE program . TICHO
    (2) program -> program . NEWLINE stmt

    TICHO           shift and go to state 163
    NEWLINE         shift and go to state 56


state 150

    (41) forloop -> SABAI reference ASSIGNMENT expr . DEKHI expr NEWLINE program BAISA
    (42) forloop -> SABAI reference ASSIGNMENT expr . DEKHI expr COLON expr NEWLINE program BAISA
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    DEKHI           shift and go to state 164
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 151

    (85) aryexpr -> expr COLON expr .
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    RGPARA          reduce using rule 85 (aryexpr -> expr COLON expr .)
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 152

    (82) optindex -> optindex LGPARA aryexpr RGPARA .

    LGPARA          reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    ASSIGNMENT      reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    AI              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    SI              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    MI              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DI              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DOT             reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    PATHAU          reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    CHOTI           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    PLUS            reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    MINUS           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    TIMES           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DIVIDE          reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    MODULUS         reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    POWER           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    GT              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    LT              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    GE              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    LE              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    EQ              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    NE              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    RA              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    WA              reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    CHHA            reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    CHHAINA         reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    NEWLINE         reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    $end            reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    LEKHA           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    LEU             reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    COMMA           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    RGPARA          reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    BHAE            reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    error           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    RPARA           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    KAKHA           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    TICHO           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DIYE            reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    ATHAWA          reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    BAJA            reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    MAKA            reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    BAISA           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    COLON           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)
    DEKHI           reduce using rule 82 (optindex -> optindex LGPARA aryexpr RGPARA .)


state 153

    (28) slif -> YEDI expr . BHAE slstmt ATHAWA slstmt
    (29) slif -> YEDI expr . BHAE slstmt
    (100) slif -> YEDI expr . error slstmt
    (101) slif -> YEDI expr . error ATHAWA slstmt
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    BHAE            shift and go to state 165
    error           shift and go to state 166
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 154

    (36) mlif -> YEDI expr BHAE NEWLINE program . DIYE
    (37) mlif -> YEDI expr BHAE NEWLINE program . optelse DIYE
    (106) mlif -> YEDI expr BHAE NEWLINE program . error
    (107) mlif -> YEDI expr BHAE NEWLINE program . optelse error
    (2) program -> program . NEWLINE stmt
    (38) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (39) optelse -> . ATHAWA expr BHAE NEWLINE program
    (40) optelse -> . ATHAWA NEWLINE program
    (104) optelse -> . ATHAWA expr error NEWLINE program optelse
    (105) optelse -> . ATHAWA expr error NEWLINE program

    DIYE            shift and go to state 167
    error           shift and go to state 169
    NEWLINE         shift and go to state 56
    ATHAWA          shift and go to state 168

    optelse                        shift and go to state 170

state 155

    (28) slif -> YEDI expr BHAE slstmt ATHAWA . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (99) empty -> .

    YEDI            shift and go to state 135
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    boolean                        shift and go to state 31
    array                          shift and go to state 32
    null                           shift and go to state 45
    string                         shift and go to state 8
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 59
    return                         shift and go to state 7
    slstmt                         shift and go to state 171
    assignment                     shift and go to state 51
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    expr                           shift and go to state 138
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 156

    (102) mlif -> YEDI expr error NEWLINE program . DIYE
    (103) mlif -> YEDI expr error NEWLINE program . optelse DIYE
    (2) program -> program . NEWLINE stmt
    (38) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (39) optelse -> . ATHAWA expr BHAE NEWLINE program
    (40) optelse -> . ATHAWA NEWLINE program
    (104) optelse -> . ATHAWA expr error NEWLINE program optelse
    (105) optelse -> . ATHAWA expr error NEWLINE program

    DIYE            shift and go to state 172
    NEWLINE         shift and go to state 56
    ATHAWA          shift and go to state 168

    optelse                        shift and go to state 173

state 157

    (101) slif -> YEDI expr error ATHAWA slstmt .

    MAKA            reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)
    NEWLINE         reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)
    $end            reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)
    KAKHA           reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)
    TICHO           reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)
    DIYE            reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)
    error           reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)
    ATHAWA          reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)
    BAJA            reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)
    BAISA           reduce using rule 101 (slif -> YEDI expr error ATHAWA slstmt .)


state 158

    (43) whileloop -> JABA SAMMA expr NEWLINE program . BAJA
    (2) program -> program . NEWLINE stmt

    BAJA            shift and go to state 174
    NEWLINE         shift and go to state 56


state 159

    (45) function -> KAAM IDENTIFIER LPARA variableArgs RPARA . NEWLINE program MAKA

    NEWLINE         shift and go to state 175


state 160

    (108) function -> KAAM IDENTIFIER LPARA error RPARA . NEWLINE program MAKA

    NEWLINE         shift and go to state 176


state 161

    (50) variableArgs -> IDENTIFIER COMMA . variableArgs
    (50) variableArgs -> . IDENTIFIER COMMA variableArgs
    (51) variableArgs -> . IDENTIFIER
    (52) variableArgs -> . empty
    (99) empty -> .

    IDENTIFIER      shift and go to state 145
    RPARA           reduce using rule 99 (empty -> .)

    variableArgs                   shift and go to state 177
    empty                          shift and go to state 146

state 162

    (46) class -> KHAKA IDENTIFIER NEWLINE program KAKHA .

    NEWLINE         reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    $end            reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    KAKHA           reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    TICHO           reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    DIYE            reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    error           reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    ATHAWA          reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    BAJA            reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    MAKA            reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    BAISA           reduce using rule 46 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)


state 163

    (44) repeatloop -> expr CHOTI NEWLINE program TICHO .

    NEWLINE         reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    ATHAWA          reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    DIYE            reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    error           reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    BAISA           reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    BAJA            reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    MAKA            reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    KAKHA           reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    TICHO           reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    $end            reduce using rule 44 (repeatloop -> expr CHOTI NEWLINE program TICHO .)


state 164

    (41) forloop -> SABAI reference ASSIGNMENT expr DEKHI . expr NEWLINE program BAISA
    (42) forloop -> SABAI reference ASSIGNMENT expr DEKHI . expr COLON expr NEWLINE program BAISA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    boolean                        shift and go to state 31
    expr                           shift and go to state 178
    float                          shift and go to state 6
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 165

    (28) slif -> YEDI expr BHAE . slstmt ATHAWA slstmt
    (29) slif -> YEDI expr BHAE . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (99) empty -> .

    YEDI            shift and go to state 135
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    boolean                        shift and go to state 31
    array                          shift and go to state 32
    null                           shift and go to state 45
    string                         shift and go to state 8
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 59
    return                         shift and go to state 7
    slstmt                         shift and go to state 137
    assignment                     shift and go to state 51
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    expr                           shift and go to state 138
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 166

    (100) slif -> YEDI expr error . slstmt
    (101) slif -> YEDI expr error . ATHAWA slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA
    (99) empty -> .

    ATHAWA          shift and go to state 141
    YEDI            shift and go to state 135
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    boolean                        shift and go to state 31
    array                          shift and go to state 32
    null                           shift and go to state 45
    string                         shift and go to state 8
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 59
    return                         shift and go to state 7
    slstmt                         shift and go to state 140
    assignment                     shift and go to state 51
    break                          shift and go to state 10
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    expr                           shift and go to state 138
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 167

    (36) mlif -> YEDI expr BHAE NEWLINE program DIYE .

    BAJA            reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    NEWLINE         reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    DIYE            reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    ATHAWA          reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    error           reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    $end            reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    BAISA           reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    KAKHA           reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    TICHO           reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    MAKA            reduce using rule 36 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)


state 168

    (38) optelse -> ATHAWA . expr BHAE NEWLINE program optelse
    (39) optelse -> ATHAWA . expr BHAE NEWLINE program
    (40) optelse -> ATHAWA . NEWLINE program
    (104) optelse -> ATHAWA . expr error NEWLINE program optelse
    (105) optelse -> ATHAWA . expr error NEWLINE program
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         shift and go to state 179
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    string                         shift and go to state 8
    reference                      shift and go to state 54
    boolean                        shift and go to state 31
    expr                           shift and go to state 180
    float                          shift and go to state 6
    identifier                     shift and go to state 15
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 169

    (106) mlif -> YEDI expr BHAE NEWLINE program error .

    BAJA            reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)
    NEWLINE         reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)
    DIYE            reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)
    ATHAWA          reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)
    error           reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)
    $end            reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)
    BAISA           reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)
    KAKHA           reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)
    TICHO           reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)
    MAKA            reduce using rule 106 (mlif -> YEDI expr BHAE NEWLINE program error .)


state 170

    (37) mlif -> YEDI expr BHAE NEWLINE program optelse . DIYE
    (107) mlif -> YEDI expr BHAE NEWLINE program optelse . error

    DIYE            shift and go to state 181
    error           shift and go to state 182


state 171

    (28) slif -> YEDI expr BHAE slstmt ATHAWA slstmt .

    MAKA            reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    NEWLINE         reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    $end            reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    KAKHA           reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    TICHO           reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    DIYE            reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    error           reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    ATHAWA          reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    BAJA            reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    BAISA           reduce using rule 28 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)


state 172

    (102) mlif -> YEDI expr error NEWLINE program DIYE .

    BAJA            reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)
    NEWLINE         reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)
    DIYE            reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)
    ATHAWA          reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)
    error           reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)
    $end            reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)
    BAISA           reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)
    KAKHA           reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)
    TICHO           reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)
    MAKA            reduce using rule 102 (mlif -> YEDI expr error NEWLINE program DIYE .)


state 173

    (103) mlif -> YEDI expr error NEWLINE program optelse . DIYE

    DIYE            shift and go to state 183


state 174

    (43) whileloop -> JABA SAMMA expr NEWLINE program BAJA .

    TICHO           reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    NEWLINE         reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    MAKA            reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    BAISA           reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    DIYE            reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    error           reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    $end            reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    ATHAWA          reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    BAJA            reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    KAKHA           reduce using rule 43 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)


state 175

    (45) function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE . program MAKA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MAKA            reduce using rule 99 (empty -> .)
    NEWLINE         reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    program                        shift and go to state 184
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 176

    (108) function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE . program MAKA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MAKA            reduce using rule 99 (empty -> .)
    NEWLINE         reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 185
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 177

    (50) variableArgs -> IDENTIFIER COMMA variableArgs .

    RPARA           reduce using rule 50 (variableArgs -> IDENTIFIER COMMA variableArgs .)


state 178

    (41) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr . NEWLINE program BAISA
    (42) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr . COLON expr NEWLINE program BAISA
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         shift and go to state 186
    COLON           shift and go to state 187
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 179

    (40) optelse -> ATHAWA NEWLINE . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 99 (empty -> .)
    DIYE            reduce using rule 99 (empty -> .)
    error           reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 188
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 180

    (38) optelse -> ATHAWA expr . BHAE NEWLINE program optelse
    (39) optelse -> ATHAWA expr . BHAE NEWLINE program
    (104) optelse -> ATHAWA expr . error NEWLINE program optelse
    (105) optelse -> ATHAWA expr . error NEWLINE program
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    BHAE            shift and go to state 189
    error           shift and go to state 190
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 181

    (37) mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .

    BAJA            reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    NEWLINE         reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    DIYE            reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    ATHAWA          reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    error           reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    $end            reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    BAISA           reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    KAKHA           reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    TICHO           reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    MAKA            reduce using rule 37 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)


state 182

    (107) mlif -> YEDI expr BHAE NEWLINE program optelse error .

    BAJA            reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    NEWLINE         reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    DIYE            reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    ATHAWA          reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    error           reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    $end            reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    BAISA           reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    KAKHA           reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    TICHO           reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)
    MAKA            reduce using rule 107 (mlif -> YEDI expr BHAE NEWLINE program optelse error .)


state 183

    (103) mlif -> YEDI expr error NEWLINE program optelse DIYE .

    BAJA            reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    NEWLINE         reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    DIYE            reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    ATHAWA          reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    error           reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    $end            reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    BAISA           reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    KAKHA           reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    TICHO           reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)
    MAKA            reduce using rule 103 (mlif -> YEDI expr error NEWLINE program optelse DIYE .)


state 184

    (45) function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program . MAKA
    (2) program -> program . NEWLINE stmt

    MAKA            shift and go to state 191
    NEWLINE         shift and go to state 56


state 185

    (108) function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program . MAKA
    (2) program -> program . NEWLINE stmt

    MAKA            shift and go to state 192
    NEWLINE         shift and go to state 56


state 186

    (41) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE . program BAISA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    BAISA           reduce using rule 99 (empty -> .)
    NEWLINE         reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 193
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 187

    (42) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON . expr NEWLINE program BAISA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    identifier                     shift and go to state 15
    string                         shift and go to state 8
    reference                      shift and go to state 54
    boolean                        shift and go to state 31
    expr                           shift and go to state 194
    float                          shift and go to state 6
    functioncall                   shift and go to state 53
    integer                        shift and go to state 11
    imaginary                      shift and go to state 24
    null                           shift and go to state 45
    array                          shift and go to state 32

state 188

    (40) optelse -> ATHAWA NEWLINE program .
    (2) program -> program . NEWLINE stmt

    DIYE            reduce using rule 40 (optelse -> ATHAWA NEWLINE program .)
    error           reduce using rule 40 (optelse -> ATHAWA NEWLINE program .)
    NEWLINE         shift and go to state 56


state 189

    (38) optelse -> ATHAWA expr BHAE . NEWLINE program optelse
    (39) optelse -> ATHAWA expr BHAE . NEWLINE program

    NEWLINE         shift and go to state 195


state 190

    (104) optelse -> ATHAWA expr error . NEWLINE program optelse
    (105) optelse -> ATHAWA expr error . NEWLINE program

    NEWLINE         shift and go to state 196


state 191

    (45) function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .

    NEWLINE         reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    ATHAWA          reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    DIYE            reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    error           reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    KAKHA           reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    MAKA            reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    $end            reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    TICHO           reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    BAJA            reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    BAISA           reduce using rule 45 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)


state 192

    (108) function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .

    NEWLINE         reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    ATHAWA          reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    DIYE            reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    error           reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    KAKHA           reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    MAKA            reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    $end            reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    TICHO           reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    BAJA            reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)
    BAISA           reduce using rule 108 (function -> KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA .)


state 193

    (41) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program . BAISA
    (2) program -> program . NEWLINE stmt

    BAISA           shift and go to state 197
    NEWLINE         shift and go to state 56


state 194

    (42) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr . NEWLINE program BAISA
    (53) expr -> expr . PLUS expr
    (54) expr -> expr . MINUS expr
    (55) expr -> expr . TIMES expr
    (56) expr -> expr . DIVIDE expr
    (57) expr -> expr . MODULUS expr
    (58) expr -> expr . POWER expr
    (89) expr -> expr . GT expr
    (90) expr -> expr . LT expr
    (91) expr -> expr . GE expr
    (92) expr -> expr . LE expr
    (93) expr -> expr . EQ expr
    (94) expr -> expr . NE expr
    (95) expr -> expr . RA expr
    (96) expr -> expr . WA expr
    (97) expr -> expr . CHHA
    (98) expr -> expr . CHHAINA

    NEWLINE         shift and go to state 198
    PLUS            shift and go to state 85
    MINUS           shift and go to state 79
    TIMES           shift and go to state 89
    DIVIDE          shift and go to state 88
    MODULUS         shift and go to state 82
    POWER           shift and go to state 81
    GT              shift and go to state 87
    LT              shift and go to state 84
    GE              shift and go to state 91
    LE              shift and go to state 80
    EQ              shift and go to state 93
    NE              shift and go to state 83
    RA              shift and go to state 86
    WA              shift and go to state 77
    CHHA            shift and go to state 94
    CHHAINA         shift and go to state 78


state 195

    (38) optelse -> ATHAWA expr BHAE NEWLINE . program optelse
    (39) optelse -> ATHAWA expr BHAE NEWLINE . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 99 (empty -> .)
    ATHAWA          reduce using rule 99 (empty -> .)
    DIYE            reduce using rule 99 (empty -> .)
    error           reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 199
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 196

    (104) optelse -> ATHAWA expr error NEWLINE . program optelse
    (105) optelse -> ATHAWA expr error NEWLINE . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 99 (empty -> .)
    ATHAWA          reduce using rule 99 (empty -> .)
    DIYE            reduce using rule 99 (empty -> .)
    error           reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 200
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 197

    (41) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .

    NEWLINE         reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    DIYE            reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    error           reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    $end            reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    BAISA           reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    ATHAWA          reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    KAKHA           reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    TICHO           reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    BAJA            reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    MAKA            reduce using rule 41 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)


state 198

    (42) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE . program BAISA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (99) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) slstmt -> . continue
    (15) slstmt -> . break
    (30) mlstmt -> . mlif
    (31) mlstmt -> . forloop
    (32) mlstmt -> . whileloop
    (33) mlstmt -> . repeatloop
    (34) mlstmt -> . function
    (35) mlstmt -> . class
    (16) expression -> . expr
    (17) assignment -> . reference ASSIGNMENT expr
    (18) print -> . variableExpr LEKHA SEMICOLON
    (19) print -> . variableExpr LEKHA
    (20) input -> . variableExpr LEU
    (28) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (29) slif -> . YEDI expr BHAE slstmt
    (100) slif -> . YEDI expr error slstmt
    (101) slif -> . YEDI expr error ATHAWA slstmt
    (21) incremental -> . reference AI expr
    (22) incremental -> . reference SI expr
    (23) incremental -> . reference MI expr
    (24) incremental -> . reference DI expr
    (25) return -> . expr PATHAU
    (26) continue -> . ARKO
    (27) break -> . BAHIRA
    (36) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (37) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (102) mlif -> . YEDI expr error NEWLINE program DIYE
    (103) mlif -> . YEDI expr error NEWLINE program optelse DIYE
    (106) mlif -> . YEDI expr BHAE NEWLINE program error
    (107) mlif -> . YEDI expr BHAE NEWLINE program optelse error
    (41) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (42) forloop -> . SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (43) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (44) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (45) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (108) function -> . KAAM IDENTIFIER LPARA error RPARA NEWLINE program MAKA
    (46) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (53) expr -> . expr PLUS expr
    (54) expr -> . expr MINUS expr
    (55) expr -> . expr TIMES expr
    (56) expr -> . expr DIVIDE expr
    (57) expr -> . expr MODULUS expr
    (58) expr -> . expr POWER expr
    (59) expr -> . LPARA expr RPARA
    (60) expr -> . integer
    (61) expr -> . float
    (62) expr -> . imaginary
    (63) expr -> . string
    (64) expr -> . null
    (65) expr -> . boolean
    (66) expr -> . reference
    (67) expr -> . array
    (88) expr -> . MINUS expr
    (89) expr -> . expr GT expr
    (90) expr -> . expr LT expr
    (91) expr -> . expr GE expr
    (92) expr -> . expr LE expr
    (93) expr -> . expr EQ expr
    (94) expr -> . expr NE expr
    (95) expr -> . expr RA expr
    (96) expr -> . expr WA expr
    (97) expr -> . expr CHHA
    (98) expr -> . expr CHHAINA
    (78) reference -> . identifier
    (79) reference -> . functioncall
    (80) reference -> . reference DOT reference
    (81) reference -> . identifier optindex
    (47) variableExpr -> . variableExpr COMMA expr
    (48) variableExpr -> . expr
    (49) variableExpr -> . empty
    (68) integer -> . DECIMALINTEGER
    (69) integer -> . OCTALINTEGER
    (70) integer -> . HEXAINTEGER
    (71) float -> . FLOAT
    (72) imaginary -> . IMAGNUMBER
    (73) string -> . STRING
    (74) null -> . SUNYA
    (75) boolean -> . SACHO
    (76) boolean -> . JHUTO
    (77) array -> . LGPARA variableExpr RGPARA
    (86) identifier -> . IDENTIFIER
    (87) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    BAISA           reduce using rule 99 (empty -> .)
    NEWLINE         reduce using rule 99 (empty -> .)
    LEKHA           reduce using rule 99 (empty -> .)
    LEU             reduce using rule 99 (empty -> .)
    COMMA           reduce using rule 99 (empty -> .)
    YEDI            shift and go to state 18
    ARKO            shift and go to state 46
    BAHIRA          shift and go to state 2
    SABAI           shift and go to state 47
    JABA            shift and go to state 20
    KAAM            shift and go to state 34
    KHAKA           shift and go to state 35
    LPARA           shift and go to state 29
    MINUS           shift and go to state 1
    DECIMALINTEGER  shift and go to state 48
    OCTALINTEGER    shift and go to state 33
    HEXAINTEGER     shift and go to state 25
    FLOAT           shift and go to state 52
    IMAGNUMBER      shift and go to state 13
    STRING          shift and go to state 50
    SUNYA           shift and go to state 41
    SACHO           shift and go to state 30
    JHUTO           shift and go to state 27
    LGPARA          shift and go to state 16
    IDENTIFIER      shift and go to state 37

    slif                           shift and go to state 43
    reference                      shift and go to state 17
    boolean                        shift and go to state 31
    float                          shift and go to state 6
    incremental                    shift and go to state 44
    array                          shift and go to state 32
    null                           shift and go to state 45
    imaginary                      shift and go to state 24
    string                         shift and go to state 8
    forloop                        shift and go to state 3
    program                        shift and go to state 201
    print                          shift and go to state 21
    input                          shift and go to state 5
    empty                          shift and go to state 38
    function                       shift and go to state 39
    whileloop                      shift and go to state 22
    return                         shift and go to state 7
    slstmt                         shift and go to state 40
    assignment                     shift and go to state 51
    repeatloop                     shift and go to state 9
    stmt                           shift and go to state 23
    break                          shift and go to state 10
    mlstmt                         shift and go to state 19
    integer                        shift and go to state 11
    mlif                           shift and go to state 12
    class                          shift and go to state 36
    expr                           shift and go to state 42
    variableExpr                   shift and go to state 26
    continue                       shift and go to state 14
    functioncall                   shift and go to state 53
    identifier                     shift and go to state 15
    expression                     shift and go to state 28

state 199

    (38) optelse -> ATHAWA expr BHAE NEWLINE program . optelse
    (39) optelse -> ATHAWA expr BHAE NEWLINE program .
    (2) program -> program . NEWLINE stmt
    (38) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (39) optelse -> . ATHAWA expr BHAE NEWLINE program
    (40) optelse -> . ATHAWA NEWLINE program
    (104) optelse -> . ATHAWA expr error NEWLINE program optelse
    (105) optelse -> . ATHAWA expr error NEWLINE program

    DIYE            reduce using rule 39 (optelse -> ATHAWA expr BHAE NEWLINE program .)
    error           reduce using rule 39 (optelse -> ATHAWA expr BHAE NEWLINE program .)
    NEWLINE         shift and go to state 56
    ATHAWA          shift and go to state 168

    optelse                        shift and go to state 202

state 200

    (104) optelse -> ATHAWA expr error NEWLINE program . optelse
    (105) optelse -> ATHAWA expr error NEWLINE program .
    (2) program -> program . NEWLINE stmt
    (38) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (39) optelse -> . ATHAWA expr BHAE NEWLINE program
    (40) optelse -> . ATHAWA NEWLINE program
    (104) optelse -> . ATHAWA expr error NEWLINE program optelse
    (105) optelse -> . ATHAWA expr error NEWLINE program

    DIYE            reduce using rule 105 (optelse -> ATHAWA expr error NEWLINE program .)
    error           reduce using rule 105 (optelse -> ATHAWA expr error NEWLINE program .)
    NEWLINE         shift and go to state 56
    ATHAWA          shift and go to state 168

    optelse                        shift and go to state 203

state 201

    (42) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program . BAISA
    (2) program -> program . NEWLINE stmt

    BAISA           shift and go to state 204
    NEWLINE         shift and go to state 56


state 202

    (38) optelse -> ATHAWA expr BHAE NEWLINE program optelse .

    DIYE            reduce using rule 38 (optelse -> ATHAWA expr BHAE NEWLINE program optelse .)
    error           reduce using rule 38 (optelse -> ATHAWA expr BHAE NEWLINE program optelse .)


state 203

    (104) optelse -> ATHAWA expr error NEWLINE program optelse .

    DIYE            reduce using rule 104 (optelse -> ATHAWA expr error NEWLINE program optelse .)
    error           reduce using rule 104 (optelse -> ATHAWA expr error NEWLINE program optelse .)


state 204

    (42) forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .

    NEWLINE         reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    DIYE            reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    error           reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    $end            reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    BAISA           reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    ATHAWA          reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    KAKHA           reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    TICHO           reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    BAJA            reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    MAKA            reduce using rule 42 (forloop -> SABAI reference ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ATHAWA in state 137 resolved as shift

Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    HATAU
    LUKAU
    KORA
    RGPARA
    BANDAGARA
    BAHIRA
    BANAU
    ARKO
    BATA
    QUESTION
    NABHAE
    SUNYA
    LGPARA
    METAU
    MA
    DEKHAU

Grammar

Rule 0     S' -> begin
Rule 1     begin -> program
Rule 2     program -> program NEWLINE stmt
Rule 3     program -> stmt
Rule 4     stmt -> empty
Rule 5     stmt -> slstmt
Rule 6     stmt -> mlstmt
Rule 7     slstmt -> expression
Rule 8     slstmt -> assignment
Rule 9     slstmt -> print
Rule 10    slstmt -> input
Rule 11    slstmt -> slif
Rule 12    slstmt -> incremental
Rule 13    slstmt -> return
Rule 14    expression -> expr
Rule 15    assignment -> IDENTIFIER ASSIGNMENT expr
Rule 16    print -> variableExpr LEKHA SEMICOLON
Rule 17    print -> variableExpr LEKHA
Rule 18    input -> variableExpr LEU
Rule 19    incremental -> IDENTIFIER AI expr
Rule 20    incremental -> IDENTIFIER SI expr
Rule 21    incremental -> IDENTIFIER MI expr
Rule 22    incremental -> IDENTIFIER DI expr
Rule 23    return -> expr PATHAU
Rule 24    slif -> YEDI expr BHAE slstmt ATHAWA slstmt
Rule 25    slif -> YEDI expr BHAE slstmt
Rule 26    mlstmt -> mlif
Rule 27    mlstmt -> forloop
Rule 28    mlstmt -> whileloop
Rule 29    mlstmt -> repeatloop
Rule 30    mlstmt -> function
Rule 31    mlstmt -> class
Rule 32    mlif -> YEDI expr BHAE NEWLINE program DIYE
Rule 33    mlif -> YEDI expr BHAE NEWLINE program optelse DIYE
Rule 34    optelse -> ATHAWA expr BHAE NEWLINE program optelse
Rule 35    optelse -> ATHAWA expr BHAE NEWLINE program
Rule 36    optelse -> ATHAWA NEWLINE program
Rule 37    forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
Rule 38    forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
Rule 39    whileloop -> JABA SAMMA expr NEWLINE program BAJA
Rule 40    repeatloop -> expr CHOTI NEWLINE program TICHO
Rule 41    function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
Rule 42    class -> KHAKA IDENTIFIER NEWLINE program KAKHA
Rule 43    variableExpr -> variableExpr COMMA expr
Rule 44    variableExpr -> expr
Rule 45    variableExpr -> empty
Rule 46    variableArgs -> IDENTIFIER COMMA variableArgs
Rule 47    variableArgs -> IDENTIFIER
Rule 48    variableArgs -> IDENTIFIER BOGUS
Rule 49    variableArgs -> empty
Rule 50    expr -> expr PLUS expr
Rule 51    expr -> expr MINUS expr
Rule 52    expr -> expr TIMES expr
Rule 53    expr -> expr DIVIDE expr
Rule 54    expr -> expr MODULUS expr
Rule 55    expr -> expr POWER expr
Rule 56    expr -> LPARA expr RPARA
Rule 57    expr -> integer
Rule 58    expr -> float
Rule 59    expr -> imaginary
Rule 60    expr -> string
Rule 61    expr -> reference
Rule 62    integer -> DECIMALINTEGER
Rule 63    integer -> OCTALINTEGER
Rule 64    integer -> HEXAINTEGER
Rule 65    float -> FLOAT
Rule 66    imaginary -> IMAGNUMBER
Rule 67    string -> STRING
Rule 68    reference -> identifier
Rule 69    reference -> functioncall
Rule 70    reference -> reference DOT identifier
Rule 71    reference -> reference DOT functioncall
Rule 72    identifier -> IDENTIFIER
Rule 73    functioncall -> IDENTIFIER LPARA variableExpr RPARA
Rule 74    expr -> MINUS expr
Rule 75    expr -> expr GT expr
Rule 76    expr -> expr LT expr
Rule 77    expr -> expr GE expr
Rule 78    expr -> expr LE expr
Rule 79    expr -> expr EQ expr
Rule 80    expr -> expr NE expr
Rule 81    expr -> expr RA expr
Rule 82    expr -> expr WA expr
Rule 83    expr -> expr CHHA
Rule 84    expr -> expr CHHAINA
Rule 85    empty -> <empty>

Terminals, with rules where they appear

AI                   : 19
ARKO                 : 
ASSIGNMENT           : 15 37 38
ATHAWA               : 24 34 35 36
BAHIRA               : 
BAISA                : 37 38
BAJA                 : 39
BANAU                : 
BANDAGARA            : 
BATA                 : 
BHAE                 : 24 25 32 33 34 35
BOGUS                : 48
CHHA                 : 83
CHHAINA              : 84
CHOTI                : 40
COLON                : 38
COMMA                : 43 46
DECIMALINTEGER       : 62
DEKHAU               : 
DEKHI                : 37 38
DI                   : 22
DIVIDE               : 53
DIYE                 : 32 33
DOT                  : 70 71
EQ                   : 79
FLOAT                : 65
GE                   : 77
GT                   : 75
HATAU                : 
HEXAINTEGER          : 64
IDENTIFIER           : 15 19 20 21 22 37 38 41 42 46 47 48 72 73
IMAGNUMBER           : 66
JABA                 : 39
KAAM                 : 41
KAKHA                : 42
KHAKA                : 42
KORA                 : 
LE                   : 78
LEKHA                : 16 17
LEU                  : 18
LGPARA               : 
LPARA                : 41 56 73
LT                   : 76
LUKAU                : 
MA                   : 
MAKA                 : 41
METAU                : 
MI                   : 21
MINUS                : 51 74
MODULUS              : 54
NABHAE               : 
NE                   : 80
NEWLINE              : 2 32 33 34 35 36 37 38 39 40 41 42
OCTALINTEGER         : 63
PATHAU               : 23
PLUS                 : 50
POWER                : 55
QUESTION             : 
RA                   : 81
RGPARA               : 
RPARA                : 41 56 73
SABAI                : 37 38
SAMMA                : 39
SEMICOLON            : 16
SI                   : 20
STRING               : 67
SUNYA                : 
TICHO                : 40
TIMES                : 52
WA                   : 82
YEDI                 : 24 25 32 33
error                : 

Nonterminals, with rules where they appear

assignment           : 8
begin                : 0
class                : 31
empty                : 4 45 49
expr                 : 14 15 19 20 21 22 23 24 25 32 33 34 35 37 37 38 38 38 39 40 43 44 50 50 51 51 52 52 53 53 54 54 55 55 56 74 75 75 76 76 77 77 78 78 79 79 80 80 81 81 82 82 83 84
expression           : 7
float                : 58
forloop              : 27
function             : 30
functioncall         : 69 71
identifier           : 68 70
imaginary            : 59
incremental          : 12
input                : 10
integer              : 57
mlif                 : 26
mlstmt               : 6
optelse              : 33 34
print                : 9
program              : 1 2 32 33 34 35 36 37 38 39 40 41 42
reference            : 61 70 71
repeatloop           : 29
return               : 13
slif                 : 11
slstmt               : 5 24 24 25
stmt                 : 2 3
string               : 60
variableArgs         : 41 46
variableExpr         : 16 17 18 43 73
whileloop            : 28

Parsing method: LALR

state 0

    (0) S' -> . begin
    (1) begin -> . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 85 (empty -> .)
    $end            reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    program                        shift and go to state 15
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    begin                          shift and go to state 23
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 1

    (11) slstmt -> slif .

    NEWLINE         reduce using rule 11 (slstmt -> slif .)
    $end            reduce using rule 11 (slstmt -> slif .)
    KAKHA           reduce using rule 11 (slstmt -> slif .)
    TICHO           reduce using rule 11 (slstmt -> slif .)
    DIYE            reduce using rule 11 (slstmt -> slif .)
    ATHAWA          reduce using rule 11 (slstmt -> slif .)
    BAJA            reduce using rule 11 (slstmt -> slif .)
    MAKA            reduce using rule 11 (slstmt -> slif .)
    BAISA           reduce using rule 11 (slstmt -> slif .)


state 2

    (62) integer -> DECIMALINTEGER .

    PLUS            reduce using rule 62 (integer -> DECIMALINTEGER .)
    MINUS           reduce using rule 62 (integer -> DECIMALINTEGER .)
    TIMES           reduce using rule 62 (integer -> DECIMALINTEGER .)
    DIVIDE          reduce using rule 62 (integer -> DECIMALINTEGER .)
    MODULUS         reduce using rule 62 (integer -> DECIMALINTEGER .)
    POWER           reduce using rule 62 (integer -> DECIMALINTEGER .)
    GT              reduce using rule 62 (integer -> DECIMALINTEGER .)
    LT              reduce using rule 62 (integer -> DECIMALINTEGER .)
    GE              reduce using rule 62 (integer -> DECIMALINTEGER .)
    LE              reduce using rule 62 (integer -> DECIMALINTEGER .)
    EQ              reduce using rule 62 (integer -> DECIMALINTEGER .)
    NE              reduce using rule 62 (integer -> DECIMALINTEGER .)
    RA              reduce using rule 62 (integer -> DECIMALINTEGER .)
    WA              reduce using rule 62 (integer -> DECIMALINTEGER .)
    CHHA            reduce using rule 62 (integer -> DECIMALINTEGER .)
    CHHAINA         reduce using rule 62 (integer -> DECIMALINTEGER .)
    NEWLINE         reduce using rule 62 (integer -> DECIMALINTEGER .)
    $end            reduce using rule 62 (integer -> DECIMALINTEGER .)
    KAKHA           reduce using rule 62 (integer -> DECIMALINTEGER .)
    TICHO           reduce using rule 62 (integer -> DECIMALINTEGER .)
    DIYE            reduce using rule 62 (integer -> DECIMALINTEGER .)
    ATHAWA          reduce using rule 62 (integer -> DECIMALINTEGER .)
    BAJA            reduce using rule 62 (integer -> DECIMALINTEGER .)
    MAKA            reduce using rule 62 (integer -> DECIMALINTEGER .)
    BAISA           reduce using rule 62 (integer -> DECIMALINTEGER .)
    COLON           reduce using rule 62 (integer -> DECIMALINTEGER .)
    BHAE            reduce using rule 62 (integer -> DECIMALINTEGER .)
    PATHAU          reduce using rule 62 (integer -> DECIMALINTEGER .)
    CHOTI           reduce using rule 62 (integer -> DECIMALINTEGER .)
    LEKHA           reduce using rule 62 (integer -> DECIMALINTEGER .)
    LEU             reduce using rule 62 (integer -> DECIMALINTEGER .)
    COMMA           reduce using rule 62 (integer -> DECIMALINTEGER .)
    RPARA           reduce using rule 62 (integer -> DECIMALINTEGER .)
    DEKHI           reduce using rule 62 (integer -> DECIMALINTEGER .)


state 3

    (61) expr -> reference .
    (70) reference -> reference . DOT identifier
    (71) reference -> reference . DOT functioncall

    PLUS            reduce using rule 61 (expr -> reference .)
    MINUS           reduce using rule 61 (expr -> reference .)
    TIMES           reduce using rule 61 (expr -> reference .)
    DIVIDE          reduce using rule 61 (expr -> reference .)
    MODULUS         reduce using rule 61 (expr -> reference .)
    POWER           reduce using rule 61 (expr -> reference .)
    GT              reduce using rule 61 (expr -> reference .)
    LT              reduce using rule 61 (expr -> reference .)
    GE              reduce using rule 61 (expr -> reference .)
    LE              reduce using rule 61 (expr -> reference .)
    EQ              reduce using rule 61 (expr -> reference .)
    NE              reduce using rule 61 (expr -> reference .)
    RA              reduce using rule 61 (expr -> reference .)
    WA              reduce using rule 61 (expr -> reference .)
    CHHA            reduce using rule 61 (expr -> reference .)
    CHHAINA         reduce using rule 61 (expr -> reference .)
    RPARA           reduce using rule 61 (expr -> reference .)
    COMMA           reduce using rule 61 (expr -> reference .)
    PATHAU          reduce using rule 61 (expr -> reference .)
    CHOTI           reduce using rule 61 (expr -> reference .)
    NEWLINE         reduce using rule 61 (expr -> reference .)
    $end            reduce using rule 61 (expr -> reference .)
    LEKHA           reduce using rule 61 (expr -> reference .)
    LEU             reduce using rule 61 (expr -> reference .)
    BHAE            reduce using rule 61 (expr -> reference .)
    KAKHA           reduce using rule 61 (expr -> reference .)
    TICHO           reduce using rule 61 (expr -> reference .)
    DIYE            reduce using rule 61 (expr -> reference .)
    ATHAWA          reduce using rule 61 (expr -> reference .)
    BAJA            reduce using rule 61 (expr -> reference .)
    MAKA            reduce using rule 61 (expr -> reference .)
    BAISA           reduce using rule 61 (expr -> reference .)
    DEKHI           reduce using rule 61 (expr -> reference .)
    COLON           reduce using rule 61 (expr -> reference .)
    DOT             shift and go to state 43


state 4

    (24) slif -> YEDI . expr BHAE slstmt ATHAWA slstmt
    (25) slif -> YEDI . expr BHAE slstmt
    (32) mlif -> YEDI . expr BHAE NEWLINE program DIYE
    (33) mlif -> YEDI . expr BHAE NEWLINE program optelse DIYE
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    reference                      shift and go to state 3
    expr                           shift and go to state 45
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7
    string                         shift and go to state 35

state 5

    (59) expr -> imaginary .

    PLUS            reduce using rule 59 (expr -> imaginary .)
    MINUS           reduce using rule 59 (expr -> imaginary .)
    TIMES           reduce using rule 59 (expr -> imaginary .)
    DIVIDE          reduce using rule 59 (expr -> imaginary .)
    MODULUS         reduce using rule 59 (expr -> imaginary .)
    POWER           reduce using rule 59 (expr -> imaginary .)
    GT              reduce using rule 59 (expr -> imaginary .)
    LT              reduce using rule 59 (expr -> imaginary .)
    GE              reduce using rule 59 (expr -> imaginary .)
    LE              reduce using rule 59 (expr -> imaginary .)
    EQ              reduce using rule 59 (expr -> imaginary .)
    NE              reduce using rule 59 (expr -> imaginary .)
    RA              reduce using rule 59 (expr -> imaginary .)
    WA              reduce using rule 59 (expr -> imaginary .)
    CHHA            reduce using rule 59 (expr -> imaginary .)
    CHHAINA         reduce using rule 59 (expr -> imaginary .)
    RPARA           reduce using rule 59 (expr -> imaginary .)
    COMMA           reduce using rule 59 (expr -> imaginary .)
    PATHAU          reduce using rule 59 (expr -> imaginary .)
    CHOTI           reduce using rule 59 (expr -> imaginary .)
    NEWLINE         reduce using rule 59 (expr -> imaginary .)
    $end            reduce using rule 59 (expr -> imaginary .)
    LEKHA           reduce using rule 59 (expr -> imaginary .)
    LEU             reduce using rule 59 (expr -> imaginary .)
    BHAE            reduce using rule 59 (expr -> imaginary .)
    KAKHA           reduce using rule 59 (expr -> imaginary .)
    TICHO           reduce using rule 59 (expr -> imaginary .)
    DIYE            reduce using rule 59 (expr -> imaginary .)
    ATHAWA          reduce using rule 59 (expr -> imaginary .)
    BAJA            reduce using rule 59 (expr -> imaginary .)
    MAKA            reduce using rule 59 (expr -> imaginary .)
    BAISA           reduce using rule 59 (expr -> imaginary .)
    DEKHI           reduce using rule 59 (expr -> imaginary .)
    COLON           reduce using rule 59 (expr -> imaginary .)


state 6

    (56) expr -> LPARA . expr RPARA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 46
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 7

    (68) reference -> identifier .

    DOT             reduce using rule 68 (reference -> identifier .)
    PLUS            reduce using rule 68 (reference -> identifier .)
    MINUS           reduce using rule 68 (reference -> identifier .)
    TIMES           reduce using rule 68 (reference -> identifier .)
    DIVIDE          reduce using rule 68 (reference -> identifier .)
    MODULUS         reduce using rule 68 (reference -> identifier .)
    POWER           reduce using rule 68 (reference -> identifier .)
    GT              reduce using rule 68 (reference -> identifier .)
    LT              reduce using rule 68 (reference -> identifier .)
    GE              reduce using rule 68 (reference -> identifier .)
    LE              reduce using rule 68 (reference -> identifier .)
    EQ              reduce using rule 68 (reference -> identifier .)
    NE              reduce using rule 68 (reference -> identifier .)
    RA              reduce using rule 68 (reference -> identifier .)
    WA              reduce using rule 68 (reference -> identifier .)
    CHHA            reduce using rule 68 (reference -> identifier .)
    CHHAINA         reduce using rule 68 (reference -> identifier .)
    LEKHA           reduce using rule 68 (reference -> identifier .)
    LEU             reduce using rule 68 (reference -> identifier .)
    COMMA           reduce using rule 68 (reference -> identifier .)
    RPARA           reduce using rule 68 (reference -> identifier .)
    DEKHI           reduce using rule 68 (reference -> identifier .)
    PATHAU          reduce using rule 68 (reference -> identifier .)
    CHOTI           reduce using rule 68 (reference -> identifier .)
    BAJA            reduce using rule 68 (reference -> identifier .)
    NEWLINE         reduce using rule 68 (reference -> identifier .)
    $end            reduce using rule 68 (reference -> identifier .)
    BHAE            reduce using rule 68 (reference -> identifier .)
    KAKHA           reduce using rule 68 (reference -> identifier .)
    TICHO           reduce using rule 68 (reference -> identifier .)
    DIYE            reduce using rule 68 (reference -> identifier .)
    ATHAWA          reduce using rule 68 (reference -> identifier .)
    MAKA            reduce using rule 68 (reference -> identifier .)
    BAISA           reduce using rule 68 (reference -> identifier .)
    COLON           reduce using rule 68 (reference -> identifier .)


state 8

    (12) slstmt -> incremental .

    NEWLINE         reduce using rule 12 (slstmt -> incremental .)
    $end            reduce using rule 12 (slstmt -> incremental .)
    KAKHA           reduce using rule 12 (slstmt -> incremental .)
    TICHO           reduce using rule 12 (slstmt -> incremental .)
    DIYE            reduce using rule 12 (slstmt -> incremental .)
    ATHAWA          reduce using rule 12 (slstmt -> incremental .)
    BAJA            reduce using rule 12 (slstmt -> incremental .)
    MAKA            reduce using rule 12 (slstmt -> incremental .)
    BAISA           reduce using rule 12 (slstmt -> incremental .)


state 9

    (39) whileloop -> JABA . SAMMA expr NEWLINE program BAJA

    SAMMA           shift and go to state 47


state 10

    (74) expr -> MINUS . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 48
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 11

    (27) mlstmt -> forloop .

    NEWLINE         reduce using rule 27 (mlstmt -> forloop .)
    $end            reduce using rule 27 (mlstmt -> forloop .)
    KAKHA           reduce using rule 27 (mlstmt -> forloop .)
    TICHO           reduce using rule 27 (mlstmt -> forloop .)
    DIYE            reduce using rule 27 (mlstmt -> forloop .)
    ATHAWA          reduce using rule 27 (mlstmt -> forloop .)
    BAJA            reduce using rule 27 (mlstmt -> forloop .)
    MAKA            reduce using rule 27 (mlstmt -> forloop .)
    BAISA           reduce using rule 27 (mlstmt -> forloop .)


state 12

    (63) integer -> OCTALINTEGER .

    PLUS            reduce using rule 63 (integer -> OCTALINTEGER .)
    MINUS           reduce using rule 63 (integer -> OCTALINTEGER .)
    TIMES           reduce using rule 63 (integer -> OCTALINTEGER .)
    DIVIDE          reduce using rule 63 (integer -> OCTALINTEGER .)
    MODULUS         reduce using rule 63 (integer -> OCTALINTEGER .)
    POWER           reduce using rule 63 (integer -> OCTALINTEGER .)
    GT              reduce using rule 63 (integer -> OCTALINTEGER .)
    LT              reduce using rule 63 (integer -> OCTALINTEGER .)
    GE              reduce using rule 63 (integer -> OCTALINTEGER .)
    LE              reduce using rule 63 (integer -> OCTALINTEGER .)
    EQ              reduce using rule 63 (integer -> OCTALINTEGER .)
    NE              reduce using rule 63 (integer -> OCTALINTEGER .)
    RA              reduce using rule 63 (integer -> OCTALINTEGER .)
    WA              reduce using rule 63 (integer -> OCTALINTEGER .)
    CHHA            reduce using rule 63 (integer -> OCTALINTEGER .)
    CHHAINA         reduce using rule 63 (integer -> OCTALINTEGER .)
    NEWLINE         reduce using rule 63 (integer -> OCTALINTEGER .)
    $end            reduce using rule 63 (integer -> OCTALINTEGER .)
    KAKHA           reduce using rule 63 (integer -> OCTALINTEGER .)
    TICHO           reduce using rule 63 (integer -> OCTALINTEGER .)
    DIYE            reduce using rule 63 (integer -> OCTALINTEGER .)
    ATHAWA          reduce using rule 63 (integer -> OCTALINTEGER .)
    BAJA            reduce using rule 63 (integer -> OCTALINTEGER .)
    MAKA            reduce using rule 63 (integer -> OCTALINTEGER .)
    BAISA           reduce using rule 63 (integer -> OCTALINTEGER .)
    COLON           reduce using rule 63 (integer -> OCTALINTEGER .)
    BHAE            reduce using rule 63 (integer -> OCTALINTEGER .)
    PATHAU          reduce using rule 63 (integer -> OCTALINTEGER .)
    CHOTI           reduce using rule 63 (integer -> OCTALINTEGER .)
    LEKHA           reduce using rule 63 (integer -> OCTALINTEGER .)
    LEU             reduce using rule 63 (integer -> OCTALINTEGER .)
    COMMA           reduce using rule 63 (integer -> OCTALINTEGER .)
    RPARA           reduce using rule 63 (integer -> OCTALINTEGER .)
    DEKHI           reduce using rule 63 (integer -> OCTALINTEGER .)


state 13

    (41) function -> KAAM . IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA

    IDENTIFIER      shift and go to state 49


state 14

    (37) forloop -> SABAI . IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> SABAI . IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA

    IDENTIFIER      shift and go to state 50


state 15

    (1) begin -> program .
    (2) program -> program . NEWLINE stmt

    $end            reduce using rule 1 (begin -> program .)
    NEWLINE         shift and go to state 51


state 16

    (9) slstmt -> print .

    NEWLINE         reduce using rule 9 (slstmt -> print .)
    $end            reduce using rule 9 (slstmt -> print .)
    KAKHA           reduce using rule 9 (slstmt -> print .)
    TICHO           reduce using rule 9 (slstmt -> print .)
    DIYE            reduce using rule 9 (slstmt -> print .)
    ATHAWA          reduce using rule 9 (slstmt -> print .)
    BAJA            reduce using rule 9 (slstmt -> print .)
    MAKA            reduce using rule 9 (slstmt -> print .)
    BAISA           reduce using rule 9 (slstmt -> print .)


state 17

    (10) slstmt -> input .

    NEWLINE         reduce using rule 10 (slstmt -> input .)
    $end            reduce using rule 10 (slstmt -> input .)
    KAKHA           reduce using rule 10 (slstmt -> input .)
    TICHO           reduce using rule 10 (slstmt -> input .)
    DIYE            reduce using rule 10 (slstmt -> input .)
    ATHAWA          reduce using rule 10 (slstmt -> input .)
    BAJA            reduce using rule 10 (slstmt -> input .)
    MAKA            reduce using rule 10 (slstmt -> input .)
    BAISA           reduce using rule 10 (slstmt -> input .)


state 18

    (67) string -> STRING .

    PLUS            reduce using rule 67 (string -> STRING .)
    MINUS           reduce using rule 67 (string -> STRING .)
    TIMES           reduce using rule 67 (string -> STRING .)
    DIVIDE          reduce using rule 67 (string -> STRING .)
    MODULUS         reduce using rule 67 (string -> STRING .)
    POWER           reduce using rule 67 (string -> STRING .)
    GT              reduce using rule 67 (string -> STRING .)
    LT              reduce using rule 67 (string -> STRING .)
    GE              reduce using rule 67 (string -> STRING .)
    LE              reduce using rule 67 (string -> STRING .)
    EQ              reduce using rule 67 (string -> STRING .)
    NE              reduce using rule 67 (string -> STRING .)
    RA              reduce using rule 67 (string -> STRING .)
    WA              reduce using rule 67 (string -> STRING .)
    CHHA            reduce using rule 67 (string -> STRING .)
    CHHAINA         reduce using rule 67 (string -> STRING .)
    PATHAU          reduce using rule 67 (string -> STRING .)
    CHOTI           reduce using rule 67 (string -> STRING .)
    NEWLINE         reduce using rule 67 (string -> STRING .)
    $end            reduce using rule 67 (string -> STRING .)
    LEKHA           reduce using rule 67 (string -> STRING .)
    LEU             reduce using rule 67 (string -> STRING .)
    COMMA           reduce using rule 67 (string -> STRING .)
    BHAE            reduce using rule 67 (string -> STRING .)
    RPARA           reduce using rule 67 (string -> STRING .)
    KAKHA           reduce using rule 67 (string -> STRING .)
    TICHO           reduce using rule 67 (string -> STRING .)
    DIYE            reduce using rule 67 (string -> STRING .)
    ATHAWA          reduce using rule 67 (string -> STRING .)
    BAJA            reduce using rule 67 (string -> STRING .)
    MAKA            reduce using rule 67 (string -> STRING .)
    BAISA           reduce using rule 67 (string -> STRING .)
    DEKHI           reduce using rule 67 (string -> STRING .)
    COLON           reduce using rule 67 (string -> STRING .)


state 19

    (15) assignment -> IDENTIFIER . ASSIGNMENT expr
    (19) incremental -> IDENTIFIER . AI expr
    (20) incremental -> IDENTIFIER . SI expr
    (21) incremental -> IDENTIFIER . MI expr
    (22) incremental -> IDENTIFIER . DI expr
    (72) identifier -> IDENTIFIER .
    (73) functioncall -> IDENTIFIER . LPARA variableExpr RPARA

    ASSIGNMENT      shift and go to state 54
    AI              shift and go to state 53
    SI              shift and go to state 57
    MI              shift and go to state 56
    DI              shift and go to state 52
    DOT             reduce using rule 72 (identifier -> IDENTIFIER .)
    PATHAU          reduce using rule 72 (identifier -> IDENTIFIER .)
    CHOTI           reduce using rule 72 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 72 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 72 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 72 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 72 (identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 72 (identifier -> IDENTIFIER .)
    POWER           reduce using rule 72 (identifier -> IDENTIFIER .)
    GT              reduce using rule 72 (identifier -> IDENTIFIER .)
    LT              reduce using rule 72 (identifier -> IDENTIFIER .)
    GE              reduce using rule 72 (identifier -> IDENTIFIER .)
    LE              reduce using rule 72 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 72 (identifier -> IDENTIFIER .)
    NE              reduce using rule 72 (identifier -> IDENTIFIER .)
    RA              reduce using rule 72 (identifier -> IDENTIFIER .)
    WA              reduce using rule 72 (identifier -> IDENTIFIER .)
    CHHA            reduce using rule 72 (identifier -> IDENTIFIER .)
    CHHAINA         reduce using rule 72 (identifier -> IDENTIFIER .)
    BAJA            reduce using rule 72 (identifier -> IDENTIFIER .)
    NEWLINE         reduce using rule 72 (identifier -> IDENTIFIER .)
    LEKHA           reduce using rule 72 (identifier -> IDENTIFIER .)
    LEU             reduce using rule 72 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 72 (identifier -> IDENTIFIER .)
    $end            reduce using rule 72 (identifier -> IDENTIFIER .)
    KAKHA           reduce using rule 72 (identifier -> IDENTIFIER .)
    TICHO           reduce using rule 72 (identifier -> IDENTIFIER .)
    DIYE            reduce using rule 72 (identifier -> IDENTIFIER .)
    ATHAWA          reduce using rule 72 (identifier -> IDENTIFIER .)
    MAKA            reduce using rule 72 (identifier -> IDENTIFIER .)
    BAISA           reduce using rule 72 (identifier -> IDENTIFIER .)
    LPARA           shift and go to state 55


state 20

    (4) stmt -> empty .
    (45) variableExpr -> empty .

    NEWLINE         reduce using rule 4 (stmt -> empty .)
    DIYE            reduce using rule 4 (stmt -> empty .)
    BAISA           reduce using rule 4 (stmt -> empty .)
    ATHAWA          reduce using rule 4 (stmt -> empty .)
    TICHO           reduce using rule 4 (stmt -> empty .)
    $end            reduce using rule 4 (stmt -> empty .)
    KAKHA           reduce using rule 4 (stmt -> empty .)
    BAJA            reduce using rule 4 (stmt -> empty .)
    MAKA            reduce using rule 4 (stmt -> empty .)
    LEKHA           reduce using rule 45 (variableExpr -> empty .)
    LEU             reduce using rule 45 (variableExpr -> empty .)
    COMMA           reduce using rule 45 (variableExpr -> empty .)


state 21

    (30) mlstmt -> function .

    NEWLINE         reduce using rule 30 (mlstmt -> function .)
    $end            reduce using rule 30 (mlstmt -> function .)
    KAKHA           reduce using rule 30 (mlstmt -> function .)
    TICHO           reduce using rule 30 (mlstmt -> function .)
    DIYE            reduce using rule 30 (mlstmt -> function .)
    ATHAWA          reduce using rule 30 (mlstmt -> function .)
    BAJA            reduce using rule 30 (mlstmt -> function .)
    MAKA            reduce using rule 30 (mlstmt -> function .)
    BAISA           reduce using rule 30 (mlstmt -> function .)


state 22

    (28) mlstmt -> whileloop .

    NEWLINE         reduce using rule 28 (mlstmt -> whileloop .)
    $end            reduce using rule 28 (mlstmt -> whileloop .)
    KAKHA           reduce using rule 28 (mlstmt -> whileloop .)
    TICHO           reduce using rule 28 (mlstmt -> whileloop .)
    DIYE            reduce using rule 28 (mlstmt -> whileloop .)
    ATHAWA          reduce using rule 28 (mlstmt -> whileloop .)
    BAJA            reduce using rule 28 (mlstmt -> whileloop .)
    MAKA            reduce using rule 28 (mlstmt -> whileloop .)
    BAISA           reduce using rule 28 (mlstmt -> whileloop .)


state 23

    (0) S' -> begin .



state 24

    (58) expr -> float .

    PLUS            reduce using rule 58 (expr -> float .)
    MINUS           reduce using rule 58 (expr -> float .)
    TIMES           reduce using rule 58 (expr -> float .)
    DIVIDE          reduce using rule 58 (expr -> float .)
    MODULUS         reduce using rule 58 (expr -> float .)
    POWER           reduce using rule 58 (expr -> float .)
    GT              reduce using rule 58 (expr -> float .)
    LT              reduce using rule 58 (expr -> float .)
    GE              reduce using rule 58 (expr -> float .)
    LE              reduce using rule 58 (expr -> float .)
    EQ              reduce using rule 58 (expr -> float .)
    NE              reduce using rule 58 (expr -> float .)
    RA              reduce using rule 58 (expr -> float .)
    WA              reduce using rule 58 (expr -> float .)
    CHHA            reduce using rule 58 (expr -> float .)
    CHHAINA         reduce using rule 58 (expr -> float .)
    RPARA           reduce using rule 58 (expr -> float .)
    COMMA           reduce using rule 58 (expr -> float .)
    PATHAU          reduce using rule 58 (expr -> float .)
    CHOTI           reduce using rule 58 (expr -> float .)
    NEWLINE         reduce using rule 58 (expr -> float .)
    $end            reduce using rule 58 (expr -> float .)
    LEKHA           reduce using rule 58 (expr -> float .)
    LEU             reduce using rule 58 (expr -> float .)
    BHAE            reduce using rule 58 (expr -> float .)
    KAKHA           reduce using rule 58 (expr -> float .)
    TICHO           reduce using rule 58 (expr -> float .)
    DIYE            reduce using rule 58 (expr -> float .)
    ATHAWA          reduce using rule 58 (expr -> float .)
    BAJA            reduce using rule 58 (expr -> float .)
    MAKA            reduce using rule 58 (expr -> float .)
    BAISA           reduce using rule 58 (expr -> float .)
    DEKHI           reduce using rule 58 (expr -> float .)
    COLON           reduce using rule 58 (expr -> float .)


state 25

    (13) slstmt -> return .

    NEWLINE         reduce using rule 13 (slstmt -> return .)
    $end            reduce using rule 13 (slstmt -> return .)
    KAKHA           reduce using rule 13 (slstmt -> return .)
    TICHO           reduce using rule 13 (slstmt -> return .)
    DIYE            reduce using rule 13 (slstmt -> return .)
    ATHAWA          reduce using rule 13 (slstmt -> return .)
    BAJA            reduce using rule 13 (slstmt -> return .)
    MAKA            reduce using rule 13 (slstmt -> return .)
    BAISA           reduce using rule 13 (slstmt -> return .)


state 26

    (5) stmt -> slstmt .

    NEWLINE         reduce using rule 5 (stmt -> slstmt .)
    DIYE            reduce using rule 5 (stmt -> slstmt .)
    BAISA           reduce using rule 5 (stmt -> slstmt .)
    ATHAWA          reduce using rule 5 (stmt -> slstmt .)
    TICHO           reduce using rule 5 (stmt -> slstmt .)
    $end            reduce using rule 5 (stmt -> slstmt .)
    KAKHA           reduce using rule 5 (stmt -> slstmt .)
    BAJA            reduce using rule 5 (stmt -> slstmt .)
    MAKA            reduce using rule 5 (stmt -> slstmt .)


state 27

    (66) imaginary -> IMAGNUMBER .

    PLUS            reduce using rule 66 (imaginary -> IMAGNUMBER .)
    MINUS           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    TIMES           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    DIVIDE          reduce using rule 66 (imaginary -> IMAGNUMBER .)
    MODULUS         reduce using rule 66 (imaginary -> IMAGNUMBER .)
    POWER           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    GT              reduce using rule 66 (imaginary -> IMAGNUMBER .)
    LT              reduce using rule 66 (imaginary -> IMAGNUMBER .)
    GE              reduce using rule 66 (imaginary -> IMAGNUMBER .)
    LE              reduce using rule 66 (imaginary -> IMAGNUMBER .)
    EQ              reduce using rule 66 (imaginary -> IMAGNUMBER .)
    NE              reduce using rule 66 (imaginary -> IMAGNUMBER .)
    RA              reduce using rule 66 (imaginary -> IMAGNUMBER .)
    WA              reduce using rule 66 (imaginary -> IMAGNUMBER .)
    CHHA            reduce using rule 66 (imaginary -> IMAGNUMBER .)
    CHHAINA         reduce using rule 66 (imaginary -> IMAGNUMBER .)
    PATHAU          reduce using rule 66 (imaginary -> IMAGNUMBER .)
    CHOTI           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    NEWLINE         reduce using rule 66 (imaginary -> IMAGNUMBER .)
    $end            reduce using rule 66 (imaginary -> IMAGNUMBER .)
    LEKHA           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    LEU             reduce using rule 66 (imaginary -> IMAGNUMBER .)
    COMMA           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    BHAE            reduce using rule 66 (imaginary -> IMAGNUMBER .)
    RPARA           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    KAKHA           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    TICHO           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    DIYE            reduce using rule 66 (imaginary -> IMAGNUMBER .)
    ATHAWA          reduce using rule 66 (imaginary -> IMAGNUMBER .)
    BAJA            reduce using rule 66 (imaginary -> IMAGNUMBER .)
    MAKA            reduce using rule 66 (imaginary -> IMAGNUMBER .)
    BAISA           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    DEKHI           reduce using rule 66 (imaginary -> IMAGNUMBER .)
    COLON           reduce using rule 66 (imaginary -> IMAGNUMBER .)


state 28

    (8) slstmt -> assignment .

    NEWLINE         reduce using rule 8 (slstmt -> assignment .)
    $end            reduce using rule 8 (slstmt -> assignment .)
    KAKHA           reduce using rule 8 (slstmt -> assignment .)
    TICHO           reduce using rule 8 (slstmt -> assignment .)
    DIYE            reduce using rule 8 (slstmt -> assignment .)
    ATHAWA          reduce using rule 8 (slstmt -> assignment .)
    BAJA            reduce using rule 8 (slstmt -> assignment .)
    MAKA            reduce using rule 8 (slstmt -> assignment .)
    BAISA           reduce using rule 8 (slstmt -> assignment .)


state 29

    (29) mlstmt -> repeatloop .

    NEWLINE         reduce using rule 29 (mlstmt -> repeatloop .)
    $end            reduce using rule 29 (mlstmt -> repeatloop .)
    KAKHA           reduce using rule 29 (mlstmt -> repeatloop .)
    TICHO           reduce using rule 29 (mlstmt -> repeatloop .)
    DIYE            reduce using rule 29 (mlstmt -> repeatloop .)
    ATHAWA          reduce using rule 29 (mlstmt -> repeatloop .)
    BAJA            reduce using rule 29 (mlstmt -> repeatloop .)
    MAKA            reduce using rule 29 (mlstmt -> repeatloop .)
    BAISA           reduce using rule 29 (mlstmt -> repeatloop .)


state 30

    (3) program -> stmt .

    MAKA            reduce using rule 3 (program -> stmt .)
    NEWLINE         reduce using rule 3 (program -> stmt .)
    BAJA            reduce using rule 3 (program -> stmt .)
    DIYE            reduce using rule 3 (program -> stmt .)
    ATHAWA          reduce using rule 3 (program -> stmt .)
    TICHO           reduce using rule 3 (program -> stmt .)
    KAKHA           reduce using rule 3 (program -> stmt .)
    BAISA           reduce using rule 3 (program -> stmt .)
    $end            reduce using rule 3 (program -> stmt .)


state 31

    (42) class -> KHAKA . IDENTIFIER NEWLINE program KAKHA

    IDENTIFIER      shift and go to state 58


state 32

    (57) expr -> integer .

    PLUS            reduce using rule 57 (expr -> integer .)
    MINUS           reduce using rule 57 (expr -> integer .)
    TIMES           reduce using rule 57 (expr -> integer .)
    DIVIDE          reduce using rule 57 (expr -> integer .)
    MODULUS         reduce using rule 57 (expr -> integer .)
    POWER           reduce using rule 57 (expr -> integer .)
    GT              reduce using rule 57 (expr -> integer .)
    LT              reduce using rule 57 (expr -> integer .)
    GE              reduce using rule 57 (expr -> integer .)
    LE              reduce using rule 57 (expr -> integer .)
    EQ              reduce using rule 57 (expr -> integer .)
    NE              reduce using rule 57 (expr -> integer .)
    RA              reduce using rule 57 (expr -> integer .)
    WA              reduce using rule 57 (expr -> integer .)
    CHHA            reduce using rule 57 (expr -> integer .)
    CHHAINA         reduce using rule 57 (expr -> integer .)
    RPARA           reduce using rule 57 (expr -> integer .)
    COMMA           reduce using rule 57 (expr -> integer .)
    PATHAU          reduce using rule 57 (expr -> integer .)
    CHOTI           reduce using rule 57 (expr -> integer .)
    NEWLINE         reduce using rule 57 (expr -> integer .)
    $end            reduce using rule 57 (expr -> integer .)
    LEKHA           reduce using rule 57 (expr -> integer .)
    LEU             reduce using rule 57 (expr -> integer .)
    BHAE            reduce using rule 57 (expr -> integer .)
    KAKHA           reduce using rule 57 (expr -> integer .)
    TICHO           reduce using rule 57 (expr -> integer .)
    DIYE            reduce using rule 57 (expr -> integer .)
    ATHAWA          reduce using rule 57 (expr -> integer .)
    BAJA            reduce using rule 57 (expr -> integer .)
    MAKA            reduce using rule 57 (expr -> integer .)
    BAISA           reduce using rule 57 (expr -> integer .)
    DEKHI           reduce using rule 57 (expr -> integer .)
    COLON           reduce using rule 57 (expr -> integer .)


state 33

    (26) mlstmt -> mlif .

    NEWLINE         reduce using rule 26 (mlstmt -> mlif .)
    $end            reduce using rule 26 (mlstmt -> mlif .)
    KAKHA           reduce using rule 26 (mlstmt -> mlif .)
    TICHO           reduce using rule 26 (mlstmt -> mlif .)
    DIYE            reduce using rule 26 (mlstmt -> mlif .)
    ATHAWA          reduce using rule 26 (mlstmt -> mlif .)
    BAJA            reduce using rule 26 (mlstmt -> mlif .)
    MAKA            reduce using rule 26 (mlstmt -> mlif .)
    BAISA           reduce using rule 26 (mlstmt -> mlif .)


state 34

    (31) mlstmt -> class .

    NEWLINE         reduce using rule 31 (mlstmt -> class .)
    $end            reduce using rule 31 (mlstmt -> class .)
    KAKHA           reduce using rule 31 (mlstmt -> class .)
    TICHO           reduce using rule 31 (mlstmt -> class .)
    DIYE            reduce using rule 31 (mlstmt -> class .)
    ATHAWA          reduce using rule 31 (mlstmt -> class .)
    BAJA            reduce using rule 31 (mlstmt -> class .)
    MAKA            reduce using rule 31 (mlstmt -> class .)
    BAISA           reduce using rule 31 (mlstmt -> class .)


state 35

    (60) expr -> string .

    PLUS            reduce using rule 60 (expr -> string .)
    MINUS           reduce using rule 60 (expr -> string .)
    TIMES           reduce using rule 60 (expr -> string .)
    DIVIDE          reduce using rule 60 (expr -> string .)
    MODULUS         reduce using rule 60 (expr -> string .)
    POWER           reduce using rule 60 (expr -> string .)
    GT              reduce using rule 60 (expr -> string .)
    LT              reduce using rule 60 (expr -> string .)
    GE              reduce using rule 60 (expr -> string .)
    LE              reduce using rule 60 (expr -> string .)
    EQ              reduce using rule 60 (expr -> string .)
    NE              reduce using rule 60 (expr -> string .)
    RA              reduce using rule 60 (expr -> string .)
    WA              reduce using rule 60 (expr -> string .)
    CHHA            reduce using rule 60 (expr -> string .)
    CHHAINA         reduce using rule 60 (expr -> string .)
    RPARA           reduce using rule 60 (expr -> string .)
    COMMA           reduce using rule 60 (expr -> string .)
    PATHAU          reduce using rule 60 (expr -> string .)
    CHOTI           reduce using rule 60 (expr -> string .)
    NEWLINE         reduce using rule 60 (expr -> string .)
    $end            reduce using rule 60 (expr -> string .)
    LEKHA           reduce using rule 60 (expr -> string .)
    LEU             reduce using rule 60 (expr -> string .)
    BHAE            reduce using rule 60 (expr -> string .)
    KAKHA           reduce using rule 60 (expr -> string .)
    TICHO           reduce using rule 60 (expr -> string .)
    DIYE            reduce using rule 60 (expr -> string .)
    ATHAWA          reduce using rule 60 (expr -> string .)
    BAJA            reduce using rule 60 (expr -> string .)
    MAKA            reduce using rule 60 (expr -> string .)
    BAISA           reduce using rule 60 (expr -> string .)
    DEKHI           reduce using rule 60 (expr -> string .)
    COLON           reduce using rule 60 (expr -> string .)


state 36

    (64) integer -> HEXAINTEGER .

    PLUS            reduce using rule 64 (integer -> HEXAINTEGER .)
    MINUS           reduce using rule 64 (integer -> HEXAINTEGER .)
    TIMES           reduce using rule 64 (integer -> HEXAINTEGER .)
    DIVIDE          reduce using rule 64 (integer -> HEXAINTEGER .)
    MODULUS         reduce using rule 64 (integer -> HEXAINTEGER .)
    POWER           reduce using rule 64 (integer -> HEXAINTEGER .)
    GT              reduce using rule 64 (integer -> HEXAINTEGER .)
    LT              reduce using rule 64 (integer -> HEXAINTEGER .)
    GE              reduce using rule 64 (integer -> HEXAINTEGER .)
    LE              reduce using rule 64 (integer -> HEXAINTEGER .)
    EQ              reduce using rule 64 (integer -> HEXAINTEGER .)
    NE              reduce using rule 64 (integer -> HEXAINTEGER .)
    RA              reduce using rule 64 (integer -> HEXAINTEGER .)
    WA              reduce using rule 64 (integer -> HEXAINTEGER .)
    CHHA            reduce using rule 64 (integer -> HEXAINTEGER .)
    CHHAINA         reduce using rule 64 (integer -> HEXAINTEGER .)
    NEWLINE         reduce using rule 64 (integer -> HEXAINTEGER .)
    $end            reduce using rule 64 (integer -> HEXAINTEGER .)
    KAKHA           reduce using rule 64 (integer -> HEXAINTEGER .)
    TICHO           reduce using rule 64 (integer -> HEXAINTEGER .)
    DIYE            reduce using rule 64 (integer -> HEXAINTEGER .)
    ATHAWA          reduce using rule 64 (integer -> HEXAINTEGER .)
    BAJA            reduce using rule 64 (integer -> HEXAINTEGER .)
    MAKA            reduce using rule 64 (integer -> HEXAINTEGER .)
    BAISA           reduce using rule 64 (integer -> HEXAINTEGER .)
    COLON           reduce using rule 64 (integer -> HEXAINTEGER .)
    BHAE            reduce using rule 64 (integer -> HEXAINTEGER .)
    PATHAU          reduce using rule 64 (integer -> HEXAINTEGER .)
    CHOTI           reduce using rule 64 (integer -> HEXAINTEGER .)
    LEKHA           reduce using rule 64 (integer -> HEXAINTEGER .)
    LEU             reduce using rule 64 (integer -> HEXAINTEGER .)
    COMMA           reduce using rule 64 (integer -> HEXAINTEGER .)
    RPARA           reduce using rule 64 (integer -> HEXAINTEGER .)
    DEKHI           reduce using rule 64 (integer -> HEXAINTEGER .)


state 37

    (14) expression -> expr .
    (23) return -> expr . PATHAU
    (40) repeatloop -> expr . CHOTI NEWLINE program TICHO
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA
    (44) variableExpr -> expr .

    NEWLINE         reduce using rule 14 (expression -> expr .)
    $end            reduce using rule 14 (expression -> expr .)
    DIYE            reduce using rule 14 (expression -> expr .)
    ATHAWA          reduce using rule 14 (expression -> expr .)
    BAISA           reduce using rule 14 (expression -> expr .)
    BAJA            reduce using rule 14 (expression -> expr .)
    KAKHA           reduce using rule 14 (expression -> expr .)
    TICHO           reduce using rule 14 (expression -> expr .)
    MAKA            reduce using rule 14 (expression -> expr .)
    PATHAU          shift and go to state 72
    CHOTI           shift and go to state 74
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60
    LEKHA           reduce using rule 44 (variableExpr -> expr .)
    LEU             reduce using rule 44 (variableExpr -> expr .)
    COMMA           reduce using rule 44 (variableExpr -> expr .)


state 38

    (65) float -> FLOAT .

    PATHAU          reduce using rule 65 (float -> FLOAT .)
    CHOTI           reduce using rule 65 (float -> FLOAT .)
    PLUS            reduce using rule 65 (float -> FLOAT .)
    MINUS           reduce using rule 65 (float -> FLOAT .)
    TIMES           reduce using rule 65 (float -> FLOAT .)
    DIVIDE          reduce using rule 65 (float -> FLOAT .)
    MODULUS         reduce using rule 65 (float -> FLOAT .)
    POWER           reduce using rule 65 (float -> FLOAT .)
    GT              reduce using rule 65 (float -> FLOAT .)
    LT              reduce using rule 65 (float -> FLOAT .)
    GE              reduce using rule 65 (float -> FLOAT .)
    LE              reduce using rule 65 (float -> FLOAT .)
    EQ              reduce using rule 65 (float -> FLOAT .)
    NE              reduce using rule 65 (float -> FLOAT .)
    RA              reduce using rule 65 (float -> FLOAT .)
    WA              reduce using rule 65 (float -> FLOAT .)
    CHHA            reduce using rule 65 (float -> FLOAT .)
    CHHAINA         reduce using rule 65 (float -> FLOAT .)
    BAISA           reduce using rule 65 (float -> FLOAT .)
    NEWLINE         reduce using rule 65 (float -> FLOAT .)
    LEKHA           reduce using rule 65 (float -> FLOAT .)
    LEU             reduce using rule 65 (float -> FLOAT .)
    COMMA           reduce using rule 65 (float -> FLOAT .)
    TICHO           reduce using rule 65 (float -> FLOAT .)
    $end            reduce using rule 65 (float -> FLOAT .)
    BHAE            reduce using rule 65 (float -> FLOAT .)
    RPARA           reduce using rule 65 (float -> FLOAT .)
    KAKHA           reduce using rule 65 (float -> FLOAT .)
    DIYE            reduce using rule 65 (float -> FLOAT .)
    ATHAWA          reduce using rule 65 (float -> FLOAT .)
    BAJA            reduce using rule 65 (float -> FLOAT .)
    MAKA            reduce using rule 65 (float -> FLOAT .)
    DEKHI           reduce using rule 65 (float -> FLOAT .)
    COLON           reduce using rule 65 (float -> FLOAT .)


state 39

    (16) print -> variableExpr . LEKHA SEMICOLON
    (17) print -> variableExpr . LEKHA
    (18) input -> variableExpr . LEU
    (43) variableExpr -> variableExpr . COMMA expr

    LEKHA           shift and go to state 79
    LEU             shift and go to state 78
    COMMA           shift and go to state 77


state 40

    (6) stmt -> mlstmt .

    NEWLINE         reduce using rule 6 (stmt -> mlstmt .)
    DIYE            reduce using rule 6 (stmt -> mlstmt .)
    BAISA           reduce using rule 6 (stmt -> mlstmt .)
    ATHAWA          reduce using rule 6 (stmt -> mlstmt .)
    TICHO           reduce using rule 6 (stmt -> mlstmt .)
    $end            reduce using rule 6 (stmt -> mlstmt .)
    KAKHA           reduce using rule 6 (stmt -> mlstmt .)
    BAJA            reduce using rule 6 (stmt -> mlstmt .)
    MAKA            reduce using rule 6 (stmt -> mlstmt .)


state 41

    (69) reference -> functioncall .

    DOT             reduce using rule 69 (reference -> functioncall .)
    PLUS            reduce using rule 69 (reference -> functioncall .)
    MINUS           reduce using rule 69 (reference -> functioncall .)
    TIMES           reduce using rule 69 (reference -> functioncall .)
    DIVIDE          reduce using rule 69 (reference -> functioncall .)
    MODULUS         reduce using rule 69 (reference -> functioncall .)
    POWER           reduce using rule 69 (reference -> functioncall .)
    GT              reduce using rule 69 (reference -> functioncall .)
    LT              reduce using rule 69 (reference -> functioncall .)
    GE              reduce using rule 69 (reference -> functioncall .)
    LE              reduce using rule 69 (reference -> functioncall .)
    EQ              reduce using rule 69 (reference -> functioncall .)
    NE              reduce using rule 69 (reference -> functioncall .)
    RA              reduce using rule 69 (reference -> functioncall .)
    WA              reduce using rule 69 (reference -> functioncall .)
    CHHA            reduce using rule 69 (reference -> functioncall .)
    CHHAINA         reduce using rule 69 (reference -> functioncall .)
    LEKHA           reduce using rule 69 (reference -> functioncall .)
    LEU             reduce using rule 69 (reference -> functioncall .)
    COMMA           reduce using rule 69 (reference -> functioncall .)
    RPARA           reduce using rule 69 (reference -> functioncall .)
    DEKHI           reduce using rule 69 (reference -> functioncall .)
    PATHAU          reduce using rule 69 (reference -> functioncall .)
    CHOTI           reduce using rule 69 (reference -> functioncall .)
    BAJA            reduce using rule 69 (reference -> functioncall .)
    NEWLINE         reduce using rule 69 (reference -> functioncall .)
    $end            reduce using rule 69 (reference -> functioncall .)
    BHAE            reduce using rule 69 (reference -> functioncall .)
    KAKHA           reduce using rule 69 (reference -> functioncall .)
    TICHO           reduce using rule 69 (reference -> functioncall .)
    DIYE            reduce using rule 69 (reference -> functioncall .)
    ATHAWA          reduce using rule 69 (reference -> functioncall .)
    MAKA            reduce using rule 69 (reference -> functioncall .)
    BAISA           reduce using rule 69 (reference -> functioncall .)
    COLON           reduce using rule 69 (reference -> functioncall .)


state 42

    (7) slstmt -> expression .

    NEWLINE         reduce using rule 7 (slstmt -> expression .)
    $end            reduce using rule 7 (slstmt -> expression .)
    KAKHA           reduce using rule 7 (slstmt -> expression .)
    TICHO           reduce using rule 7 (slstmt -> expression .)
    DIYE            reduce using rule 7 (slstmt -> expression .)
    ATHAWA          reduce using rule 7 (slstmt -> expression .)
    BAJA            reduce using rule 7 (slstmt -> expression .)
    MAKA            reduce using rule 7 (slstmt -> expression .)
    BAISA           reduce using rule 7 (slstmt -> expression .)


state 43

    (70) reference -> reference DOT . identifier
    (71) reference -> reference DOT . functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 80
    functioncall                   shift and go to state 81

state 44

    (72) identifier -> IDENTIFIER .
    (73) functioncall -> IDENTIFIER . LPARA variableExpr RPARA

    DOT             reduce using rule 72 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 72 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 72 (identifier -> IDENTIFIER .)
    TIMES           reduce using rule 72 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 72 (identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 72 (identifier -> IDENTIFIER .)
    POWER           reduce using rule 72 (identifier -> IDENTIFIER .)
    GT              reduce using rule 72 (identifier -> IDENTIFIER .)
    LT              reduce using rule 72 (identifier -> IDENTIFIER .)
    GE              reduce using rule 72 (identifier -> IDENTIFIER .)
    LE              reduce using rule 72 (identifier -> IDENTIFIER .)
    EQ              reduce using rule 72 (identifier -> IDENTIFIER .)
    NE              reduce using rule 72 (identifier -> IDENTIFIER .)
    RA              reduce using rule 72 (identifier -> IDENTIFIER .)
    WA              reduce using rule 72 (identifier -> IDENTIFIER .)
    CHHA            reduce using rule 72 (identifier -> IDENTIFIER .)
    CHHAINA         reduce using rule 72 (identifier -> IDENTIFIER .)
    PATHAU          reduce using rule 72 (identifier -> IDENTIFIER .)
    CHOTI           reduce using rule 72 (identifier -> IDENTIFIER .)
    NEWLINE         reduce using rule 72 (identifier -> IDENTIFIER .)
    $end            reduce using rule 72 (identifier -> IDENTIFIER .)
    LEKHA           reduce using rule 72 (identifier -> IDENTIFIER .)
    LEU             reduce using rule 72 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 72 (identifier -> IDENTIFIER .)
    BHAE            reduce using rule 72 (identifier -> IDENTIFIER .)
    RPARA           reduce using rule 72 (identifier -> IDENTIFIER .)
    KAKHA           reduce using rule 72 (identifier -> IDENTIFIER .)
    TICHO           reduce using rule 72 (identifier -> IDENTIFIER .)
    DIYE            reduce using rule 72 (identifier -> IDENTIFIER .)
    ATHAWA          reduce using rule 72 (identifier -> IDENTIFIER .)
    BAJA            reduce using rule 72 (identifier -> IDENTIFIER .)
    MAKA            reduce using rule 72 (identifier -> IDENTIFIER .)
    BAISA           reduce using rule 72 (identifier -> IDENTIFIER .)
    DEKHI           reduce using rule 72 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 72 (identifier -> IDENTIFIER .)
    LPARA           shift and go to state 55


state 45

    (24) slif -> YEDI expr . BHAE slstmt ATHAWA slstmt
    (25) slif -> YEDI expr . BHAE slstmt
    (32) mlif -> YEDI expr . BHAE NEWLINE program DIYE
    (33) mlif -> YEDI expr . BHAE NEWLINE program optelse DIYE
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    BHAE            shift and go to state 82
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 46

    (56) expr -> LPARA expr . RPARA
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    RPARA           shift and go to state 83
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 47

    (39) whileloop -> JABA SAMMA . expr NEWLINE program BAJA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 84
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 48

    (74) expr -> MINUS expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    PLUS            reduce using rule 74 (expr -> MINUS expr .)
    MINUS           reduce using rule 74 (expr -> MINUS expr .)
    TIMES           reduce using rule 74 (expr -> MINUS expr .)
    DIVIDE          reduce using rule 74 (expr -> MINUS expr .)
    MODULUS         reduce using rule 74 (expr -> MINUS expr .)
    POWER           reduce using rule 74 (expr -> MINUS expr .)
    GT              reduce using rule 74 (expr -> MINUS expr .)
    LT              reduce using rule 74 (expr -> MINUS expr .)
    GE              reduce using rule 74 (expr -> MINUS expr .)
    LE              reduce using rule 74 (expr -> MINUS expr .)
    EQ              reduce using rule 74 (expr -> MINUS expr .)
    NE              reduce using rule 74 (expr -> MINUS expr .)
    RA              reduce using rule 74 (expr -> MINUS expr .)
    WA              reduce using rule 74 (expr -> MINUS expr .)
    CHHA            reduce using rule 74 (expr -> MINUS expr .)
    CHHAINA         reduce using rule 74 (expr -> MINUS expr .)
    RPARA           reduce using rule 74 (expr -> MINUS expr .)
    COMMA           reduce using rule 74 (expr -> MINUS expr .)
    PATHAU          reduce using rule 74 (expr -> MINUS expr .)
    CHOTI           reduce using rule 74 (expr -> MINUS expr .)
    NEWLINE         reduce using rule 74 (expr -> MINUS expr .)
    $end            reduce using rule 74 (expr -> MINUS expr .)
    LEKHA           reduce using rule 74 (expr -> MINUS expr .)
    LEU             reduce using rule 74 (expr -> MINUS expr .)
    BHAE            reduce using rule 74 (expr -> MINUS expr .)
    KAKHA           reduce using rule 74 (expr -> MINUS expr .)
    TICHO           reduce using rule 74 (expr -> MINUS expr .)
    DIYE            reduce using rule 74 (expr -> MINUS expr .)
    ATHAWA          reduce using rule 74 (expr -> MINUS expr .)
    BAJA            reduce using rule 74 (expr -> MINUS expr .)
    MAKA            reduce using rule 74 (expr -> MINUS expr .)
    BAISA           reduce using rule 74 (expr -> MINUS expr .)
    DEKHI           reduce using rule 74 (expr -> MINUS expr .)
    COLON           reduce using rule 74 (expr -> MINUS expr .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! MODULUS         [ shift and go to state 64 ]
  ! POWER           [ shift and go to state 63 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 49

    (41) function -> KAAM IDENTIFIER . LPARA variableArgs RPARA NEWLINE program MAKA

    LPARA           shift and go to state 85


state 50

    (37) forloop -> SABAI IDENTIFIER . ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> SABAI IDENTIFIER . ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA

    ASSIGNMENT      shift and go to state 86


state 51

    (2) program -> program NEWLINE . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 85 (empty -> .)
    $end            reduce using rule 85 (empty -> .)
    KAKHA           reduce using rule 85 (empty -> .)
    TICHO           reduce using rule 85 (empty -> .)
    DIYE            reduce using rule 85 (empty -> .)
    ATHAWA          reduce using rule 85 (empty -> .)
    BAJA            reduce using rule 85 (empty -> .)
    MAKA            reduce using rule 85 (empty -> .)
    BAISA           reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 87
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 52

    (22) incremental -> IDENTIFIER DI . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 88
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 53

    (19) incremental -> IDENTIFIER AI . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 89
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 54

    (15) assignment -> IDENTIFIER ASSIGNMENT . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 90
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 55

    (73) functioncall -> IDENTIFIER LPARA . variableExpr RPARA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (85) empty -> .
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    RPARA           reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 92
    float                          shift and go to state 24
    variableExpr                   shift and go to state 93
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7
    empty                          shift and go to state 91

state 56

    (21) incremental -> IDENTIFIER MI . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 94
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 57

    (20) incremental -> IDENTIFIER SI . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 95
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 58

    (42) class -> KHAKA IDENTIFIER . NEWLINE program KAKHA

    NEWLINE         shift and go to state 96


state 59

    (82) expr -> expr WA . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 97
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 60

    (84) expr -> expr CHHAINA .

    PLUS            reduce using rule 84 (expr -> expr CHHAINA .)
    MINUS           reduce using rule 84 (expr -> expr CHHAINA .)
    TIMES           reduce using rule 84 (expr -> expr CHHAINA .)
    DIVIDE          reduce using rule 84 (expr -> expr CHHAINA .)
    MODULUS         reduce using rule 84 (expr -> expr CHHAINA .)
    POWER           reduce using rule 84 (expr -> expr CHHAINA .)
    GT              reduce using rule 84 (expr -> expr CHHAINA .)
    LT              reduce using rule 84 (expr -> expr CHHAINA .)
    GE              reduce using rule 84 (expr -> expr CHHAINA .)
    LE              reduce using rule 84 (expr -> expr CHHAINA .)
    EQ              reduce using rule 84 (expr -> expr CHHAINA .)
    NE              reduce using rule 84 (expr -> expr CHHAINA .)
    RA              reduce using rule 84 (expr -> expr CHHAINA .)
    WA              reduce using rule 84 (expr -> expr CHHAINA .)
    CHHA            reduce using rule 84 (expr -> expr CHHAINA .)
    CHHAINA         reduce using rule 84 (expr -> expr CHHAINA .)
    RPARA           reduce using rule 84 (expr -> expr CHHAINA .)
    COMMA           reduce using rule 84 (expr -> expr CHHAINA .)
    PATHAU          reduce using rule 84 (expr -> expr CHHAINA .)
    CHOTI           reduce using rule 84 (expr -> expr CHHAINA .)
    NEWLINE         reduce using rule 84 (expr -> expr CHHAINA .)
    $end            reduce using rule 84 (expr -> expr CHHAINA .)
    LEKHA           reduce using rule 84 (expr -> expr CHHAINA .)
    LEU             reduce using rule 84 (expr -> expr CHHAINA .)
    BHAE            reduce using rule 84 (expr -> expr CHHAINA .)
    KAKHA           reduce using rule 84 (expr -> expr CHHAINA .)
    TICHO           reduce using rule 84 (expr -> expr CHHAINA .)
    DIYE            reduce using rule 84 (expr -> expr CHHAINA .)
    ATHAWA          reduce using rule 84 (expr -> expr CHHAINA .)
    BAJA            reduce using rule 84 (expr -> expr CHHAINA .)
    MAKA            reduce using rule 84 (expr -> expr CHHAINA .)
    BAISA           reduce using rule 84 (expr -> expr CHHAINA .)
    DEKHI           reduce using rule 84 (expr -> expr CHHAINA .)
    COLON           reduce using rule 84 (expr -> expr CHHAINA .)


state 61

    (51) expr -> expr MINUS . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 98
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 62

    (78) expr -> expr LE . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 99
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 63

    (55) expr -> expr POWER . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 100
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 64

    (54) expr -> expr MODULUS . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 101
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 65

    (80) expr -> expr NE . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 102
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 66

    (76) expr -> expr LT . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 103
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 67

    (50) expr -> expr PLUS . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 104
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 68

    (81) expr -> expr RA . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 105
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 69

    (75) expr -> expr GT . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 106
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 70

    (53) expr -> expr DIVIDE . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 107
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 71

    (52) expr -> expr TIMES . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 108
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 72

    (23) return -> expr PATHAU .

    NEWLINE         reduce using rule 23 (return -> expr PATHAU .)
    DIYE            reduce using rule 23 (return -> expr PATHAU .)
    MAKA            reduce using rule 23 (return -> expr PATHAU .)
    ATHAWA          reduce using rule 23 (return -> expr PATHAU .)
    $end            reduce using rule 23 (return -> expr PATHAU .)
    KAKHA           reduce using rule 23 (return -> expr PATHAU .)
    TICHO           reduce using rule 23 (return -> expr PATHAU .)
    BAJA            reduce using rule 23 (return -> expr PATHAU .)
    BAISA           reduce using rule 23 (return -> expr PATHAU .)


state 73

    (77) expr -> expr GE . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 109
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 74

    (40) repeatloop -> expr CHOTI . NEWLINE program TICHO

    NEWLINE         shift and go to state 110


state 75

    (79) expr -> expr EQ . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 111
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 76

    (83) expr -> expr CHHA .

    PLUS            reduce using rule 83 (expr -> expr CHHA .)
    MINUS           reduce using rule 83 (expr -> expr CHHA .)
    TIMES           reduce using rule 83 (expr -> expr CHHA .)
    DIVIDE          reduce using rule 83 (expr -> expr CHHA .)
    MODULUS         reduce using rule 83 (expr -> expr CHHA .)
    POWER           reduce using rule 83 (expr -> expr CHHA .)
    GT              reduce using rule 83 (expr -> expr CHHA .)
    LT              reduce using rule 83 (expr -> expr CHHA .)
    GE              reduce using rule 83 (expr -> expr CHHA .)
    LE              reduce using rule 83 (expr -> expr CHHA .)
    EQ              reduce using rule 83 (expr -> expr CHHA .)
    NE              reduce using rule 83 (expr -> expr CHHA .)
    RA              reduce using rule 83 (expr -> expr CHHA .)
    WA              reduce using rule 83 (expr -> expr CHHA .)
    CHHA            reduce using rule 83 (expr -> expr CHHA .)
    CHHAINA         reduce using rule 83 (expr -> expr CHHA .)
    RPARA           reduce using rule 83 (expr -> expr CHHA .)
    COMMA           reduce using rule 83 (expr -> expr CHHA .)
    PATHAU          reduce using rule 83 (expr -> expr CHHA .)
    CHOTI           reduce using rule 83 (expr -> expr CHHA .)
    NEWLINE         reduce using rule 83 (expr -> expr CHHA .)
    $end            reduce using rule 83 (expr -> expr CHHA .)
    LEKHA           reduce using rule 83 (expr -> expr CHHA .)
    LEU             reduce using rule 83 (expr -> expr CHHA .)
    BHAE            reduce using rule 83 (expr -> expr CHHA .)
    KAKHA           reduce using rule 83 (expr -> expr CHHA .)
    TICHO           reduce using rule 83 (expr -> expr CHHA .)
    DIYE            reduce using rule 83 (expr -> expr CHHA .)
    ATHAWA          reduce using rule 83 (expr -> expr CHHA .)
    BAJA            reduce using rule 83 (expr -> expr CHHA .)
    MAKA            reduce using rule 83 (expr -> expr CHHA .)
    BAISA           reduce using rule 83 (expr -> expr CHHA .)
    DEKHI           reduce using rule 83 (expr -> expr CHHA .)
    COLON           reduce using rule 83 (expr -> expr CHHA .)


state 77

    (43) variableExpr -> variableExpr COMMA . expr
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 112
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 78

    (18) input -> variableExpr LEU .

    MAKA            reduce using rule 18 (input -> variableExpr LEU .)
    NEWLINE         reduce using rule 18 (input -> variableExpr LEU .)
    DIYE            reduce using rule 18 (input -> variableExpr LEU .)
    ATHAWA          reduce using rule 18 (input -> variableExpr LEU .)
    $end            reduce using rule 18 (input -> variableExpr LEU .)
    KAKHA           reduce using rule 18 (input -> variableExpr LEU .)
    TICHO           reduce using rule 18 (input -> variableExpr LEU .)
    BAJA            reduce using rule 18 (input -> variableExpr LEU .)
    BAISA           reduce using rule 18 (input -> variableExpr LEU .)


state 79

    (16) print -> variableExpr LEKHA . SEMICOLON
    (17) print -> variableExpr LEKHA .

    SEMICOLON       shift and go to state 113
    NEWLINE         reduce using rule 17 (print -> variableExpr LEKHA .)
    DIYE            reduce using rule 17 (print -> variableExpr LEKHA .)
    BAISA           reduce using rule 17 (print -> variableExpr LEKHA .)
    ATHAWA          reduce using rule 17 (print -> variableExpr LEKHA .)
    $end            reduce using rule 17 (print -> variableExpr LEKHA .)
    KAKHA           reduce using rule 17 (print -> variableExpr LEKHA .)
    TICHO           reduce using rule 17 (print -> variableExpr LEKHA .)
    BAJA            reduce using rule 17 (print -> variableExpr LEKHA .)
    MAKA            reduce using rule 17 (print -> variableExpr LEKHA .)


state 80

    (70) reference -> reference DOT identifier .

    DOT             reduce using rule 70 (reference -> reference DOT identifier .)
    PLUS            reduce using rule 70 (reference -> reference DOT identifier .)
    MINUS           reduce using rule 70 (reference -> reference DOT identifier .)
    TIMES           reduce using rule 70 (reference -> reference DOT identifier .)
    DIVIDE          reduce using rule 70 (reference -> reference DOT identifier .)
    MODULUS         reduce using rule 70 (reference -> reference DOT identifier .)
    POWER           reduce using rule 70 (reference -> reference DOT identifier .)
    GT              reduce using rule 70 (reference -> reference DOT identifier .)
    LT              reduce using rule 70 (reference -> reference DOT identifier .)
    GE              reduce using rule 70 (reference -> reference DOT identifier .)
    LE              reduce using rule 70 (reference -> reference DOT identifier .)
    EQ              reduce using rule 70 (reference -> reference DOT identifier .)
    NE              reduce using rule 70 (reference -> reference DOT identifier .)
    RA              reduce using rule 70 (reference -> reference DOT identifier .)
    WA              reduce using rule 70 (reference -> reference DOT identifier .)
    CHHA            reduce using rule 70 (reference -> reference DOT identifier .)
    CHHAINA         reduce using rule 70 (reference -> reference DOT identifier .)
    LEKHA           reduce using rule 70 (reference -> reference DOT identifier .)
    LEU             reduce using rule 70 (reference -> reference DOT identifier .)
    COMMA           reduce using rule 70 (reference -> reference DOT identifier .)
    RPARA           reduce using rule 70 (reference -> reference DOT identifier .)
    DEKHI           reduce using rule 70 (reference -> reference DOT identifier .)
    PATHAU          reduce using rule 70 (reference -> reference DOT identifier .)
    CHOTI           reduce using rule 70 (reference -> reference DOT identifier .)
    BAJA            reduce using rule 70 (reference -> reference DOT identifier .)
    NEWLINE         reduce using rule 70 (reference -> reference DOT identifier .)
    $end            reduce using rule 70 (reference -> reference DOT identifier .)
    BHAE            reduce using rule 70 (reference -> reference DOT identifier .)
    KAKHA           reduce using rule 70 (reference -> reference DOT identifier .)
    TICHO           reduce using rule 70 (reference -> reference DOT identifier .)
    DIYE            reduce using rule 70 (reference -> reference DOT identifier .)
    ATHAWA          reduce using rule 70 (reference -> reference DOT identifier .)
    MAKA            reduce using rule 70 (reference -> reference DOT identifier .)
    BAISA           reduce using rule 70 (reference -> reference DOT identifier .)
    COLON           reduce using rule 70 (reference -> reference DOT identifier .)


state 81

    (71) reference -> reference DOT functioncall .

    DOT             reduce using rule 71 (reference -> reference DOT functioncall .)
    PLUS            reduce using rule 71 (reference -> reference DOT functioncall .)
    MINUS           reduce using rule 71 (reference -> reference DOT functioncall .)
    TIMES           reduce using rule 71 (reference -> reference DOT functioncall .)
    DIVIDE          reduce using rule 71 (reference -> reference DOT functioncall .)
    MODULUS         reduce using rule 71 (reference -> reference DOT functioncall .)
    POWER           reduce using rule 71 (reference -> reference DOT functioncall .)
    GT              reduce using rule 71 (reference -> reference DOT functioncall .)
    LT              reduce using rule 71 (reference -> reference DOT functioncall .)
    GE              reduce using rule 71 (reference -> reference DOT functioncall .)
    LE              reduce using rule 71 (reference -> reference DOT functioncall .)
    EQ              reduce using rule 71 (reference -> reference DOT functioncall .)
    NE              reduce using rule 71 (reference -> reference DOT functioncall .)
    RA              reduce using rule 71 (reference -> reference DOT functioncall .)
    WA              reduce using rule 71 (reference -> reference DOT functioncall .)
    CHHA            reduce using rule 71 (reference -> reference DOT functioncall .)
    CHHAINA         reduce using rule 71 (reference -> reference DOT functioncall .)
    LEKHA           reduce using rule 71 (reference -> reference DOT functioncall .)
    LEU             reduce using rule 71 (reference -> reference DOT functioncall .)
    COMMA           reduce using rule 71 (reference -> reference DOT functioncall .)
    RPARA           reduce using rule 71 (reference -> reference DOT functioncall .)
    DEKHI           reduce using rule 71 (reference -> reference DOT functioncall .)
    PATHAU          reduce using rule 71 (reference -> reference DOT functioncall .)
    CHOTI           reduce using rule 71 (reference -> reference DOT functioncall .)
    BAJA            reduce using rule 71 (reference -> reference DOT functioncall .)
    NEWLINE         reduce using rule 71 (reference -> reference DOT functioncall .)
    $end            reduce using rule 71 (reference -> reference DOT functioncall .)
    BHAE            reduce using rule 71 (reference -> reference DOT functioncall .)
    KAKHA           reduce using rule 71 (reference -> reference DOT functioncall .)
    TICHO           reduce using rule 71 (reference -> reference DOT functioncall .)
    DIYE            reduce using rule 71 (reference -> reference DOT functioncall .)
    ATHAWA          reduce using rule 71 (reference -> reference DOT functioncall .)
    MAKA            reduce using rule 71 (reference -> reference DOT functioncall .)
    BAISA           reduce using rule 71 (reference -> reference DOT functioncall .)
    COLON           reduce using rule 71 (reference -> reference DOT functioncall .)


state 82

    (24) slif -> YEDI expr BHAE . slstmt ATHAWA slstmt
    (25) slif -> YEDI expr BHAE . slstmt
    (32) mlif -> YEDI expr BHAE . NEWLINE program DIYE
    (33) mlif -> YEDI expr BHAE . NEWLINE program optelse DIYE
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (85) empty -> .
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         shift and go to state 115
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 114
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    slif                           shift and go to state 1
    return                         shift and go to state 25
    slstmt                         shift and go to state 116
    integer                        shift and go to state 32
    expr                           shift and go to state 117
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    variableExpr                   shift and go to state 39
    functioncall                   shift and go to state 41
    empty                          shift and go to state 91
    assignment                     shift and go to state 28
    print                          shift and go to state 16
    input                          shift and go to state 17
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7
    expression                     shift and go to state 42
    reference                      shift and go to state 3
    string                         shift and go to state 35

state 83

    (56) expr -> LPARA expr RPARA .

    PLUS            reduce using rule 56 (expr -> LPARA expr RPARA .)
    MINUS           reduce using rule 56 (expr -> LPARA expr RPARA .)
    TIMES           reduce using rule 56 (expr -> LPARA expr RPARA .)
    DIVIDE          reduce using rule 56 (expr -> LPARA expr RPARA .)
    MODULUS         reduce using rule 56 (expr -> LPARA expr RPARA .)
    POWER           reduce using rule 56 (expr -> LPARA expr RPARA .)
    GT              reduce using rule 56 (expr -> LPARA expr RPARA .)
    LT              reduce using rule 56 (expr -> LPARA expr RPARA .)
    GE              reduce using rule 56 (expr -> LPARA expr RPARA .)
    LE              reduce using rule 56 (expr -> LPARA expr RPARA .)
    EQ              reduce using rule 56 (expr -> LPARA expr RPARA .)
    NE              reduce using rule 56 (expr -> LPARA expr RPARA .)
    RA              reduce using rule 56 (expr -> LPARA expr RPARA .)
    WA              reduce using rule 56 (expr -> LPARA expr RPARA .)
    CHHA            reduce using rule 56 (expr -> LPARA expr RPARA .)
    CHHAINA         reduce using rule 56 (expr -> LPARA expr RPARA .)
    RPARA           reduce using rule 56 (expr -> LPARA expr RPARA .)
    COMMA           reduce using rule 56 (expr -> LPARA expr RPARA .)
    PATHAU          reduce using rule 56 (expr -> LPARA expr RPARA .)
    CHOTI           reduce using rule 56 (expr -> LPARA expr RPARA .)
    NEWLINE         reduce using rule 56 (expr -> LPARA expr RPARA .)
    $end            reduce using rule 56 (expr -> LPARA expr RPARA .)
    LEKHA           reduce using rule 56 (expr -> LPARA expr RPARA .)
    LEU             reduce using rule 56 (expr -> LPARA expr RPARA .)
    BHAE            reduce using rule 56 (expr -> LPARA expr RPARA .)
    KAKHA           reduce using rule 56 (expr -> LPARA expr RPARA .)
    TICHO           reduce using rule 56 (expr -> LPARA expr RPARA .)
    DIYE            reduce using rule 56 (expr -> LPARA expr RPARA .)
    ATHAWA          reduce using rule 56 (expr -> LPARA expr RPARA .)
    BAJA            reduce using rule 56 (expr -> LPARA expr RPARA .)
    MAKA            reduce using rule 56 (expr -> LPARA expr RPARA .)
    BAISA           reduce using rule 56 (expr -> LPARA expr RPARA .)
    DEKHI           reduce using rule 56 (expr -> LPARA expr RPARA .)
    COLON           reduce using rule 56 (expr -> LPARA expr RPARA .)


state 84

    (39) whileloop -> JABA SAMMA expr . NEWLINE program BAJA
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    NEWLINE         shift and go to state 118
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 85

    (41) function -> KAAM IDENTIFIER LPARA . variableArgs RPARA NEWLINE program MAKA
    (46) variableArgs -> . IDENTIFIER COMMA variableArgs
    (47) variableArgs -> . IDENTIFIER
    (48) variableArgs -> . IDENTIFIER BOGUS
    (49) variableArgs -> . empty
    (85) empty -> .

    IDENTIFIER      shift and go to state 120
    RPARA           reduce using rule 85 (empty -> .)

    variableArgs                   shift and go to state 119
    empty                          shift and go to state 121

state 86

    (37) forloop -> SABAI IDENTIFIER ASSIGNMENT . expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> SABAI IDENTIFIER ASSIGNMENT . expr DEKHI expr COLON expr NEWLINE program BAISA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 122
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 87

    (2) program -> program NEWLINE stmt .

    MAKA            reduce using rule 2 (program -> program NEWLINE stmt .)
    NEWLINE         reduce using rule 2 (program -> program NEWLINE stmt .)
    BAJA            reduce using rule 2 (program -> program NEWLINE stmt .)
    DIYE            reduce using rule 2 (program -> program NEWLINE stmt .)
    ATHAWA          reduce using rule 2 (program -> program NEWLINE stmt .)
    TICHO           reduce using rule 2 (program -> program NEWLINE stmt .)
    KAKHA           reduce using rule 2 (program -> program NEWLINE stmt .)
    BAISA           reduce using rule 2 (program -> program NEWLINE stmt .)
    $end            reduce using rule 2 (program -> program NEWLINE stmt .)


state 88

    (22) incremental -> IDENTIFIER DI expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    ATHAWA          reduce using rule 22 (incremental -> IDENTIFIER DI expr .)
    NEWLINE         reduce using rule 22 (incremental -> IDENTIFIER DI expr .)
    $end            reduce using rule 22 (incremental -> IDENTIFIER DI expr .)
    KAKHA           reduce using rule 22 (incremental -> IDENTIFIER DI expr .)
    TICHO           reduce using rule 22 (incremental -> IDENTIFIER DI expr .)
    DIYE            reduce using rule 22 (incremental -> IDENTIFIER DI expr .)
    BAJA            reduce using rule 22 (incremental -> IDENTIFIER DI expr .)
    MAKA            reduce using rule 22 (incremental -> IDENTIFIER DI expr .)
    BAISA           reduce using rule 22 (incremental -> IDENTIFIER DI expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 89

    (19) incremental -> IDENTIFIER AI expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    ATHAWA          reduce using rule 19 (incremental -> IDENTIFIER AI expr .)
    NEWLINE         reduce using rule 19 (incremental -> IDENTIFIER AI expr .)
    $end            reduce using rule 19 (incremental -> IDENTIFIER AI expr .)
    KAKHA           reduce using rule 19 (incremental -> IDENTIFIER AI expr .)
    TICHO           reduce using rule 19 (incremental -> IDENTIFIER AI expr .)
    DIYE            reduce using rule 19 (incremental -> IDENTIFIER AI expr .)
    BAJA            reduce using rule 19 (incremental -> IDENTIFIER AI expr .)
    MAKA            reduce using rule 19 (incremental -> IDENTIFIER AI expr .)
    BAISA           reduce using rule 19 (incremental -> IDENTIFIER AI expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 90

    (15) assignment -> IDENTIFIER ASSIGNMENT expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    NEWLINE         reduce using rule 15 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    $end            reduce using rule 15 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    KAKHA           reduce using rule 15 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    TICHO           reduce using rule 15 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    DIYE            reduce using rule 15 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    ATHAWA          reduce using rule 15 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    BAJA            reduce using rule 15 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    MAKA            reduce using rule 15 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    BAISA           reduce using rule 15 (assignment -> IDENTIFIER ASSIGNMENT expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 91

    (45) variableExpr -> empty .

    RPARA           reduce using rule 45 (variableExpr -> empty .)
    COMMA           reduce using rule 45 (variableExpr -> empty .)
    LEKHA           reduce using rule 45 (variableExpr -> empty .)
    LEU             reduce using rule 45 (variableExpr -> empty .)


state 92

    (44) variableExpr -> expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    RPARA           reduce using rule 44 (variableExpr -> expr .)
    COMMA           reduce using rule 44 (variableExpr -> expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 93

    (73) functioncall -> IDENTIFIER LPARA variableExpr . RPARA
    (43) variableExpr -> variableExpr . COMMA expr

    RPARA           shift and go to state 123
    COMMA           shift and go to state 77


state 94

    (21) incremental -> IDENTIFIER MI expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    ATHAWA          reduce using rule 21 (incremental -> IDENTIFIER MI expr .)
    NEWLINE         reduce using rule 21 (incremental -> IDENTIFIER MI expr .)
    $end            reduce using rule 21 (incremental -> IDENTIFIER MI expr .)
    KAKHA           reduce using rule 21 (incremental -> IDENTIFIER MI expr .)
    TICHO           reduce using rule 21 (incremental -> IDENTIFIER MI expr .)
    DIYE            reduce using rule 21 (incremental -> IDENTIFIER MI expr .)
    BAJA            reduce using rule 21 (incremental -> IDENTIFIER MI expr .)
    MAKA            reduce using rule 21 (incremental -> IDENTIFIER MI expr .)
    BAISA           reduce using rule 21 (incremental -> IDENTIFIER MI expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 95

    (20) incremental -> IDENTIFIER SI expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    ATHAWA          reduce using rule 20 (incremental -> IDENTIFIER SI expr .)
    NEWLINE         reduce using rule 20 (incremental -> IDENTIFIER SI expr .)
    $end            reduce using rule 20 (incremental -> IDENTIFIER SI expr .)
    KAKHA           reduce using rule 20 (incremental -> IDENTIFIER SI expr .)
    TICHO           reduce using rule 20 (incremental -> IDENTIFIER SI expr .)
    DIYE            reduce using rule 20 (incremental -> IDENTIFIER SI expr .)
    BAJA            reduce using rule 20 (incremental -> IDENTIFIER SI expr .)
    MAKA            reduce using rule 20 (incremental -> IDENTIFIER SI expr .)
    BAISA           reduce using rule 20 (incremental -> IDENTIFIER SI expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 96

    (42) class -> KHAKA IDENTIFIER NEWLINE . program KAKHA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    KAKHA           reduce using rule 85 (empty -> .)
    NEWLINE         reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    program                        shift and go to state 124
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 97

    (82) expr -> expr WA expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    RA              reduce using rule 82 (expr -> expr WA expr .)
    WA              reduce using rule 82 (expr -> expr WA expr .)
    CHHA            reduce using rule 82 (expr -> expr WA expr .)
    CHHAINA         reduce using rule 82 (expr -> expr WA expr .)
    RPARA           reduce using rule 82 (expr -> expr WA expr .)
    COMMA           reduce using rule 82 (expr -> expr WA expr .)
    PATHAU          reduce using rule 82 (expr -> expr WA expr .)
    CHOTI           reduce using rule 82 (expr -> expr WA expr .)
    NEWLINE         reduce using rule 82 (expr -> expr WA expr .)
    $end            reduce using rule 82 (expr -> expr WA expr .)
    LEKHA           reduce using rule 82 (expr -> expr WA expr .)
    LEU             reduce using rule 82 (expr -> expr WA expr .)
    BHAE            reduce using rule 82 (expr -> expr WA expr .)
    KAKHA           reduce using rule 82 (expr -> expr WA expr .)
    TICHO           reduce using rule 82 (expr -> expr WA expr .)
    DIYE            reduce using rule 82 (expr -> expr WA expr .)
    ATHAWA          reduce using rule 82 (expr -> expr WA expr .)
    BAJA            reduce using rule 82 (expr -> expr WA expr .)
    MAKA            reduce using rule 82 (expr -> expr WA expr .)
    BAISA           reduce using rule 82 (expr -> expr WA expr .)
    DEKHI           reduce using rule 82 (expr -> expr WA expr .)
    COLON           reduce using rule 82 (expr -> expr WA expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65

  ! PLUS            [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! MINUS           [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! TIMES           [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! DIVIDE          [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! MODULUS         [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! POWER           [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! GT              [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! LT              [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! GE              [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! LE              [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! EQ              [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! NE              [ reduce using rule 82 (expr -> expr WA expr .) ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 98

    (51) expr -> expr MINUS expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    PLUS            reduce using rule 51 (expr -> expr MINUS expr .)
    MINUS           reduce using rule 51 (expr -> expr MINUS expr .)
    GT              reduce using rule 51 (expr -> expr MINUS expr .)
    LT              reduce using rule 51 (expr -> expr MINUS expr .)
    GE              reduce using rule 51 (expr -> expr MINUS expr .)
    LE              reduce using rule 51 (expr -> expr MINUS expr .)
    EQ              reduce using rule 51 (expr -> expr MINUS expr .)
    NE              reduce using rule 51 (expr -> expr MINUS expr .)
    RA              reduce using rule 51 (expr -> expr MINUS expr .)
    WA              reduce using rule 51 (expr -> expr MINUS expr .)
    CHHA            reduce using rule 51 (expr -> expr MINUS expr .)
    CHHAINA         reduce using rule 51 (expr -> expr MINUS expr .)
    RPARA           reduce using rule 51 (expr -> expr MINUS expr .)
    COMMA           reduce using rule 51 (expr -> expr MINUS expr .)
    PATHAU          reduce using rule 51 (expr -> expr MINUS expr .)
    CHOTI           reduce using rule 51 (expr -> expr MINUS expr .)
    NEWLINE         reduce using rule 51 (expr -> expr MINUS expr .)
    $end            reduce using rule 51 (expr -> expr MINUS expr .)
    LEKHA           reduce using rule 51 (expr -> expr MINUS expr .)
    LEU             reduce using rule 51 (expr -> expr MINUS expr .)
    BHAE            reduce using rule 51 (expr -> expr MINUS expr .)
    KAKHA           reduce using rule 51 (expr -> expr MINUS expr .)
    TICHO           reduce using rule 51 (expr -> expr MINUS expr .)
    DIYE            reduce using rule 51 (expr -> expr MINUS expr .)
    ATHAWA          reduce using rule 51 (expr -> expr MINUS expr .)
    BAJA            reduce using rule 51 (expr -> expr MINUS expr .)
    MAKA            reduce using rule 51 (expr -> expr MINUS expr .)
    BAISA           reduce using rule 51 (expr -> expr MINUS expr .)
    DEKHI           reduce using rule 51 (expr -> expr MINUS expr .)
    COLON           reduce using rule 51 (expr -> expr MINUS expr .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63

  ! TIMES           [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! DIVIDE          [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! MODULUS         [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! POWER           [ reduce using rule 51 (expr -> expr MINUS expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 61 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 99

    (78) expr -> expr LE expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    GT              reduce using rule 78 (expr -> expr LE expr .)
    LT              reduce using rule 78 (expr -> expr LE expr .)
    GE              reduce using rule 78 (expr -> expr LE expr .)
    LE              reduce using rule 78 (expr -> expr LE expr .)
    EQ              reduce using rule 78 (expr -> expr LE expr .)
    NE              reduce using rule 78 (expr -> expr LE expr .)
    RA              reduce using rule 78 (expr -> expr LE expr .)
    WA              reduce using rule 78 (expr -> expr LE expr .)
    CHHA            reduce using rule 78 (expr -> expr LE expr .)
    CHHAINA         reduce using rule 78 (expr -> expr LE expr .)
    RPARA           reduce using rule 78 (expr -> expr LE expr .)
    COMMA           reduce using rule 78 (expr -> expr LE expr .)
    PATHAU          reduce using rule 78 (expr -> expr LE expr .)
    CHOTI           reduce using rule 78 (expr -> expr LE expr .)
    NEWLINE         reduce using rule 78 (expr -> expr LE expr .)
    $end            reduce using rule 78 (expr -> expr LE expr .)
    LEKHA           reduce using rule 78 (expr -> expr LE expr .)
    LEU             reduce using rule 78 (expr -> expr LE expr .)
    BHAE            reduce using rule 78 (expr -> expr LE expr .)
    KAKHA           reduce using rule 78 (expr -> expr LE expr .)
    TICHO           reduce using rule 78 (expr -> expr LE expr .)
    DIYE            reduce using rule 78 (expr -> expr LE expr .)
    ATHAWA          reduce using rule 78 (expr -> expr LE expr .)
    BAJA            reduce using rule 78 (expr -> expr LE expr .)
    MAKA            reduce using rule 78 (expr -> expr LE expr .)
    BAISA           reduce using rule 78 (expr -> expr LE expr .)
    DEKHI           reduce using rule 78 (expr -> expr LE expr .)
    COLON           reduce using rule 78 (expr -> expr LE expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63

  ! PLUS            [ reduce using rule 78 (expr -> expr LE expr .) ]
  ! MINUS           [ reduce using rule 78 (expr -> expr LE expr .) ]
  ! TIMES           [ reduce using rule 78 (expr -> expr LE expr .) ]
  ! DIVIDE          [ reduce using rule 78 (expr -> expr LE expr .) ]
  ! MODULUS         [ reduce using rule 78 (expr -> expr LE expr .) ]
  ! POWER           [ reduce using rule 78 (expr -> expr LE expr .) ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 100

    (55) expr -> expr POWER expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    PLUS            reduce using rule 55 (expr -> expr POWER expr .)
    MINUS           reduce using rule 55 (expr -> expr POWER expr .)
    TIMES           reduce using rule 55 (expr -> expr POWER expr .)
    DIVIDE          reduce using rule 55 (expr -> expr POWER expr .)
    MODULUS         reduce using rule 55 (expr -> expr POWER expr .)
    POWER           reduce using rule 55 (expr -> expr POWER expr .)
    GT              reduce using rule 55 (expr -> expr POWER expr .)
    LT              reduce using rule 55 (expr -> expr POWER expr .)
    GE              reduce using rule 55 (expr -> expr POWER expr .)
    LE              reduce using rule 55 (expr -> expr POWER expr .)
    EQ              reduce using rule 55 (expr -> expr POWER expr .)
    NE              reduce using rule 55 (expr -> expr POWER expr .)
    RA              reduce using rule 55 (expr -> expr POWER expr .)
    WA              reduce using rule 55 (expr -> expr POWER expr .)
    CHHA            reduce using rule 55 (expr -> expr POWER expr .)
    CHHAINA         reduce using rule 55 (expr -> expr POWER expr .)
    RPARA           reduce using rule 55 (expr -> expr POWER expr .)
    COMMA           reduce using rule 55 (expr -> expr POWER expr .)
    PATHAU          reduce using rule 55 (expr -> expr POWER expr .)
    CHOTI           reduce using rule 55 (expr -> expr POWER expr .)
    NEWLINE         reduce using rule 55 (expr -> expr POWER expr .)
    $end            reduce using rule 55 (expr -> expr POWER expr .)
    LEKHA           reduce using rule 55 (expr -> expr POWER expr .)
    LEU             reduce using rule 55 (expr -> expr POWER expr .)
    BHAE            reduce using rule 55 (expr -> expr POWER expr .)
    KAKHA           reduce using rule 55 (expr -> expr POWER expr .)
    TICHO           reduce using rule 55 (expr -> expr POWER expr .)
    DIYE            reduce using rule 55 (expr -> expr POWER expr .)
    ATHAWA          reduce using rule 55 (expr -> expr POWER expr .)
    BAJA            reduce using rule 55 (expr -> expr POWER expr .)
    MAKA            reduce using rule 55 (expr -> expr POWER expr .)
    BAISA           reduce using rule 55 (expr -> expr POWER expr .)
    DEKHI           reduce using rule 55 (expr -> expr POWER expr .)
    COLON           reduce using rule 55 (expr -> expr POWER expr .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! MODULUS         [ shift and go to state 64 ]
  ! POWER           [ shift and go to state 63 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 101

    (54) expr -> expr MODULUS expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    PLUS            reduce using rule 54 (expr -> expr MODULUS expr .)
    MINUS           reduce using rule 54 (expr -> expr MODULUS expr .)
    TIMES           reduce using rule 54 (expr -> expr MODULUS expr .)
    DIVIDE          reduce using rule 54 (expr -> expr MODULUS expr .)
    MODULUS         reduce using rule 54 (expr -> expr MODULUS expr .)
    POWER           reduce using rule 54 (expr -> expr MODULUS expr .)
    GT              reduce using rule 54 (expr -> expr MODULUS expr .)
    LT              reduce using rule 54 (expr -> expr MODULUS expr .)
    GE              reduce using rule 54 (expr -> expr MODULUS expr .)
    LE              reduce using rule 54 (expr -> expr MODULUS expr .)
    EQ              reduce using rule 54 (expr -> expr MODULUS expr .)
    NE              reduce using rule 54 (expr -> expr MODULUS expr .)
    RA              reduce using rule 54 (expr -> expr MODULUS expr .)
    WA              reduce using rule 54 (expr -> expr MODULUS expr .)
    CHHA            reduce using rule 54 (expr -> expr MODULUS expr .)
    CHHAINA         reduce using rule 54 (expr -> expr MODULUS expr .)
    RPARA           reduce using rule 54 (expr -> expr MODULUS expr .)
    COMMA           reduce using rule 54 (expr -> expr MODULUS expr .)
    PATHAU          reduce using rule 54 (expr -> expr MODULUS expr .)
    CHOTI           reduce using rule 54 (expr -> expr MODULUS expr .)
    NEWLINE         reduce using rule 54 (expr -> expr MODULUS expr .)
    $end            reduce using rule 54 (expr -> expr MODULUS expr .)
    LEKHA           reduce using rule 54 (expr -> expr MODULUS expr .)
    LEU             reduce using rule 54 (expr -> expr MODULUS expr .)
    BHAE            reduce using rule 54 (expr -> expr MODULUS expr .)
    KAKHA           reduce using rule 54 (expr -> expr MODULUS expr .)
    TICHO           reduce using rule 54 (expr -> expr MODULUS expr .)
    DIYE            reduce using rule 54 (expr -> expr MODULUS expr .)
    ATHAWA          reduce using rule 54 (expr -> expr MODULUS expr .)
    BAJA            reduce using rule 54 (expr -> expr MODULUS expr .)
    MAKA            reduce using rule 54 (expr -> expr MODULUS expr .)
    BAISA           reduce using rule 54 (expr -> expr MODULUS expr .)
    DEKHI           reduce using rule 54 (expr -> expr MODULUS expr .)
    COLON           reduce using rule 54 (expr -> expr MODULUS expr .)

  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! MODULUS         [ shift and go to state 64 ]
  ! POWER           [ shift and go to state 63 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 102

    (80) expr -> expr NE expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    EQ              reduce using rule 80 (expr -> expr NE expr .)
    NE              reduce using rule 80 (expr -> expr NE expr .)
    RA              reduce using rule 80 (expr -> expr NE expr .)
    WA              reduce using rule 80 (expr -> expr NE expr .)
    CHHA            reduce using rule 80 (expr -> expr NE expr .)
    CHHAINA         reduce using rule 80 (expr -> expr NE expr .)
    RPARA           reduce using rule 80 (expr -> expr NE expr .)
    COMMA           reduce using rule 80 (expr -> expr NE expr .)
    PATHAU          reduce using rule 80 (expr -> expr NE expr .)
    CHOTI           reduce using rule 80 (expr -> expr NE expr .)
    NEWLINE         reduce using rule 80 (expr -> expr NE expr .)
    $end            reduce using rule 80 (expr -> expr NE expr .)
    LEKHA           reduce using rule 80 (expr -> expr NE expr .)
    LEU             reduce using rule 80 (expr -> expr NE expr .)
    BHAE            reduce using rule 80 (expr -> expr NE expr .)
    KAKHA           reduce using rule 80 (expr -> expr NE expr .)
    TICHO           reduce using rule 80 (expr -> expr NE expr .)
    DIYE            reduce using rule 80 (expr -> expr NE expr .)
    ATHAWA          reduce using rule 80 (expr -> expr NE expr .)
    BAJA            reduce using rule 80 (expr -> expr NE expr .)
    MAKA            reduce using rule 80 (expr -> expr NE expr .)
    BAISA           reduce using rule 80 (expr -> expr NE expr .)
    DEKHI           reduce using rule 80 (expr -> expr NE expr .)
    COLON           reduce using rule 80 (expr -> expr NE expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62

  ! PLUS            [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! MINUS           [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! TIMES           [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! DIVIDE          [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! MODULUS         [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! POWER           [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! GT              [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! LT              [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! GE              [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! LE              [ reduce using rule 80 (expr -> expr NE expr .) ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 103

    (76) expr -> expr LT expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    GT              reduce using rule 76 (expr -> expr LT expr .)
    LT              reduce using rule 76 (expr -> expr LT expr .)
    GE              reduce using rule 76 (expr -> expr LT expr .)
    LE              reduce using rule 76 (expr -> expr LT expr .)
    EQ              reduce using rule 76 (expr -> expr LT expr .)
    NE              reduce using rule 76 (expr -> expr LT expr .)
    RA              reduce using rule 76 (expr -> expr LT expr .)
    WA              reduce using rule 76 (expr -> expr LT expr .)
    CHHA            reduce using rule 76 (expr -> expr LT expr .)
    CHHAINA         reduce using rule 76 (expr -> expr LT expr .)
    RPARA           reduce using rule 76 (expr -> expr LT expr .)
    COMMA           reduce using rule 76 (expr -> expr LT expr .)
    PATHAU          reduce using rule 76 (expr -> expr LT expr .)
    CHOTI           reduce using rule 76 (expr -> expr LT expr .)
    NEWLINE         reduce using rule 76 (expr -> expr LT expr .)
    $end            reduce using rule 76 (expr -> expr LT expr .)
    LEKHA           reduce using rule 76 (expr -> expr LT expr .)
    LEU             reduce using rule 76 (expr -> expr LT expr .)
    BHAE            reduce using rule 76 (expr -> expr LT expr .)
    KAKHA           reduce using rule 76 (expr -> expr LT expr .)
    TICHO           reduce using rule 76 (expr -> expr LT expr .)
    DIYE            reduce using rule 76 (expr -> expr LT expr .)
    ATHAWA          reduce using rule 76 (expr -> expr LT expr .)
    BAJA            reduce using rule 76 (expr -> expr LT expr .)
    MAKA            reduce using rule 76 (expr -> expr LT expr .)
    BAISA           reduce using rule 76 (expr -> expr LT expr .)
    DEKHI           reduce using rule 76 (expr -> expr LT expr .)
    COLON           reduce using rule 76 (expr -> expr LT expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63

  ! PLUS            [ reduce using rule 76 (expr -> expr LT expr .) ]
  ! MINUS           [ reduce using rule 76 (expr -> expr LT expr .) ]
  ! TIMES           [ reduce using rule 76 (expr -> expr LT expr .) ]
  ! DIVIDE          [ reduce using rule 76 (expr -> expr LT expr .) ]
  ! MODULUS         [ reduce using rule 76 (expr -> expr LT expr .) ]
  ! POWER           [ reduce using rule 76 (expr -> expr LT expr .) ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 104

    (50) expr -> expr PLUS expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    PLUS            reduce using rule 50 (expr -> expr PLUS expr .)
    MINUS           reduce using rule 50 (expr -> expr PLUS expr .)
    GT              reduce using rule 50 (expr -> expr PLUS expr .)
    LT              reduce using rule 50 (expr -> expr PLUS expr .)
    GE              reduce using rule 50 (expr -> expr PLUS expr .)
    LE              reduce using rule 50 (expr -> expr PLUS expr .)
    EQ              reduce using rule 50 (expr -> expr PLUS expr .)
    NE              reduce using rule 50 (expr -> expr PLUS expr .)
    RA              reduce using rule 50 (expr -> expr PLUS expr .)
    WA              reduce using rule 50 (expr -> expr PLUS expr .)
    CHHA            reduce using rule 50 (expr -> expr PLUS expr .)
    CHHAINA         reduce using rule 50 (expr -> expr PLUS expr .)
    RPARA           reduce using rule 50 (expr -> expr PLUS expr .)
    COMMA           reduce using rule 50 (expr -> expr PLUS expr .)
    PATHAU          reduce using rule 50 (expr -> expr PLUS expr .)
    CHOTI           reduce using rule 50 (expr -> expr PLUS expr .)
    NEWLINE         reduce using rule 50 (expr -> expr PLUS expr .)
    $end            reduce using rule 50 (expr -> expr PLUS expr .)
    LEKHA           reduce using rule 50 (expr -> expr PLUS expr .)
    LEU             reduce using rule 50 (expr -> expr PLUS expr .)
    BHAE            reduce using rule 50 (expr -> expr PLUS expr .)
    KAKHA           reduce using rule 50 (expr -> expr PLUS expr .)
    TICHO           reduce using rule 50 (expr -> expr PLUS expr .)
    DIYE            reduce using rule 50 (expr -> expr PLUS expr .)
    ATHAWA          reduce using rule 50 (expr -> expr PLUS expr .)
    BAJA            reduce using rule 50 (expr -> expr PLUS expr .)
    MAKA            reduce using rule 50 (expr -> expr PLUS expr .)
    BAISA           reduce using rule 50 (expr -> expr PLUS expr .)
    DEKHI           reduce using rule 50 (expr -> expr PLUS expr .)
    COLON           reduce using rule 50 (expr -> expr PLUS expr .)
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63

  ! TIMES           [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! DIVIDE          [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! MODULUS         [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! POWER           [ reduce using rule 50 (expr -> expr PLUS expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 61 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 105

    (81) expr -> expr RA expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    RA              reduce using rule 81 (expr -> expr RA expr .)
    WA              reduce using rule 81 (expr -> expr RA expr .)
    CHHA            reduce using rule 81 (expr -> expr RA expr .)
    CHHAINA         reduce using rule 81 (expr -> expr RA expr .)
    RPARA           reduce using rule 81 (expr -> expr RA expr .)
    COMMA           reduce using rule 81 (expr -> expr RA expr .)
    PATHAU          reduce using rule 81 (expr -> expr RA expr .)
    CHOTI           reduce using rule 81 (expr -> expr RA expr .)
    NEWLINE         reduce using rule 81 (expr -> expr RA expr .)
    $end            reduce using rule 81 (expr -> expr RA expr .)
    LEKHA           reduce using rule 81 (expr -> expr RA expr .)
    LEU             reduce using rule 81 (expr -> expr RA expr .)
    BHAE            reduce using rule 81 (expr -> expr RA expr .)
    KAKHA           reduce using rule 81 (expr -> expr RA expr .)
    TICHO           reduce using rule 81 (expr -> expr RA expr .)
    DIYE            reduce using rule 81 (expr -> expr RA expr .)
    ATHAWA          reduce using rule 81 (expr -> expr RA expr .)
    BAJA            reduce using rule 81 (expr -> expr RA expr .)
    MAKA            reduce using rule 81 (expr -> expr RA expr .)
    BAISA           reduce using rule 81 (expr -> expr RA expr .)
    DEKHI           reduce using rule 81 (expr -> expr RA expr .)
    COLON           reduce using rule 81 (expr -> expr RA expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65

  ! PLUS            [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! MINUS           [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! TIMES           [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! DIVIDE          [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! MODULUS         [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! POWER           [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! GT              [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! LT              [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! GE              [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! LE              [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! EQ              [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! NE              [ reduce using rule 81 (expr -> expr RA expr .) ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 106

    (75) expr -> expr GT expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    GT              reduce using rule 75 (expr -> expr GT expr .)
    LT              reduce using rule 75 (expr -> expr GT expr .)
    GE              reduce using rule 75 (expr -> expr GT expr .)
    LE              reduce using rule 75 (expr -> expr GT expr .)
    EQ              reduce using rule 75 (expr -> expr GT expr .)
    NE              reduce using rule 75 (expr -> expr GT expr .)
    RA              reduce using rule 75 (expr -> expr GT expr .)
    WA              reduce using rule 75 (expr -> expr GT expr .)
    CHHA            reduce using rule 75 (expr -> expr GT expr .)
    CHHAINA         reduce using rule 75 (expr -> expr GT expr .)
    RPARA           reduce using rule 75 (expr -> expr GT expr .)
    COMMA           reduce using rule 75 (expr -> expr GT expr .)
    PATHAU          reduce using rule 75 (expr -> expr GT expr .)
    CHOTI           reduce using rule 75 (expr -> expr GT expr .)
    NEWLINE         reduce using rule 75 (expr -> expr GT expr .)
    $end            reduce using rule 75 (expr -> expr GT expr .)
    LEKHA           reduce using rule 75 (expr -> expr GT expr .)
    LEU             reduce using rule 75 (expr -> expr GT expr .)
    BHAE            reduce using rule 75 (expr -> expr GT expr .)
    KAKHA           reduce using rule 75 (expr -> expr GT expr .)
    TICHO           reduce using rule 75 (expr -> expr GT expr .)
    DIYE            reduce using rule 75 (expr -> expr GT expr .)
    ATHAWA          reduce using rule 75 (expr -> expr GT expr .)
    BAJA            reduce using rule 75 (expr -> expr GT expr .)
    MAKA            reduce using rule 75 (expr -> expr GT expr .)
    BAISA           reduce using rule 75 (expr -> expr GT expr .)
    DEKHI           reduce using rule 75 (expr -> expr GT expr .)
    COLON           reduce using rule 75 (expr -> expr GT expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63

  ! PLUS            [ reduce using rule 75 (expr -> expr GT expr .) ]
  ! MINUS           [ reduce using rule 75 (expr -> expr GT expr .) ]
  ! TIMES           [ reduce using rule 75 (expr -> expr GT expr .) ]
  ! DIVIDE          [ reduce using rule 75 (expr -> expr GT expr .) ]
  ! MODULUS         [ reduce using rule 75 (expr -> expr GT expr .) ]
  ! POWER           [ reduce using rule 75 (expr -> expr GT expr .) ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 107

    (53) expr -> expr DIVIDE expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    PLUS            reduce using rule 53 (expr -> expr DIVIDE expr .)
    MINUS           reduce using rule 53 (expr -> expr DIVIDE expr .)
    TIMES           reduce using rule 53 (expr -> expr DIVIDE expr .)
    DIVIDE          reduce using rule 53 (expr -> expr DIVIDE expr .)
    GT              reduce using rule 53 (expr -> expr DIVIDE expr .)
    LT              reduce using rule 53 (expr -> expr DIVIDE expr .)
    GE              reduce using rule 53 (expr -> expr DIVIDE expr .)
    LE              reduce using rule 53 (expr -> expr DIVIDE expr .)
    EQ              reduce using rule 53 (expr -> expr DIVIDE expr .)
    NE              reduce using rule 53 (expr -> expr DIVIDE expr .)
    RA              reduce using rule 53 (expr -> expr DIVIDE expr .)
    WA              reduce using rule 53 (expr -> expr DIVIDE expr .)
    CHHA            reduce using rule 53 (expr -> expr DIVIDE expr .)
    CHHAINA         reduce using rule 53 (expr -> expr DIVIDE expr .)
    RPARA           reduce using rule 53 (expr -> expr DIVIDE expr .)
    COMMA           reduce using rule 53 (expr -> expr DIVIDE expr .)
    PATHAU          reduce using rule 53 (expr -> expr DIVIDE expr .)
    CHOTI           reduce using rule 53 (expr -> expr DIVIDE expr .)
    NEWLINE         reduce using rule 53 (expr -> expr DIVIDE expr .)
    $end            reduce using rule 53 (expr -> expr DIVIDE expr .)
    LEKHA           reduce using rule 53 (expr -> expr DIVIDE expr .)
    LEU             reduce using rule 53 (expr -> expr DIVIDE expr .)
    BHAE            reduce using rule 53 (expr -> expr DIVIDE expr .)
    KAKHA           reduce using rule 53 (expr -> expr DIVIDE expr .)
    TICHO           reduce using rule 53 (expr -> expr DIVIDE expr .)
    DIYE            reduce using rule 53 (expr -> expr DIVIDE expr .)
    ATHAWA          reduce using rule 53 (expr -> expr DIVIDE expr .)
    BAJA            reduce using rule 53 (expr -> expr DIVIDE expr .)
    MAKA            reduce using rule 53 (expr -> expr DIVIDE expr .)
    BAISA           reduce using rule 53 (expr -> expr DIVIDE expr .)
    DEKHI           reduce using rule 53 (expr -> expr DIVIDE expr .)
    COLON           reduce using rule 53 (expr -> expr DIVIDE expr .)
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63

  ! MODULUS         [ reduce using rule 53 (expr -> expr DIVIDE expr .) ]
  ! POWER           [ reduce using rule 53 (expr -> expr DIVIDE expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 108

    (52) expr -> expr TIMES expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    PLUS            reduce using rule 52 (expr -> expr TIMES expr .)
    MINUS           reduce using rule 52 (expr -> expr TIMES expr .)
    TIMES           reduce using rule 52 (expr -> expr TIMES expr .)
    DIVIDE          reduce using rule 52 (expr -> expr TIMES expr .)
    GT              reduce using rule 52 (expr -> expr TIMES expr .)
    LT              reduce using rule 52 (expr -> expr TIMES expr .)
    GE              reduce using rule 52 (expr -> expr TIMES expr .)
    LE              reduce using rule 52 (expr -> expr TIMES expr .)
    EQ              reduce using rule 52 (expr -> expr TIMES expr .)
    NE              reduce using rule 52 (expr -> expr TIMES expr .)
    RA              reduce using rule 52 (expr -> expr TIMES expr .)
    WA              reduce using rule 52 (expr -> expr TIMES expr .)
    CHHA            reduce using rule 52 (expr -> expr TIMES expr .)
    CHHAINA         reduce using rule 52 (expr -> expr TIMES expr .)
    RPARA           reduce using rule 52 (expr -> expr TIMES expr .)
    COMMA           reduce using rule 52 (expr -> expr TIMES expr .)
    PATHAU          reduce using rule 52 (expr -> expr TIMES expr .)
    CHOTI           reduce using rule 52 (expr -> expr TIMES expr .)
    NEWLINE         reduce using rule 52 (expr -> expr TIMES expr .)
    $end            reduce using rule 52 (expr -> expr TIMES expr .)
    LEKHA           reduce using rule 52 (expr -> expr TIMES expr .)
    LEU             reduce using rule 52 (expr -> expr TIMES expr .)
    BHAE            reduce using rule 52 (expr -> expr TIMES expr .)
    KAKHA           reduce using rule 52 (expr -> expr TIMES expr .)
    TICHO           reduce using rule 52 (expr -> expr TIMES expr .)
    DIYE            reduce using rule 52 (expr -> expr TIMES expr .)
    ATHAWA          reduce using rule 52 (expr -> expr TIMES expr .)
    BAJA            reduce using rule 52 (expr -> expr TIMES expr .)
    MAKA            reduce using rule 52 (expr -> expr TIMES expr .)
    BAISA           reduce using rule 52 (expr -> expr TIMES expr .)
    DEKHI           reduce using rule 52 (expr -> expr TIMES expr .)
    COLON           reduce using rule 52 (expr -> expr TIMES expr .)
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63

  ! MODULUS         [ reduce using rule 52 (expr -> expr TIMES expr .) ]
  ! POWER           [ reduce using rule 52 (expr -> expr TIMES expr .) ]
  ! PLUS            [ shift and go to state 67 ]
  ! MINUS           [ shift and go to state 61 ]
  ! TIMES           [ shift and go to state 71 ]
  ! DIVIDE          [ shift and go to state 70 ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 109

    (77) expr -> expr GE expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    GT              reduce using rule 77 (expr -> expr GE expr .)
    LT              reduce using rule 77 (expr -> expr GE expr .)
    GE              reduce using rule 77 (expr -> expr GE expr .)
    LE              reduce using rule 77 (expr -> expr GE expr .)
    EQ              reduce using rule 77 (expr -> expr GE expr .)
    NE              reduce using rule 77 (expr -> expr GE expr .)
    RA              reduce using rule 77 (expr -> expr GE expr .)
    WA              reduce using rule 77 (expr -> expr GE expr .)
    CHHA            reduce using rule 77 (expr -> expr GE expr .)
    CHHAINA         reduce using rule 77 (expr -> expr GE expr .)
    RPARA           reduce using rule 77 (expr -> expr GE expr .)
    COMMA           reduce using rule 77 (expr -> expr GE expr .)
    PATHAU          reduce using rule 77 (expr -> expr GE expr .)
    CHOTI           reduce using rule 77 (expr -> expr GE expr .)
    NEWLINE         reduce using rule 77 (expr -> expr GE expr .)
    $end            reduce using rule 77 (expr -> expr GE expr .)
    LEKHA           reduce using rule 77 (expr -> expr GE expr .)
    LEU             reduce using rule 77 (expr -> expr GE expr .)
    BHAE            reduce using rule 77 (expr -> expr GE expr .)
    KAKHA           reduce using rule 77 (expr -> expr GE expr .)
    TICHO           reduce using rule 77 (expr -> expr GE expr .)
    DIYE            reduce using rule 77 (expr -> expr GE expr .)
    ATHAWA          reduce using rule 77 (expr -> expr GE expr .)
    BAJA            reduce using rule 77 (expr -> expr GE expr .)
    MAKA            reduce using rule 77 (expr -> expr GE expr .)
    BAISA           reduce using rule 77 (expr -> expr GE expr .)
    DEKHI           reduce using rule 77 (expr -> expr GE expr .)
    COLON           reduce using rule 77 (expr -> expr GE expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63

  ! PLUS            [ reduce using rule 77 (expr -> expr GE expr .) ]
  ! MINUS           [ reduce using rule 77 (expr -> expr GE expr .) ]
  ! TIMES           [ reduce using rule 77 (expr -> expr GE expr .) ]
  ! DIVIDE          [ reduce using rule 77 (expr -> expr GE expr .) ]
  ! MODULUS         [ reduce using rule 77 (expr -> expr GE expr .) ]
  ! POWER           [ reduce using rule 77 (expr -> expr GE expr .) ]
  ! GT              [ shift and go to state 69 ]
  ! LT              [ shift and go to state 66 ]
  ! GE              [ shift and go to state 73 ]
  ! LE              [ shift and go to state 62 ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 110

    (40) repeatloop -> expr CHOTI NEWLINE . program TICHO
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    TICHO           reduce using rule 85 (empty -> .)
    NEWLINE         reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    program                        shift and go to state 125
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 111

    (79) expr -> expr EQ expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    EQ              reduce using rule 79 (expr -> expr EQ expr .)
    NE              reduce using rule 79 (expr -> expr EQ expr .)
    RA              reduce using rule 79 (expr -> expr EQ expr .)
    WA              reduce using rule 79 (expr -> expr EQ expr .)
    CHHA            reduce using rule 79 (expr -> expr EQ expr .)
    CHHAINA         reduce using rule 79 (expr -> expr EQ expr .)
    RPARA           reduce using rule 79 (expr -> expr EQ expr .)
    COMMA           reduce using rule 79 (expr -> expr EQ expr .)
    PATHAU          reduce using rule 79 (expr -> expr EQ expr .)
    CHOTI           reduce using rule 79 (expr -> expr EQ expr .)
    NEWLINE         reduce using rule 79 (expr -> expr EQ expr .)
    $end            reduce using rule 79 (expr -> expr EQ expr .)
    LEKHA           reduce using rule 79 (expr -> expr EQ expr .)
    LEU             reduce using rule 79 (expr -> expr EQ expr .)
    BHAE            reduce using rule 79 (expr -> expr EQ expr .)
    KAKHA           reduce using rule 79 (expr -> expr EQ expr .)
    TICHO           reduce using rule 79 (expr -> expr EQ expr .)
    DIYE            reduce using rule 79 (expr -> expr EQ expr .)
    ATHAWA          reduce using rule 79 (expr -> expr EQ expr .)
    BAJA            reduce using rule 79 (expr -> expr EQ expr .)
    MAKA            reduce using rule 79 (expr -> expr EQ expr .)
    BAISA           reduce using rule 79 (expr -> expr EQ expr .)
    DEKHI           reduce using rule 79 (expr -> expr EQ expr .)
    COLON           reduce using rule 79 (expr -> expr EQ expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62

  ! PLUS            [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! MINUS           [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! TIMES           [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! DIVIDE          [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! MODULUS         [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! POWER           [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! GT              [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! LT              [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! GE              [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! LE              [ reduce using rule 79 (expr -> expr EQ expr .) ]
  ! EQ              [ shift and go to state 75 ]
  ! NE              [ shift and go to state 65 ]
  ! RA              [ shift and go to state 68 ]
  ! WA              [ shift and go to state 59 ]
  ! CHHA            [ shift and go to state 76 ]
  ! CHHAINA         [ shift and go to state 60 ]


state 112

    (43) variableExpr -> variableExpr COMMA expr .
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    LEKHA           reduce using rule 43 (variableExpr -> variableExpr COMMA expr .)
    LEU             reduce using rule 43 (variableExpr -> variableExpr COMMA expr .)
    COMMA           reduce using rule 43 (variableExpr -> variableExpr COMMA expr .)
    RPARA           reduce using rule 43 (variableExpr -> variableExpr COMMA expr .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 113

    (16) print -> variableExpr LEKHA SEMICOLON .

    NEWLINE         reduce using rule 16 (print -> variableExpr LEKHA SEMICOLON .)
    DIYE            reduce using rule 16 (print -> variableExpr LEKHA SEMICOLON .)
    BAISA           reduce using rule 16 (print -> variableExpr LEKHA SEMICOLON .)
    ATHAWA          reduce using rule 16 (print -> variableExpr LEKHA SEMICOLON .)
    $end            reduce using rule 16 (print -> variableExpr LEKHA SEMICOLON .)
    KAKHA           reduce using rule 16 (print -> variableExpr LEKHA SEMICOLON .)
    TICHO           reduce using rule 16 (print -> variableExpr LEKHA SEMICOLON .)
    BAJA            reduce using rule 16 (print -> variableExpr LEKHA SEMICOLON .)
    MAKA            reduce using rule 16 (print -> variableExpr LEKHA SEMICOLON .)


state 114

    (24) slif -> YEDI . expr BHAE slstmt ATHAWA slstmt
    (25) slif -> YEDI . expr BHAE slstmt
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    reference                      shift and go to state 3
    expr                           shift and go to state 126
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7
    string                         shift and go to state 35

state 115

    (32) mlif -> YEDI expr BHAE NEWLINE . program DIYE
    (33) mlif -> YEDI expr BHAE NEWLINE . program optelse DIYE
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    DIYE            reduce using rule 85 (empty -> .)
    NEWLINE         reduce using rule 85 (empty -> .)
    ATHAWA          reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    program                        shift and go to state 127
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 116

    (24) slif -> YEDI expr BHAE slstmt . ATHAWA slstmt
    (25) slif -> YEDI expr BHAE slstmt .

  ! shift/reduce conflict for ATHAWA resolved as shift
    ATHAWA          shift and go to state 128
    NEWLINE         reduce using rule 25 (slif -> YEDI expr BHAE slstmt .)
    DIYE            reduce using rule 25 (slif -> YEDI expr BHAE slstmt .)
    MAKA            reduce using rule 25 (slif -> YEDI expr BHAE slstmt .)
    $end            reduce using rule 25 (slif -> YEDI expr BHAE slstmt .)
    KAKHA           reduce using rule 25 (slif -> YEDI expr BHAE slstmt .)
    TICHO           reduce using rule 25 (slif -> YEDI expr BHAE slstmt .)
    BAJA            reduce using rule 25 (slif -> YEDI expr BHAE slstmt .)
    BAISA           reduce using rule 25 (slif -> YEDI expr BHAE slstmt .)

  ! ATHAWA          [ reduce using rule 25 (slif -> YEDI expr BHAE slstmt .) ]


state 117

    (14) expression -> expr .
    (23) return -> expr . PATHAU
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA
    (44) variableExpr -> expr .

    ATHAWA          reduce using rule 14 (expression -> expr .)
    NEWLINE         reduce using rule 14 (expression -> expr .)
    $end            reduce using rule 14 (expression -> expr .)
    KAKHA           reduce using rule 14 (expression -> expr .)
    TICHO           reduce using rule 14 (expression -> expr .)
    DIYE            reduce using rule 14 (expression -> expr .)
    BAJA            reduce using rule 14 (expression -> expr .)
    MAKA            reduce using rule 14 (expression -> expr .)
    BAISA           reduce using rule 14 (expression -> expr .)
    PATHAU          shift and go to state 72
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60
    LEKHA           reduce using rule 44 (variableExpr -> expr .)
    LEU             reduce using rule 44 (variableExpr -> expr .)
    COMMA           reduce using rule 44 (variableExpr -> expr .)


state 118

    (39) whileloop -> JABA SAMMA expr NEWLINE . program BAJA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    BAJA            reduce using rule 85 (empty -> .)
    NEWLINE         reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    program                        shift and go to state 129
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 119

    (41) function -> KAAM IDENTIFIER LPARA variableArgs . RPARA NEWLINE program MAKA

    RPARA           shift and go to state 130


state 120

    (46) variableArgs -> IDENTIFIER . COMMA variableArgs
    (47) variableArgs -> IDENTIFIER .
    (48) variableArgs -> IDENTIFIER . BOGUS

    COMMA           shift and go to state 131
    RPARA           reduce using rule 47 (variableArgs -> IDENTIFIER .)
    BOGUS           shift and go to state 132


state 121

    (49) variableArgs -> empty .

    RPARA           reduce using rule 49 (variableArgs -> empty .)


state 122

    (37) forloop -> SABAI IDENTIFIER ASSIGNMENT expr . DEKHI expr NEWLINE program BAISA
    (38) forloop -> SABAI IDENTIFIER ASSIGNMENT expr . DEKHI expr COLON expr NEWLINE program BAISA
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    DEKHI           shift and go to state 133
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 123

    (73) functioncall -> IDENTIFIER LPARA variableExpr RPARA .

    DOT             reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    NEWLINE         reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    PLUS            reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MINUS           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    TIMES           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DIVIDE          reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MODULUS         reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    POWER           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    GT              reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LT              reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    GE              reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LE              reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    EQ              reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    NE              reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RA              reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    WA              reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHHA            reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHHAINA         reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BHAE            reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    PATHAU          reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    CHOTI           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BAJA            reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LEKHA           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    LEU             reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    COMMA           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    $end            reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    RPARA           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    KAKHA           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    TICHO           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DIYE            reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    ATHAWA          reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    MAKA            reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    BAISA           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    DEKHI           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)
    COLON           reduce using rule 73 (functioncall -> IDENTIFIER LPARA variableExpr RPARA .)


state 124

    (42) class -> KHAKA IDENTIFIER NEWLINE program . KAKHA
    (2) program -> program . NEWLINE stmt

    KAKHA           shift and go to state 134
    NEWLINE         shift and go to state 51


state 125

    (40) repeatloop -> expr CHOTI NEWLINE program . TICHO
    (2) program -> program . NEWLINE stmt

    TICHO           shift and go to state 135
    NEWLINE         shift and go to state 51


state 126

    (24) slif -> YEDI expr . BHAE slstmt ATHAWA slstmt
    (25) slif -> YEDI expr . BHAE slstmt
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    BHAE            shift and go to state 136
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 127

    (32) mlif -> YEDI expr BHAE NEWLINE program . DIYE
    (33) mlif -> YEDI expr BHAE NEWLINE program . optelse DIYE
    (2) program -> program . NEWLINE stmt
    (34) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (35) optelse -> . ATHAWA expr BHAE NEWLINE program
    (36) optelse -> . ATHAWA NEWLINE program

    DIYE            shift and go to state 137
    NEWLINE         shift and go to state 51
    ATHAWA          shift and go to state 138

    optelse                        shift and go to state 139

state 128

    (24) slif -> YEDI expr BHAE slstmt ATHAWA . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (85) empty -> .
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 114
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    slif                           shift and go to state 1
    return                         shift and go to state 25
    slstmt                         shift and go to state 140
    integer                        shift and go to state 32
    expr                           shift and go to state 117
    float                          shift and go to state 24
    variableExpr                   shift and go to state 39
    incremental                    shift and go to state 8
    functioncall                   shift and go to state 41
    empty                          shift and go to state 91
    assignment                     shift and go to state 28
    print                          shift and go to state 16
    input                          shift and go to state 17
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7
    expression                     shift and go to state 42
    reference                      shift and go to state 3
    string                         shift and go to state 35

state 129

    (39) whileloop -> JABA SAMMA expr NEWLINE program . BAJA
    (2) program -> program . NEWLINE stmt

    BAJA            shift and go to state 141
    NEWLINE         shift and go to state 51


state 130

    (41) function -> KAAM IDENTIFIER LPARA variableArgs RPARA . NEWLINE program MAKA

    NEWLINE         shift and go to state 142


state 131

    (46) variableArgs -> IDENTIFIER COMMA . variableArgs
    (46) variableArgs -> . IDENTIFIER COMMA variableArgs
    (47) variableArgs -> . IDENTIFIER
    (48) variableArgs -> . IDENTIFIER BOGUS
    (49) variableArgs -> . empty
    (85) empty -> .

    IDENTIFIER      shift and go to state 120
    RPARA           reduce using rule 85 (empty -> .)

    variableArgs                   shift and go to state 143
    empty                          shift and go to state 121

state 132

    (48) variableArgs -> IDENTIFIER BOGUS .

    RPARA           reduce using rule 48 (variableArgs -> IDENTIFIER BOGUS .)


state 133

    (37) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI . expr NEWLINE program BAISA
    (38) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI . expr COLON expr NEWLINE program BAISA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 144
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 134

    (42) class -> KHAKA IDENTIFIER NEWLINE program KAKHA .

    NEWLINE         reduce using rule 42 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    $end            reduce using rule 42 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    KAKHA           reduce using rule 42 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    TICHO           reduce using rule 42 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    DIYE            reduce using rule 42 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    ATHAWA          reduce using rule 42 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    BAJA            reduce using rule 42 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    MAKA            reduce using rule 42 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)
    BAISA           reduce using rule 42 (class -> KHAKA IDENTIFIER NEWLINE program KAKHA .)


state 135

    (40) repeatloop -> expr CHOTI NEWLINE program TICHO .

    NEWLINE         reduce using rule 40 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    DIYE            reduce using rule 40 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    MAKA            reduce using rule 40 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    $end            reduce using rule 40 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    KAKHA           reduce using rule 40 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    TICHO           reduce using rule 40 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    ATHAWA          reduce using rule 40 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    BAJA            reduce using rule 40 (repeatloop -> expr CHOTI NEWLINE program TICHO .)
    BAISA           reduce using rule 40 (repeatloop -> expr CHOTI NEWLINE program TICHO .)


state 136

    (24) slif -> YEDI expr BHAE . slstmt ATHAWA slstmt
    (25) slif -> YEDI expr BHAE . slstmt
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (85) empty -> .
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 114
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)

    slif                           shift and go to state 1
    return                         shift and go to state 25
    slstmt                         shift and go to state 116
    integer                        shift and go to state 32
    expr                           shift and go to state 117
    float                          shift and go to state 24
    variableExpr                   shift and go to state 39
    incremental                    shift and go to state 8
    functioncall                   shift and go to state 41
    empty                          shift and go to state 91
    assignment                     shift and go to state 28
    print                          shift and go to state 16
    input                          shift and go to state 17
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7
    expression                     shift and go to state 42
    reference                      shift and go to state 3
    string                         shift and go to state 35

state 137

    (32) mlif -> YEDI expr BHAE NEWLINE program DIYE .

    DIYE            reduce using rule 32 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    NEWLINE         reduce using rule 32 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    ATHAWA          reduce using rule 32 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    BAISA           reduce using rule 32 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    KAKHA           reduce using rule 32 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    $end            reduce using rule 32 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    MAKA            reduce using rule 32 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    BAJA            reduce using rule 32 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)
    TICHO           reduce using rule 32 (mlif -> YEDI expr BHAE NEWLINE program DIYE .)


state 138

    (34) optelse -> ATHAWA . expr BHAE NEWLINE program optelse
    (35) optelse -> ATHAWA . expr BHAE NEWLINE program
    (36) optelse -> ATHAWA . NEWLINE program
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         shift and go to state 145
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 146
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 139

    (33) mlif -> YEDI expr BHAE NEWLINE program optelse . DIYE

    DIYE            shift and go to state 147


state 140

    (24) slif -> YEDI expr BHAE slstmt ATHAWA slstmt .

    NEWLINE         reduce using rule 24 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    DIYE            reduce using rule 24 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    MAKA            reduce using rule 24 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    $end            reduce using rule 24 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    KAKHA           reduce using rule 24 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    TICHO           reduce using rule 24 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    ATHAWA          reduce using rule 24 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    BAJA            reduce using rule 24 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)
    BAISA           reduce using rule 24 (slif -> YEDI expr BHAE slstmt ATHAWA slstmt .)


state 141

    (39) whileloop -> JABA SAMMA expr NEWLINE program BAJA .

    KAKHA           reduce using rule 39 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    NEWLINE         reduce using rule 39 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    BAISA           reduce using rule 39 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    TICHO           reduce using rule 39 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    ATHAWA          reduce using rule 39 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    DIYE            reduce using rule 39 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    BAJA            reduce using rule 39 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    $end            reduce using rule 39 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)
    MAKA            reduce using rule 39 (whileloop -> JABA SAMMA expr NEWLINE program BAJA .)


state 142

    (41) function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE . program MAKA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    MAKA            reduce using rule 85 (empty -> .)
    NEWLINE         reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    program                        shift and go to state 148
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 143

    (46) variableArgs -> IDENTIFIER COMMA variableArgs .

    RPARA           reduce using rule 46 (variableArgs -> IDENTIFIER COMMA variableArgs .)


state 144

    (37) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr . NEWLINE program BAISA
    (38) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr . COLON expr NEWLINE program BAISA
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    NEWLINE         shift and go to state 149
    COLON           shift and go to state 150
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 145

    (36) optelse -> ATHAWA NEWLINE . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 85 (empty -> .)
    DIYE            reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    program                        shift and go to state 151
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 146

    (34) optelse -> ATHAWA expr . BHAE NEWLINE program optelse
    (35) optelse -> ATHAWA expr . BHAE NEWLINE program
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    BHAE            shift and go to state 152
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 147

    (33) mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .

    DIYE            reduce using rule 33 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    NEWLINE         reduce using rule 33 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    ATHAWA          reduce using rule 33 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    BAISA           reduce using rule 33 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    KAKHA           reduce using rule 33 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    $end            reduce using rule 33 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    MAKA            reduce using rule 33 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    BAJA            reduce using rule 33 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)
    TICHO           reduce using rule 33 (mlif -> YEDI expr BHAE NEWLINE program optelse DIYE .)


state 148

    (41) function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program . MAKA
    (2) program -> program . NEWLINE stmt

    MAKA            shift and go to state 153
    NEWLINE         shift and go to state 51


state 149

    (37) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE . program BAISA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    BAISA           reduce using rule 85 (empty -> .)
    NEWLINE         reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    program                        shift and go to state 154
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 150

    (38) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON . expr NEWLINE program BAISA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18
    IDENTIFIER      shift and go to state 44

    string                         shift and go to state 35
    reference                      shift and go to state 3
    expr                           shift and go to state 155
    float                          shift and go to state 24
    functioncall                   shift and go to state 41
    integer                        shift and go to state 32
    imaginary                      shift and go to state 5
    identifier                     shift and go to state 7

state 151

    (36) optelse -> ATHAWA NEWLINE program .
    (2) program -> program . NEWLINE stmt

    DIYE            reduce using rule 36 (optelse -> ATHAWA NEWLINE program .)
    NEWLINE         shift and go to state 51


state 152

    (34) optelse -> ATHAWA expr BHAE . NEWLINE program optelse
    (35) optelse -> ATHAWA expr BHAE . NEWLINE program

    NEWLINE         shift and go to state 156


state 153

    (41) function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .

    MAKA            reduce using rule 41 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    NEWLINE         reduce using rule 41 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    BAJA            reduce using rule 41 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    DIYE            reduce using rule 41 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    ATHAWA          reduce using rule 41 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    $end            reduce using rule 41 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    BAISA           reduce using rule 41 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    TICHO           reduce using rule 41 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)
    KAKHA           reduce using rule 41 (function -> KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA .)


state 154

    (37) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program . BAISA
    (2) program -> program . NEWLINE stmt

    BAISA           shift and go to state 157
    NEWLINE         shift and go to state 51


state 155

    (38) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr . NEWLINE program BAISA
    (50) expr -> expr . PLUS expr
    (51) expr -> expr . MINUS expr
    (52) expr -> expr . TIMES expr
    (53) expr -> expr . DIVIDE expr
    (54) expr -> expr . MODULUS expr
    (55) expr -> expr . POWER expr
    (75) expr -> expr . GT expr
    (76) expr -> expr . LT expr
    (77) expr -> expr . GE expr
    (78) expr -> expr . LE expr
    (79) expr -> expr . EQ expr
    (80) expr -> expr . NE expr
    (81) expr -> expr . RA expr
    (82) expr -> expr . WA expr
    (83) expr -> expr . CHHA
    (84) expr -> expr . CHHAINA

    NEWLINE         shift and go to state 158
    PLUS            shift and go to state 67
    MINUS           shift and go to state 61
    TIMES           shift and go to state 71
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 64
    POWER           shift and go to state 63
    GT              shift and go to state 69
    LT              shift and go to state 66
    GE              shift and go to state 73
    LE              shift and go to state 62
    EQ              shift and go to state 75
    NE              shift and go to state 65
    RA              shift and go to state 68
    WA              shift and go to state 59
    CHHA            shift and go to state 76
    CHHAINA         shift and go to state 60


state 156

    (34) optelse -> ATHAWA expr BHAE NEWLINE . program optelse
    (35) optelse -> ATHAWA expr BHAE NEWLINE . program
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    NEWLINE         reduce using rule 85 (empty -> .)
    ATHAWA          reduce using rule 85 (empty -> .)
    DIYE            reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    program                        shift and go to state 159
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 157

    (37) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .

    KAKHA           reduce using rule 37 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    NEWLINE         reduce using rule 37 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    TICHO           reduce using rule 37 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    $end            reduce using rule 37 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    DIYE            reduce using rule 37 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    ATHAWA          reduce using rule 37 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    BAISA           reduce using rule 37 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    BAJA            reduce using rule 37 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)
    MAKA            reduce using rule 37 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA .)


state 158

    (38) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE . program BAISA
    (2) program -> . program NEWLINE stmt
    (3) program -> . stmt
    (4) stmt -> . empty
    (5) stmt -> . slstmt
    (6) stmt -> . mlstmt
    (85) empty -> .
    (7) slstmt -> . expression
    (8) slstmt -> . assignment
    (9) slstmt -> . print
    (10) slstmt -> . input
    (11) slstmt -> . slif
    (12) slstmt -> . incremental
    (13) slstmt -> . return
    (26) mlstmt -> . mlif
    (27) mlstmt -> . forloop
    (28) mlstmt -> . whileloop
    (29) mlstmt -> . repeatloop
    (30) mlstmt -> . function
    (31) mlstmt -> . class
    (14) expression -> . expr
    (15) assignment -> . IDENTIFIER ASSIGNMENT expr
    (16) print -> . variableExpr LEKHA SEMICOLON
    (17) print -> . variableExpr LEKHA
    (18) input -> . variableExpr LEU
    (24) slif -> . YEDI expr BHAE slstmt ATHAWA slstmt
    (25) slif -> . YEDI expr BHAE slstmt
    (19) incremental -> . IDENTIFIER AI expr
    (20) incremental -> . IDENTIFIER SI expr
    (21) incremental -> . IDENTIFIER MI expr
    (22) incremental -> . IDENTIFIER DI expr
    (23) return -> . expr PATHAU
    (32) mlif -> . YEDI expr BHAE NEWLINE program DIYE
    (33) mlif -> . YEDI expr BHAE NEWLINE program optelse DIYE
    (37) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr NEWLINE program BAISA
    (38) forloop -> . SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA
    (39) whileloop -> . JABA SAMMA expr NEWLINE program BAJA
    (40) repeatloop -> . expr CHOTI NEWLINE program TICHO
    (41) function -> . KAAM IDENTIFIER LPARA variableArgs RPARA NEWLINE program MAKA
    (42) class -> . KHAKA IDENTIFIER NEWLINE program KAKHA
    (50) expr -> . expr PLUS expr
    (51) expr -> . expr MINUS expr
    (52) expr -> . expr TIMES expr
    (53) expr -> . expr DIVIDE expr
    (54) expr -> . expr MODULUS expr
    (55) expr -> . expr POWER expr
    (56) expr -> . LPARA expr RPARA
    (57) expr -> . integer
    (58) expr -> . float
    (59) expr -> . imaginary
    (60) expr -> . string
    (61) expr -> . reference
    (74) expr -> . MINUS expr
    (75) expr -> . expr GT expr
    (76) expr -> . expr LT expr
    (77) expr -> . expr GE expr
    (78) expr -> . expr LE expr
    (79) expr -> . expr EQ expr
    (80) expr -> . expr NE expr
    (81) expr -> . expr RA expr
    (82) expr -> . expr WA expr
    (83) expr -> . expr CHHA
    (84) expr -> . expr CHHAINA
    (43) variableExpr -> . variableExpr COMMA expr
    (44) variableExpr -> . expr
    (45) variableExpr -> . empty
    (62) integer -> . DECIMALINTEGER
    (63) integer -> . OCTALINTEGER
    (64) integer -> . HEXAINTEGER
    (65) float -> . FLOAT
    (66) imaginary -> . IMAGNUMBER
    (67) string -> . STRING
    (68) reference -> . identifier
    (69) reference -> . functioncall
    (70) reference -> . reference DOT identifier
    (71) reference -> . reference DOT functioncall
    (72) identifier -> . IDENTIFIER
    (73) functioncall -> . IDENTIFIER LPARA variableExpr RPARA

    BAISA           reduce using rule 85 (empty -> .)
    NEWLINE         reduce using rule 85 (empty -> .)
    LEKHA           reduce using rule 85 (empty -> .)
    LEU             reduce using rule 85 (empty -> .)
    COMMA           reduce using rule 85 (empty -> .)
    IDENTIFIER      shift and go to state 19
    YEDI            shift and go to state 4
    SABAI           shift and go to state 14
    JABA            shift and go to state 9
    KAAM            shift and go to state 13
    KHAKA           shift and go to state 31
    LPARA           shift and go to state 6
    MINUS           shift and go to state 10
    DECIMALINTEGER  shift and go to state 2
    OCTALINTEGER    shift and go to state 12
    HEXAINTEGER     shift and go to state 36
    FLOAT           shift and go to state 38
    IMAGNUMBER      shift and go to state 27
    STRING          shift and go to state 18

    slif                           shift and go to state 1
    reference                      shift and go to state 3
    float                          shift and go to state 24
    incremental                    shift and go to state 8
    imaginary                      shift and go to state 5
    string                         shift and go to state 35
    forloop                        shift and go to state 11
    program                        shift and go to state 160
    print                          shift and go to state 16
    input                          shift and go to state 17
    empty                          shift and go to state 20
    function                       shift and go to state 21
    whileloop                      shift and go to state 22
    return                         shift and go to state 25
    slstmt                         shift and go to state 26
    assignment                     shift and go to state 28
    repeatloop                     shift and go to state 29
    stmt                           shift and go to state 30
    integer                        shift and go to state 32
    mlif                           shift and go to state 33
    class                          shift and go to state 34
    expr                           shift and go to state 37
    variableExpr                   shift and go to state 39
    mlstmt                         shift and go to state 40
    functioncall                   shift and go to state 41
    identifier                     shift and go to state 7
    expression                     shift and go to state 42

state 159

    (34) optelse -> ATHAWA expr BHAE NEWLINE program . optelse
    (35) optelse -> ATHAWA expr BHAE NEWLINE program .
    (2) program -> program . NEWLINE stmt
    (34) optelse -> . ATHAWA expr BHAE NEWLINE program optelse
    (35) optelse -> . ATHAWA expr BHAE NEWLINE program
    (36) optelse -> . ATHAWA NEWLINE program

    DIYE            reduce using rule 35 (optelse -> ATHAWA expr BHAE NEWLINE program .)
    NEWLINE         shift and go to state 51
    ATHAWA          shift and go to state 138

    optelse                        shift and go to state 161

state 160

    (38) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program . BAISA
    (2) program -> program . NEWLINE stmt

    BAISA           shift and go to state 162
    NEWLINE         shift and go to state 51


state 161

    (34) optelse -> ATHAWA expr BHAE NEWLINE program optelse .

    DIYE            reduce using rule 34 (optelse -> ATHAWA expr BHAE NEWLINE program optelse .)


state 162

    (38) forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .

    KAKHA           reduce using rule 38 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    NEWLINE         reduce using rule 38 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    TICHO           reduce using rule 38 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    $end            reduce using rule 38 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    DIYE            reduce using rule 38 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    ATHAWA          reduce using rule 38 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    BAISA           reduce using rule 38 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    BAJA            reduce using rule 38 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)
    MAKA            reduce using rule 38 (forloop -> SABAI IDENTIFIER ASSIGNMENT expr DEKHI expr COLON expr NEWLINE program BAISA .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ATHAWA in state 116 resolved as shift
